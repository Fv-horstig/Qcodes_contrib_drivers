Search.setIndex({"docnames": ["api/generated/qcodes_contrib_drivers.drivers", "api/generated/qcodes_contrib_drivers.drivers.Advantech", "api/generated/qcodes_contrib_drivers.drivers.Agilent", "api/generated/qcodes_contrib_drivers.drivers.AimTTi", "api/generated/qcodes_contrib_drivers.drivers.Andor", "api/generated/qcodes_contrib_drivers.drivers.Attocube", "api/generated/qcodes_contrib_drivers.drivers.Attocube.ANC350Lib", "api/generated/qcodes_contrib_drivers.drivers.Aviosys", "api/generated/qcodes_contrib_drivers.drivers.Bilt", "api/generated/qcodes_contrib_drivers.drivers.BlueFors", "api/generated/qcodes_contrib_drivers.drivers.CopperMountain", "api/generated/qcodes_contrib_drivers.drivers.Cryocon", "api/generated/qcodes_contrib_drivers.drivers.Cryogenic", "api/generated/qcodes_contrib_drivers.drivers.ERAInstruments", "api/generated/qcodes_contrib_drivers.drivers.GeneralMicrowave", "api/generated/qcodes_contrib_drivers.drivers.Gentec", "api/generated/qcodes_contrib_drivers.drivers.Holzworth", "api/generated/qcodes_contrib_drivers.drivers.Keysight", "api/generated/qcodes_contrib_drivers.drivers.Keysight.SD_common", "api/generated/qcodes_contrib_drivers.drivers.Lakeshore", "api/generated/qcodes_contrib_drivers.drivers.NationalInstruments", "api/generated/qcodes_contrib_drivers.drivers.Newport", "api/generated/qcodes_contrib_drivers.drivers.Oxford", "api/generated/qcodes_contrib_drivers.drivers.QDevil", "api/generated/qcodes_contrib_drivers.drivers.QuTech", "api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz", "api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.private", "api/generated/qcodes_contrib_drivers.drivers.Shamrock", "api/generated/qcodes_contrib_drivers.drivers.SignalCore", "api/generated/qcodes_contrib_drivers.drivers.SingleQuantum", "api/generated/qcodes_contrib_drivers.drivers.Spectrum", "api/generated/qcodes_contrib_drivers.drivers.Spectrum.py_header", "api/generated/qcodes_contrib_drivers.drivers.Standa", "api/generated/qcodes_contrib_drivers.drivers.StanfordResearchSystems", "api/generated/qcodes_contrib_drivers.drivers.Tektronix", "api/generated/qcodes_contrib_drivers.drivers.Thorlabs", "api/generated/qcodes_contrib_drivers.drivers.Vaunix", "api/generated/qcodes_contrib_drivers.drivers.ZurichInstruments", "examples/Agilent_N9000A", "examples/AimTTi_EL320P", "examples/Andor_DU401", "examples/Attocube_ANC300", "examples/Aviosys_IP_Power_9258S", "examples/BlueFors", "examples/CopperMountain_M5180", "examples/ERASynth", "examples/Gentec_Maestro", "examples/Holzworth_HS900", "examples/ITest", "examples/Keithley_6430", "examples/Keysight_M3202A", "examples/Keysight_M3202A with digitizer", "examples/Lakeshore_311", "examples/Lakeshore_625", "examples/NationalInstruments_DAQ", "examples/NationalInstruments_PXIe_2597", "examples/NationalInstruments_RFSG", "examples/Newport_AG-UC8", "examples/OxfordTriton", "examples/QDevil/QDAC2/AWG", "examples/QDevil/QDAC2/Chaining", "examples/QDevil/QDAC2/DC_Constant", "examples/QDevil/QDAC2/Debugging", "examples/QDevil/QDAC2/GateLeakage", "examples/QDevil/QDAC2/GateLeakageMultipleQDACs", "examples/QDevil/QDAC2/List", "examples/QDevil/QDAC2/MultiGenerator", "examples/QDevil/QDAC2/PyvisaAwg", "examples/QDevil/QDAC2/Scan", "examples/QDevil/QDAC2/Scan2DDiode", "examples/QDevil/QDAC2/Sine", "examples/QDevil/QDAC2/Square", "examples/QDevil/QDAC2/Sweep", "examples/QDevil/QDAC2/SyncMultipleQDACs", "examples/QDevil/QDAC2/Triangle", "examples/QDevil/QDAC2/VirtualGates", "examples/QDevil/QDAC2/do2dScan", "examples/QDevil/QDAC2/index", "examples/QDevil/index", "examples/Rohde_Schwarz_HMC8043", "examples/Rohde_Schwarz_HMP4040", "examples/Rohde_Schwarz_SMW200A", "examples/Shamrock_SR750", "examples/SignalCore", "examples/SingleQuantum", "examples/Standa_10MWA168", "examples/Tektronix_AFG3000_series", "examples/Tektronix_Keithley_6500", "examples/Thorlabs_K10CR1", "examples/Thorlabs_MFF10x", "examples/Thorlabs_PRM1Z8", "examples/Vaunix_LDA", "examples/ZVL13", "examples/ZurichInstruments_HF2LI", "examples/index", "index"], "filenames": ["api/generated/qcodes_contrib_drivers.drivers.rst", "api/generated/qcodes_contrib_drivers.drivers.Advantech.rst", "api/generated/qcodes_contrib_drivers.drivers.Agilent.rst", "api/generated/qcodes_contrib_drivers.drivers.AimTTi.rst", "api/generated/qcodes_contrib_drivers.drivers.Andor.rst", "api/generated/qcodes_contrib_drivers.drivers.Attocube.rst", "api/generated/qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.rst", "api/generated/qcodes_contrib_drivers.drivers.Aviosys.rst", "api/generated/qcodes_contrib_drivers.drivers.Bilt.rst", "api/generated/qcodes_contrib_drivers.drivers.BlueFors.rst", "api/generated/qcodes_contrib_drivers.drivers.CopperMountain.rst", "api/generated/qcodes_contrib_drivers.drivers.Cryocon.rst", "api/generated/qcodes_contrib_drivers.drivers.Cryogenic.rst", "api/generated/qcodes_contrib_drivers.drivers.ERAInstruments.rst", "api/generated/qcodes_contrib_drivers.drivers.GeneralMicrowave.rst", "api/generated/qcodes_contrib_drivers.drivers.Gentec.rst", "api/generated/qcodes_contrib_drivers.drivers.Holzworth.rst", "api/generated/qcodes_contrib_drivers.drivers.Keysight.rst", "api/generated/qcodes_contrib_drivers.drivers.Keysight.SD_common.rst", "api/generated/qcodes_contrib_drivers.drivers.Lakeshore.rst", "api/generated/qcodes_contrib_drivers.drivers.NationalInstruments.rst", "api/generated/qcodes_contrib_drivers.drivers.Newport.rst", "api/generated/qcodes_contrib_drivers.drivers.Oxford.rst", "api/generated/qcodes_contrib_drivers.drivers.QDevil.rst", "api/generated/qcodes_contrib_drivers.drivers.QuTech.rst", "api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.rst", "api/generated/qcodes_contrib_drivers.drivers.RohdeSchwarz.private.rst", "api/generated/qcodes_contrib_drivers.drivers.Shamrock.rst", "api/generated/qcodes_contrib_drivers.drivers.SignalCore.rst", "api/generated/qcodes_contrib_drivers.drivers.SingleQuantum.rst", "api/generated/qcodes_contrib_drivers.drivers.Spectrum.rst", "api/generated/qcodes_contrib_drivers.drivers.Spectrum.py_header.rst", "api/generated/qcodes_contrib_drivers.drivers.Standa.rst", "api/generated/qcodes_contrib_drivers.drivers.StanfordResearchSystems.rst", "api/generated/qcodes_contrib_drivers.drivers.Tektronix.rst", "api/generated/qcodes_contrib_drivers.drivers.Thorlabs.rst", "api/generated/qcodes_contrib_drivers.drivers.Vaunix.rst", "api/generated/qcodes_contrib_drivers.drivers.ZurichInstruments.rst", "examples/Agilent_N9000A.ipynb", "examples/AimTTi_EL320P.ipynb", "examples/Andor_DU401.ipynb", "examples/Attocube_ANC300.ipynb", "examples/Aviosys_IP_Power_9258S.ipynb", "examples/BlueFors.ipynb", "examples/CopperMountain_M5180.ipynb", "examples/ERASynth.ipynb", "examples/Gentec_Maestro.ipynb", "examples/Holzworth_HS900.ipynb", "examples/ITest.ipynb", "examples/Keithley_6430.ipynb", "examples/Keysight_M3202A.ipynb", "examples/Keysight_M3202A with digitizer.ipynb", "examples/Lakeshore_311.ipynb", "examples/Lakeshore_625.ipynb", "examples/NationalInstruments_DAQ.ipynb", "examples/NationalInstruments_PXIe_2597.ipynb", "examples/NationalInstruments_RFSG.ipynb", "examples/Newport_AG-UC8.ipynb", "examples/OxfordTriton.ipynb", "examples/QDevil/QDAC2/AWG.ipynb", "examples/QDevil/QDAC2/Chaining.ipynb", "examples/QDevil/QDAC2/DC_Constant.ipynb", "examples/QDevil/QDAC2/Debugging.ipynb", "examples/QDevil/QDAC2/GateLeakage.ipynb", "examples/QDevil/QDAC2/GateLeakageMultipleQDACs.ipynb", "examples/QDevil/QDAC2/List.ipynb", "examples/QDevil/QDAC2/MultiGenerator.ipynb", "examples/QDevil/QDAC2/PyvisaAwg.ipynb", "examples/QDevil/QDAC2/Scan.ipynb", "examples/QDevil/QDAC2/Scan2DDiode.ipynb", "examples/QDevil/QDAC2/Sine.ipynb", "examples/QDevil/QDAC2/Square.ipynb", "examples/QDevil/QDAC2/Sweep.ipynb", "examples/QDevil/QDAC2/SyncMultipleQDACs.ipynb", "examples/QDevil/QDAC2/Triangle.ipynb", "examples/QDevil/QDAC2/VirtualGates.ipynb", "examples/QDevil/QDAC2/do2dScan.ipynb", "examples/QDevil/QDAC2/index.rst", "examples/QDevil/index.rst", "examples/Rohde_Schwarz_HMC8043.ipynb", "examples/Rohde_Schwarz_HMP4040.ipynb", "examples/Rohde_Schwarz_SMW200A.ipynb", "examples/Shamrock_SR750.ipynb", "examples/SignalCore.ipynb", "examples/SingleQuantum.ipynb", "examples/Standa_10MWA168.ipynb", "examples/Tektronix_AFG3000_series.ipynb", "examples/Tektronix_Keithley_6500.ipynb", "examples/Thorlabs_K10CR1.ipynb", "examples/Thorlabs_MFF10x.ipynb", "examples/Thorlabs_PRM1Z8.ipynb", "examples/Vaunix_LDA.ipynb", "examples/ZVL13.ipynb", "examples/ZurichInstruments_HF2LI.ipynb", "examples/index.rst", "index.rst"], "titles": ["qcodes_contrib_drivers.drivers package", "qcodes_contrib_drivers.drivers.Advantech package", "qcodes_contrib_drivers.drivers.Agilent package", "qcodes_contrib_drivers.drivers.AimTTi package", "qcodes_contrib_drivers.drivers.Andor package", "qcodes_contrib_drivers.drivers.Attocube package", "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib package", "qcodes_contrib_drivers.drivers.Aviosys package", "qcodes_contrib_drivers.drivers.Bilt package", "qcodes_contrib_drivers.drivers.BlueFors package", "qcodes_contrib_drivers.drivers.CopperMountain package", "qcodes_contrib_drivers.drivers.Cryocon package", "qcodes_contrib_drivers.drivers.Cryogenic package", "qcodes_contrib_drivers.drivers.ERAInstruments package", "qcodes_contrib_drivers.drivers.GeneralMicrowave package", "qcodes_contrib_drivers.drivers.Gentec package", "qcodes_contrib_drivers.drivers.Holzworth package", "qcodes_contrib_drivers.drivers.Keysight package", "qcodes_contrib_drivers.drivers.Keysight.SD_common package", "qcodes_contrib_drivers.drivers.Lakeshore package", "qcodes_contrib_drivers.drivers.NationalInstruments package", "qcodes_contrib_drivers.drivers.Newport package", "qcodes_contrib_drivers.drivers.Oxford package", "qcodes_contrib_drivers.drivers.QDevil package", "qcodes_contrib_drivers.drivers.QuTech package", "qcodes_contrib_drivers.drivers.RohdeSchwarz package", "qcodes_contrib_drivers.drivers.RohdeSchwarz.private package", "qcodes_contrib_drivers.drivers.Shamrock package", "qcodes_contrib_drivers.drivers.SignalCore package", "qcodes_contrib_drivers.drivers.SingleQuantum package", "qcodes_contrib_drivers.drivers.Spectrum package", "qcodes_contrib_drivers.drivers.Spectrum.py_header package", "qcodes_contrib_drivers.drivers.Standa package", "qcodes_contrib_drivers.drivers.StanfordResearchSystems package", "qcodes_contrib_drivers.drivers.Tektronix package", "qcodes_contrib_drivers.drivers.Thorlabs package", "qcodes_contrib_drivers.drivers.Vaunix package", "qcodes_contrib_drivers.drivers.ZurichInstruments package", "Example with the Agilent N9000A", "Example notebook for AimTTi EL320P", "Qcodes example with Andor DU401 BU2", "QCoDeS example with Attocube ANC300", "Qcodes example with Aviosys IP Power 9258S", "Example with the BlueFors", "Example with CopperMountain Model M5180 vector network analyzer", "Example with ERASynth", "QCoDeS Example with Gentec Maestro", "Example notebook for the Holzworth HS900B RF synthesizer", "Example with the iTest from Bilt", "Example notebook for Keithley 6430 SMU", "Keysight M3202A AWG", "Keysight M3202A AWG example with digitizer", "Qcodes example with Lakeshore 311", "Example with Lakeshore Model 625 Superconducting Magnet power supply", "National Instruments Multifunction DAQ example", "Qcodes example for National Instruments PXIe-2597 RF Switch", "Qcodes example with the NI RFSG signal generator driver", "QCoDeS Example with Newport AG-UC8 Piezo Motion Controller", "Example of the oxford triton driver", "QDAC-II arbitrary-waveform generator", "QDAC-II trigger chaining", "QDAC-II constant voltage", "QDAC-II debugging", "Gate Leakage Test", "Gate Leakage using multiple QDAC-IIs", "QDAC-II voltage lists", "QDAC-II multiple generators per channel", "PyVisa direct use of QDAC-II", "QDAC-II 1D &amp; 2D scan", "QDAC-II 2D diode scan", "QDAC-II sine waves", "QDAC-II square waves", "QDAC-II voltage sweep", "Synchronise multiple QDAC-IIs", "QDAC-II triangle waves", "QDAC-II virtual gates", "QDAC-II 2D diode scan", "QCoDeS examples of how to use QDAC-II", "QDevil drivers", "QCoDeS Example with R&amp;S HMC 8043 Power Supply", "QCoDeS Example with R&amp;S HMP4040 Power Supply", "QCoDeS example with Rohe&amp;Schwarz SMW200A", "Qcodes example with Shamrock SR750", "Example with the microwave source SC5521A from Signal Core", "Example for Single Quantum SNSPD", "Qcodes example with Standa 10MWA168", "Tektronix AFG3000 series arbitrary function generator", "QCoDeS Example with Tektronix Keithley Digital Multimeter DMM6500", "Qcodes example with Thorlabs K10CR1", "Qcodes example with Thorlabs MFF10x", "Qcodes example with Thorlabs PRM1Z8", "Qcodes example for Vaunix LDA step attenuator", "Rohde &amp; Schwarz ZVL13 Vector Network Analyzer example", "Zurich Instruments HF2LI example", "Examples of how to use drivers", "Welcome to QCoDeS Contributed Drivers\u2019s documentation!"], "terms": {"advantech": 0, "pcie_1751": 0, "daqnaviexcept": [0, 1], "daqnaviwarn": [0, 1], "advantech_pcie_1751": [0, 1], "check": [0, 1, 5, 6, 20, 22, 29, 33, 34, 35, 41, 47, 55, 94], "close": [0, 1, 4, 5, 6, 17, 18, 20, 22, 25, 27, 29, 30, 36, 41, 49, 50, 51, 55, 81, 84, 86, 88, 94], "get_idn": [0, 1, 4, 5, 7, 12, 13, 15, 17, 20, 21, 22, 24, 27, 28, 30, 35, 36, 57, 83], "port_count": [0, 1], "read_pin": [0, 1], "read_port": [0, 1], "write_pin": [0, 1], "write_port": [0, 1], "errormsg": [0, 1], "agil": [0, 17, 94, 95], "agilent_n9000a": [0, 38], "__init__": [0, 2, 5, 6, 8, 9, 10, 13, 16, 17, 18, 20, 22, 23, 24, 25, 28, 30, 34, 36, 37], "power_pars": [0, 2], "aimtti": [0, 94, 95], "el320p": [0, 94, 95], "andor": [0, 94, 95], "du401": [0, 94, 95], "andor_du401": [0, 4, 40], "serial_numb": [0, 4, 18, 27, 35, 36], "head_model": [0, 4], "firmware_vers": [0, 4, 15], "firmware_build": [0, 4], "x_pixel": [0, 4], "y_pixel": [0, 4], "spectrum": [0, 2, 4, 10, 94], "get_raw": [0, 4, 10, 14, 20, 23, 25, 29, 36], "set_raw": [0, 4, 14, 20, 36], "atmcd64d": [0, 4], "verbos": [0, 4, 17, 18, 23, 27, 30, 32, 35], "dll": [0, 1, 4, 5, 6, 20, 27, 28, 35, 36, 83, 88, 91], "cooler_off": [0, 4], "cooler_on": [0, 4], "error_check": [0, 4, 27, 32, 35], "get_acquired_data": [0, 4], "get_acquisition_tim": [0, 4], "get_camera_handl": [0, 4], "get_camera_serial_numb": [0, 4], "get_detector": [0, 4], "get_filter_mod": [0, 4], "get_hardware_vers": [0, 4, 17, 18, 30], "get_head_model": [0, 4], "get_statu": [0, 4, 17, 18, 32], "get_temperatur": [0, 4, 9, 22], "get_temperature_rang": [0, 4], "initi": [0, 1, 4, 6, 18, 20, 22, 23, 27, 33, 34, 35, 53, 55, 57, 94], "is_cooler_on": [0, 4], "set_accumulation_cycle_tim": [0, 4], "set_acquisition_mod": [0, 4], "set_current_camera": [0, 4], "set_exposure_tim": [0, 4], "set_filter_mod": [0, 4], "set_number_accumul": [0, 4], "set_read_mod": [0, 4], "set_shutt": [0, 4], "set_temperatur": [0, 4, 40], "set_trigger_mod": [0, 4, 17, 18], "shut_down": [0, 4], "start_acquisit": [0, 4, 30], "wait_for_acquisit": [0, 4], "attocub": [0, 94, 95], "anc350lib": [0, 5], "interfac": [0, 1, 5, 18, 23], "anc350liberror": [0, 5, 6], "messag": [0, 5, 6, 12, 23, 24, 30, 33], "code": [0, 4, 5, 6, 12, 18, 21, 25, 27, 30, 32, 35, 87], "check_error": [0, 5, 6, 29, 51], "success_cod": [0, 5, 6], "warning_cod": [0, 5, 6], "anc350libactuatortyp": [0, 5, 6], "goniomet": [0, 5, 6], "linear": [0, 5, 6, 10, 25], "rotat": [0, 5, 6, 35, 57, 94], "anc350libamplitudecontrolmod": [0, 5, 6], "amplitud": [0, 5, 6, 13, 18, 21, 25, 41, 45, 57, 93, 94], "speed": [0, 5, 6, 21], "stepsiz": [0, 5, 6, 24], "anc350libdevicetyp": [0, 5, 6], "fp": [0, 5, 6, 31], "noth": [0, 5, 6, 20], "num": [0, 5, 6], "re": [0, 5, 6, 30, 49, 86, 87], "anc350libexternaltriggermod": [0, 5, 6], "disabl": [0, 5, 6, 13, 18, 30, 35, 37, 53, 56], "quadratur": [0, 5, 6, 93], "trigger": [0, 5, 6, 13, 17, 18, 23, 25, 30, 33, 34, 59, 62, 65, 68, 69, 70, 73, 74, 75, 77, 78, 84, 86, 94], "anc350libsignaledg": [0, 5, 6], "fall": [0, 5, 6, 18, 25], "rise": [0, 5, 6, 18, 25], "anc350libtriggerinputmod": [0, 5, 6], "coars": [0, 5, 6], "anc350libtriggeroutputmod": [0, 5, 6], "ichau": [0, 5, 6], "posit": [0, 5, 6, 18, 21, 23, 30, 32, 35, 37, 41, 57, 94], "anc350libtriggerpolar": [0, 5, 6], "high": [0, 5, 6, 18, 23, 25, 30, 56, 61, 81], "low": [0, 5, 6, 13, 18, 23, 25, 30, 61], "v3": [0, 5], "anc350v3liberror": [0, 5, 6], "anc350v3lib": [0, 5, 6], "configure_a_quad_b_in": [0, 5, 6], "configure_a_quad_b_out": [0, 5, 6], "configure_duty_cycl": [0, 5, 6], "configure_ext_trigg": [0, 5, 6], "configure_nsl_trigg": [0, 5, 6], "configure_nsl_trigger_axi": [0, 5, 6], "configure_rng_trigg": [0, 5, 6], "configure_rng_trigger_ep": [0, 5, 6], "configure_rng_trigger_pol": [0, 5, 6], "connect": [0, 5, 6, 13, 14, 15, 16, 20, 22, 23, 24, 25, 27, 28, 29, 33, 35, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 84, 85, 86, 88, 89, 90, 91, 94, 95], "disconnect": [0, 5, 6, 20, 55, 86], "discov": [0, 5, 6], "enable_ref_auto_reset": [0, 5, 6], "enable_ref_auto_upd": [0, 5, 6], "enable_sensor": [0, 5, 6], "get_actuator_nam": [0, 5, 6], "get_actuator_typ": [0, 5, 6], "get_amplitud": [0, 5, 6], "get_axis_statu": [0, 5, 6], "get_device_config": [0, 5, 6], "get_device_info": [0, 5, 6], "get_firmware_vers": [0, 5, 6, 17, 18, 30], "get_frequ": [0, 5, 6], "get_posit": [0, 5, 6, 32], "get_ref_posit": [0, 5, 6], "measure_capacit": [0, 5, 6], "move_refer": [0, 5, 6], "reset_posit": [0, 5, 6], "save_param": [0, 5, 6], "select_actu": [0, 5, 6], "set_amplitud": [0, 5, 6], "set_axis_output": [0, 5, 6], "set_dc_voltag": [0, 5, 6], "set_frequ": [0, 5, 6], "set_target_posit": [0, 5, 6], "set_target_rang": [0, 5, 6], "start_auto_mov": [0, 5, 6], "start_continuous_mov": [0, 5, 6], "start_single_step": [0, 5, 6], "default_path_to_dl": [0, 5, 6], "v4": [0, 5], "anc350v4lib": [0, 5, 6], "get_dc_voltag": [0, 5, 6], "get_lut_nam": [0, 5, 6], "load_lut_fil": [0, 5, 6], "register_external_ip": [0, 5, 6], "set_target_ground": [0, 5, 6], "anc300": [0, 94, 95], "ask_raw": [0, 5, 13], "getal": [0, 5, 25], "stopal": [0, 5], "version": [0, 1, 4, 5, 6, 12, 13, 15, 17, 18, 20, 22, 23, 24, 25, 33, 34, 35, 88, 89, 90], "write_raw": [0, 5, 13, 21], "anc300axi": [0, 5], "frequenc": [0, 5, 6, 10, 13, 18, 23, 24, 25, 28, 34, 36, 41, 44, 47, 81, 83, 87, 93, 94], "voltag": [0, 5, 6, 8, 13, 18, 20, 23, 24, 25, 30, 33, 34, 39, 45, 48, 49, 53, 54, 56, 60, 63, 64, 68, 77, 78, 79, 80, 86, 87, 94], "offset": [0, 5, 18, 23, 25, 35, 46], "filter": [0, 5, 18, 23, 30, 40, 61], "mode": [0, 1, 4, 5, 6, 10, 13, 18, 20, 22, 23, 24, 25, 30, 33, 34, 37, 38, 41, 44, 47, 49, 53, 58, 62, 67, 69, 81, 83, 86, 94], "ac": [0, 5, 18, 30], "dc": [0, 5, 6, 17, 18, 23, 25, 30, 33, 34, 39, 48, 49, 54, 61, 62, 67, 87], "move": [0, 5, 6, 21, 35, 41, 57, 94], "start": [0, 1, 5, 6, 8, 10, 17, 18, 20, 21, 22, 23, 24, 25, 30, 33, 34, 35, 38, 40, 44, 47, 50, 51, 54, 56, 58, 59, 62, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 83, 88, 92], "triggerup": [0, 5], "triggerdown": [0, 5], "stopmov": [0, 5, 41], "waitmov": [0, 5, 41], "anc300triggerout": [0, 5], "state": [0, 1, 5, 6, 10, 13, 18, 20, 23, 25, 29, 38, 44, 47, 58, 69, 79, 80, 81, 83], "anc300sim": 0, "mockvisa": [0, 5, 25], "set_address": [0, 5, 16, 25], "mockvisahandl": [0, 5, 25, 81], "ask": [0, 5, 12, 13, 21, 23, 24, 25, 33, 81, 87], "clear": [0, 5, 6, 13, 23, 25, 33, 34, 46, 51], "queri": [0, 5, 12, 20, 21, 23, 25, 33, 44, 57, 67, 94], "read": [0, 1, 5, 6, 10, 13, 18, 20, 22, 23, 24, 25, 30, 34, 40, 41, 47, 51, 53, 80, 81, 82, 87, 88, 94, 95], "write": [0, 1, 5, 12, 13, 18, 20, 21, 23, 24, 25, 33, 37, 54, 59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 81, 95], "cmddef": [0, 5, 25], "anc350": [0, 6], "anc350axi": [0, 5], "statu": [0, 5, 6, 13, 17, 18, 22, 23, 24, 25, 32, 33, 34, 35, 45, 52, 57, 83, 94], "target_posit": [0, 5], "target_rang": [0, 5, 6], "actuat": [0, 5, 6, 57], "actuator_nam": [0, 5], "capacit": [0, 5, 6], "disable_auto_mov": [0, 5], "enable_auto_mov": [0, 5], "multiple_step": [0, 5], "single_step": [0, 5], "stop_continuous_mov": [0, 5], "aviosi": [0, 94, 95], "ip_power_9258": [0, 42], "aviosys_ip_power_9258": [0, 7, 42], "address": [0, 2, 5, 6, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 34, 41, 42, 44, 47, 48, 52, 53, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 84, 86, 94], "powerchannel": [0, 7], "channel_id": [0, 7], "channel_nam": [0, 7, 36, 47, 91], "bilt": [0, 94, 95], "itest": [0, 94, 95], "chan_to_": [0, 8], "chan_to_id": [0, 8], "itestchannel": [0, 8], "stop": [0, 1, 4, 5, 6, 8, 10, 18, 20, 21, 23, 25, 27, 34, 35, 36, 41, 44, 54, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 86, 88, 92, 94], "itestmultichannelparamet": [0, 8], "bluefor": [0, 3, 94, 95], "get_pressur": [0, 9, 22], "coppermountain": [0, 94, 95], "m5180": [0, 94, 95], "frequencysweepmagphas": [0, 10, 25], "set_sweep": [0, 10, 25], "get_": [0, 10, 44], "reset_averag": [0, 10], "update_lin_trac": [0, 10], "pointmagphas": [0, 10], "s5048": 0, "tracenotreadi": [0, 10], "invalidate_trac": [0, 10], "reset": [0, 6, 10, 13, 18, 20, 21, 23, 24, 25, 30, 33, 34, 57, 59, 60, 61, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76], "run_n_tim": [0, 10], "run_contin": [0, 10], "startup": [0, 10, 17, 18, 23, 24, 25, 41, 81], "cmts5048trace": [0, 10], "prepare_trac": [0, 10], "cmtintpars": [0, 10], "cryocon": 0, "cryocon_26": 0, "cryogen": 0, "cryogenicsms120c": 0, "default_current_ramp_limit": [0, 12], "default_max_current_ramp_limit": [0, 12], "erainstru": [0, 45], "erasynth": [0, 94, 95], "reference_tcxo_ocxo": [0, 13, 45], "erasynthbas": [0, 13], "clear_read_buff": [0, 13], "esp8266_upload_mod": [0, 13], "factory_reset": [0, 13], "get_configur": [0, 13], "get_diagnostic_statu": [0, 13], "off": [0, 5, 6, 7, 8, 13, 17, 18, 22, 23, 24, 25, 30, 34, 37, 39, 45, 47, 52, 56, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 79, 80, 81], "preset": [0, 5, 6, 13], "print_pyvisa_resourc": [0, 13, 45], "run_self_test": [0, 13, 17, 18, 45], "wifi_off": [0, 13], "wifi_on": [0, 13], "current": [0, 1, 5, 6, 9, 12, 13, 18, 21, 22, 23, 24, 25, 29, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 49, 54, 57, 58, 69, 76, 79, 80, 81, 83, 84, 87, 88, 91, 94], "debug_messages_en": [0, 13, 45], "embedded_vers": [0, 13, 45], "modulation_am_depth": [0, 13, 45], "modulation_en": [0, 13, 45], "modulation_fm_devi": [0, 13, 45], "modulation_freq": [0, 13, 45], "modulation_pulse_period": [0, 13, 45], "modulation_pulse_width": [0, 13, 45], "modulation_signal_waveform": [0, 13, 45], "modulation_sourc": [0, 13, 45], "modulation_typ": [0, 13, 18, 45], "pll_lmx1_statu": [0, 13, 45], "pll_lmx2_statu": [0, 13, 45], "pll_xtal_statu": [0, 13, 45], "power": [0, 2, 3, 5, 6, 7, 12, 13, 17, 19, 22, 23, 25, 36, 38, 44, 45, 47, 56, 83, 91, 92, 94, 95], "ref_osc_sourc": [0, 13, 45, 86], "sweep_dwel": [0, 13, 45], "sweep_en": [0, 13, 45], "sweep_trigg": [0, 13, 45], "synthesizer_mod": [0, 13, 45], "temperatur": [0, 4, 9, 11, 13, 22, 23, 40, 43, 45, 47, 83, 94], "wifi_gateway_address": [0, 13, 45], "wifi_hotspot_password": [0, 13, 45], "wifi_hotspot_ssid": [0, 13, 45], "wifi_ip_address": [0, 13, 45], "wifi_mod": [0, 13, 45], "wifi_rssi": [0, 13, 45], "wifi_station_password": [0, 13, 45], "wifi_station_ssid": [0, 13, 45], "wifi_subnet_address": [0, 13, 45], "erasynthplu": [0, 13, 45], "erasynthplusplu": [0, 13, 45], "generalmicrowav": 0, "gm349": 0, "pin_map": [0, 14], "gm349attenu": [0, 14], "gentec": [0, 94, 95], "gentec_maestro": [0, 46], "model": [0, 1, 4, 5, 7, 11, 12, 13, 15, 17, 19, 20, 21, 22, 25, 27, 28, 30, 33, 35, 36, 40, 45, 47, 55, 56, 57, 83, 86, 94, 95], "clear_zero_offset": [0, 15, 46], "set_zero_offset": [0, 15, 46], "holzworth": [0, 94, 95], "hs900": [0, 47], "hs900channel": [0, 16], "hs9008b": 0, "hs9008bchannel": [0, 16], "keysight": [0, 94, 95], "sd_common": [0, 17], "sd_awg": [0, 17], "awg_config_external_trigg": [0, 17, 18, 50, 51], "awg_flush": [0, 17, 18], "awg_from_arrai": [0, 17, 18], "awg_from_fil": [0, 17, 18], "awg_is_run": [0, 17, 18], "awg_jump_next_waveform": [0, 17, 18], "awg_paus": [0, 17, 18], "awg_pause_multipl": [0, 17, 18], "awg_queue_config": [0, 17, 18, 50, 51], "awg_queue_waveform": [0, 17, 18, 50, 51], "awg_resum": [0, 17, 18], "awg_resume_multipl": [0, 17, 18], "awg_start": [0, 17, 18], "awg_start_multipl": [0, 17, 18, 50, 51], "awg_stop": [0, 17, 18], "awg_stop_multipl": [0, 17, 18], "awg_trigg": [0, 17, 18], "awg_trigger_multipl": [0, 17, 18], "config_amplitude_modul": [0, 17, 18], "config_angle_modul": [0, 17, 18], "config_clock_io": [0, 17, 18], "config_fpga_trigg": [0, 17, 18], "config_trigger_io": [0, 17, 18], "convert_prescaler_to_sample_r": [0, 17, 18], "convert_sample_rate_to_prescal": [0, 17, 18], "flush_waveform": [0, 17, 18], "get_clock_frequ": [0, 17, 18], "get_clock_sync_frequ": [0, 17, 18], "get_trigger_io": [0, 17, 18], "get_waveform_statu": [0, 17, 18], "get_waveform_typ": [0, 17, 18], "load_fpga_imag": [0, 17, 18], "load_waveform": [0, 17, 18], "load_waveform_int16": [0, 17, 18], "new_waveform_from_doubl": [0, 17, 18], "new_waveform_from_fil": [0, 17, 18], "new_waveform_from_int": [0, 17, 18], "read_fpga": [0, 17, 18], "read_fpga_arrai": [0, 17, 18], "reload_waveform": [0, 17, 18], "reload_waveform_int16": [0, 17, 18], "reset_channel_phas": [0, 17, 18], "reset_clock_phas": [0, 17, 18], "reset_multiple_channel_phas": [0, 17, 18], "set_channel_amplitud": [0, 17, 18, 50, 51], "set_channel_frequ": [0, 17, 18], "set_channel_offset": [0, 17, 18, 50, 51], "set_channel_phas": [0, 17, 18], "set_channel_wave_shap": [0, 17, 18, 50, 51], "set_clock_frequ": [0, 17, 18], "set_digital_filter_mod": [0, 17, 18], "set_iq_modul": [0, 17, 18], "set_marker_config": [0, 17, 18], "set_trigger_io": [0, 17, 18], "write_fpga": [0, 17, 18], "write_fpga_arrai": [0, 17, 18], "sd_awg_async": [0, 17], "asynchron": [0, 17, 18, 35, 94], "set_asynchron": [0, 17, 18], "set_waveform_limit": [0, 17, 18], "upload_waveform": [0, 17, 18, 34, 37, 50, 51, 86], "uploader_readi": [0, 17, 18], "task": [0, 17, 18, 20, 54], "run": [0, 1, 6, 10, 13, 17, 18, 23, 25, 29, 33, 37, 41, 44, 50, 51, 56, 59, 61, 65, 66, 67, 70, 71, 72, 74, 76, 84, 86, 92, 94, 95], "result": [0, 5, 6, 17, 18, 21, 23, 24, 25, 30, 54, 94], "waveformrefer": [0, 17, 18], "is_upload": [0, 17, 18], "releas": [0, 17, 18, 32], "wait_upload": [0, 17, 18], "awg_nam": [0, 17, 18], "wave_numb": [0, 17, 18], "switchabl": [0, 17, 18], "thread": [0, 17, 18, 24, 29], "sd_dig": [0, 17], "daq_flush": [0, 17, 18], "daq_flush_multipl": [0, 17, 18], "daq_read": [0, 17, 18], "daq_start": [0, 17, 18], "daq_start_multipl": [0, 17, 18], "daq_stop": [0, 17, 18], "daq_stop_multipl": [0, 17, 18], "daq_trigg": [0, 17, 18], "daq_trigger_multipl": [0, 17, 18], "get_coupl": [0, 17, 18], "get_full_scal": [0, 17, 18], "get_imped": [0, 17, 18], "get_prescal": [0, 17, 18], "get_trigger_mod": [0, 17, 18], "get_trigger_threshold": [0, 17, 18], "set_analog_trigger_mask": [0, 17, 18], "set_clksys_frequ": [0, 17, 18], "set_coupl": [0, 17, 18], "set_daq_trigger_delai": [0, 17, 18], "set_daq_trigger_mod": [0, 17, 18], "set_digital_trigger_mod": [0, 17, 18], "set_digital_trigger_sourc": [0, 17, 18], "set_ext_trigger_behaviour": [0, 17, 18], "set_ext_trigger_sourc": [0, 17, 18], "set_full_scal": [0, 17, 18], "set_imped": [0, 17, 18], "set_n_cycl": [0, 17, 18], "set_n_point": [0, 17, 18], "set_points_per_cycl": [0, 17, 18], "set_prescal": [0, 17, 18], "set_timeout": [0, 17, 18], "set_trigger_threshold": [0, 17, 18], "sd_modul": [0, 17], "close_soft": [0, 17, 18], "get_chassi": [0, 17, 18], "get_fpga_pc_port": [0, 17, 18], "get_hvi_regist": [0, 17, 18], "get_module_count": [0, 17, 18], "get_open": [0, 17, 18], "get_product_nam": [0, 17, 18], "get_product_name_by_index": [0, 17, 18], "get_product_name_by_slot": [0, 17, 18], "get_pxi_trigg": [0, 17, 18], "get_serial_numb": [0, 17, 18, 27], "get_serial_number_by_index": [0, 17, 18], "get_serial_number_by_slot": [0, 17, 18], "get_slot": [0, 17, 18], "get_typ": [0, 17, 18], "get_type_by_index": [0, 17, 18], "get_type_by_slot": [0, 17, 18], "open_with_serial_numb": [0, 17, 18], "open_with_slot": [0, 17, 18], "set_fpga_pc_port": [0, 17, 18], "set_hvi_regist": [0, 17, 18], "set_pxi_trigg": [0, 17, 18, 50, 51], "result_pars": [0, 17, 18], "memory_manag": [0, 17], "memorymanag": [0, 17, 18], "allocatedslot": [0, 17, 18], "allocation_ref": [0, 17, 18], "number": [0, 1, 4, 5, 6, 8, 10, 12, 13, 17, 18, 20, 21, 22, 23, 24, 25, 27, 29, 30, 33, 34, 35, 36, 37, 40, 41, 50, 51, 57, 75, 82, 84, 91], "alloc": [0, 17, 18, 23, 37], "allocation_st": [0, 17, 18], "get_uninitialized_slot": [0, 17, 18], "mem_usag": [0, 17, 18], "memory_s": [0, 17, 18], "keysight_e36313a": 0, "e36313a": [0, 17], "e36313achannel": [0, 17], "keysight_e8267d": 0, "deg_to_rad": [0, 17], "rad_to_deg": [0, 17], "parse_on_off": [0, 17], "keysight_j7211": 0, "keysight_m3201a": 0, "keysight_m3300a": 0, "m3300a_awg": [0, 17], "m3300a_dig": [0, 17], "m3202a": [0, 18, 94, 95], "lakeshor": [0, 94, 95], "model_331": [0, 52], "sensorchannel": [0, 19], "channel": [0, 1, 5, 7, 8, 9, 10, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 34, 35, 36, 37, 43, 47, 48, 50, 51, 52, 54, 57, 61, 62, 63, 64, 67, 68, 69, 73, 75, 76, 77, 78, 79, 80, 86, 87, 93, 94, 95], "model_625": [0, 53], "lakeshore625": [0, 19, 53], "set_field": [0, 19, 53], "nationalinstru": [0, 54, 55, 56], "daq": [0, 18, 94, 95], "daqanaloginputvoltag": [0, 20], "daqanaloginput": [0, 20, 94], "daqanalogoutputvoltag": [0, 20], "daqanalogoutput": [0, 20, 94], "daqdigitaloutputst": [0, 20], "daqdigitaloutput": [0, 20], "pxie_2597": [0, 55], "ni_pxie_2597": [0, 20, 55], "pxie_5654": [0, 56], "ni_pxie_5654": [0, 20, 56], "nationalinstruments_pxie_5654": [0, 20], "rfsg": [0, 94, 95], "ni_rfsg": [0, 20, 56], "nationalinstruments_rfsg": [0, 20], "abort": [0, 6, 20, 23, 34, 59, 65, 66, 71, 72, 73, 74], "dll_path": [0, 4, 20, 27, 28, 32, 35, 36, 91], "firmwar": [0, 1, 4, 5, 6, 7, 13, 15, 17, 18, 20, 21, 22, 23, 27, 28, 30, 33, 35, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 82, 83, 85, 86, 87, 88, 89, 90, 91], "serial": [0, 1, 4, 5, 6, 7, 12, 13, 15, 17, 18, 20, 21, 22, 27, 28, 30, 33, 35, 36, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 82, 83, 85, 86, 87, 88, 89, 90, 91], "vendor": [0, 1, 4, 5, 7, 13, 15, 17, 20, 21, 22, 27, 28, 30, 33, 35, 36, 40, 44, 45, 47, 49, 53, 55, 56, 57, 82, 83, 86, 91], "switch": [0, 5, 6, 8, 18, 22, 23, 24, 35, 36, 57, 87, 92, 94, 95], "ni_switch": [0, 20], "disconnect_al": [0, 20, 55], "switchchannel": [0, 20], "connect_to": [0, 20, 55], "disconnect_from": [0, 20], "disconnect_from_al": [0, 20], "dll_wrapper": 0, "attributewrapp": [0, 20], "dtype": [0, 20, 51], "valu": [0, 1, 4, 5, 6, 10, 12, 13, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 33, 34, 35, 36, 37, 40, 44, 45, 47, 49, 51, 53, 55, 56, 59, 81, 82, 83, 86, 87, 91], "nidllwrapp": [0, 20], "error_messag": [0, 20], "get_attribut": [0, 20], "init": [0, 12, 20, 34, 62, 67], "set_attribut": [0, 20], "wrap_dll_funct": [0, 20], "wrap_dll_function_check": [0, 20], "namedargtyp": [0, 20], "argtyp": [0, 20], "name": [0, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 33, 34, 35, 36, 37, 41, 42, 46, 47, 48, 52, 53, 56, 58, 59, 64, 73, 81, 91, 93, 94, 95], "c_str": [0, 20], "ni_dll_instru": 0, "nidllinstru": [0, 20], "visa_typ": 0, "newport": [0, 94, 95], "ag_uc8": [0, 57], "newport_ag_uc8_errorcod": [0, 21], "newport_ag_uc8_except": [0, 21], "newport_ag_uc8": [0, 21, 57], "ask_channel": [0, 21, 23], "get_last_error": [0, 21], "write_channel": [0, 21, 23], "command_delai": [0, 21], "default_timeout": [0, 21], "reset_delai": [0, 21], "slow_command_timeout": [0, 21], "newport_ag_uc8_axi": [0, 21], "jog": [0, 21], "measure_posit": [0, 21, 57], "move_ab": [0, 21, 57], "move_limit": [0, 21], "move_rel": [0, 21, 57], "zero_posit": [0, 21, 57], "speed_tabl": [0, 21], "newport_ag_uc8_channel": [0, 21], "oxford": [0, 94, 95], "ilm200": 0, "oxfordinstruments_ilm200": [0, 22], "get_al": [0, 22, 24, 25, 34], "local": [0, 13, 22, 25, 33, 45, 87, 95], "remot": [0, 7, 22, 24, 33, 44, 95], "set_remote_statu": [0, 22], "set_to_fast": [0, 22], "set_to_slow": [0, 22], "ips120": 0, "oxfordinstruments_ips120": [0, 22], "examin": [0, 22], "heater_off": [0, 22], "heater_on": [0, 22], "hold": [0, 10, 16, 20, 22, 62], "identifi": [0, 6, 18, 20, 22, 33, 36, 55], "leave_persistent_mod": [0, 22], "run_to_field": [0, 22], "run_to_field_wait": [0, 22], "set_persist": [0, 22], "to_setpoint": [0, 22], "to_zero": [0, 22], "triton": [0, 94, 95], "vcl2csv": [0, 22], "kelvinox": 0, "oxfordinstruments_kelvinox_igh": [0, 22], "rotate_nvalv": [0, 22], "set_mix_chamber_heater_mod": [0, 22], "set_mix_chamber_heater_power_rang": [0, 22], "qdevil": [0, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 94, 95], "qdac1": [0, 64, 73], "gener": [0, 1, 4, 5, 6, 13, 14, 17, 18, 20, 23, 24, 25, 29, 30, 33, 34, 37, 54, 77, 78, 81, 93, 94, 95], "get_label": [0, 23, 29], "vhigh_ihigh": [0, 23], "vhigh_ilow": [0, 23], "vlow_ilow": [0, 23], "qdac": [0, 23, 63, 78, 94], "connect_messag": [0, 23], "print_overview": [0, 23], "print_slop": [0, 23], "print_sync": [0, 23], "ramp_voltag": [0, 23], "ramp_voltages_2d": [0, 23], "snapshot_bas": [0, 23, 37], "max_status_ag": [0, 23], "qdacchannel": [0, 23], "qdacmultichannelparamet": [0, 23], "waveform": [0, 5, 13, 17, 18, 23, 25, 34, 37, 66, 73, 77, 78, 81, 94], "all_waveform": [0, 23], "sine": [0, 13, 23, 25, 45, 50, 51, 66, 77, 78, 94], "squar": [0, 13, 18, 23, 25, 60, 66, 73, 77, 78, 94], "staircas": [0, 23], "triangl": [0, 13, 23, 25, 66, 77, 78, 94], "qdac2": [0, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76], "arrangement_context": [0, 23], "actual_voltag": [0, 23], "add_correct": [0, 23], "currents_a": [0, 23], "get_trigger_by_nam": [0, 23, 69], "initiate_correct": [0, 23, 75], "leakag": [0, 23, 77, 78, 94], "set_virtual_voltag": [0, 23, 63, 64, 75], "virtual_detun": [0, 23, 68, 75], "virtual_sweep": [0, 23, 68], "virtual_sweep2d": [0, 23, 62, 68, 69, 75], "virtual_voltag": [0, 23], "channel_numb": [0, 18, 21, 23, 36, 37, 91], "contact_nam": [0, 23, 63, 64], "correction_matrix": [0, 23], "shape": [0, 10, 18, 20, 23, 25, 54], "awg_context": [0, 23], "cycles_remain": [0, 23], "end_mark": [0, 23, 60], "period_end_mark": [0, 23, 59, 70], "period_start_mark": [0, 23, 74], "start_mark": [0, 23], "start_on": [0, 23, 60, 69], "start_on_extern": [0, 23, 73], "list_context": [0, 23], "append": [0, 23, 38, 44, 47, 49, 50, 51, 58, 65, 69, 83], "point": [0, 10, 18, 20, 22, 23, 24, 25, 34, 37, 54, 59, 65, 72], "values_v": [0, 23], "measurement_context": [0, 23], "available_a": [0, 23, 69], "n_avail": [0, 23], "n_cycles_remain": [0, 23], "peek_a": [0, 23], "allocate_trac": [0, 23, 59], "allocate_trigg": [0, 23, 73], "arrang": [0, 23, 62, 63, 64, 68, 69, 73, 75], "clear_read_queu": [0, 23], "connect_external_trigg": [0, 23, 73], "error": [0, 1, 5, 6, 18, 21, 23, 24, 25, 29, 30, 33, 35, 37, 39, 50, 51, 55, 59, 60, 61, 65, 67, 69, 70, 71, 74, 87], "free_all_trigg": [0, 23], "free_trigg": [0, 23], "get_recorded_scpi_command": [0, 23, 62], "mac": [0, 23], "n_channel": [0, 23], "n_error": [0, 23], "n_external_input": [0, 23], "n_external_output": [0, 23], "n_trigger": [0, 23, 30], "remove_trac": [0, 23, 59], "start_al": [0, 23, 59, 60, 66], "start_recording_scpi": [0, 23, 62], "trace": [0, 10, 23, 30, 59, 94], "write_float": [0, 23], "qdac2channel": [0, 23], "arbitrary_wav": [0, 23, 59], "clear_measur": [0, 23, 69, 76], "dc_list": [0, 23, 60, 65], "dc_sweep": [0, 23, 72], "measur": [0, 5, 6, 8, 10, 20, 21, 23, 25, 29, 30, 34, 46, 53, 55, 57, 63, 64, 69, 79, 80, 84, 92, 94, 95], "output_mod": [0, 23, 48, 61], "sine_wav": [0, 23, 66, 70], "square_wav": [0, 23, 60, 66, 71, 73], "triangle_wav": [0, 23, 66, 74], "write_channel_float": [0, 23], "qdac2externaltrigg": [0, 23], "qdac2trigger_context": [0, 23], "sine_context": [0, 23], "square_context": [0, 23], "sweep_context": [0, 23], "start_v": [0, 23, 68, 72, 75], "stop_v": [0, 23, 72], "time_": [0, 23], "trace_context": [0, 23], "size": [0, 4, 5, 18, 23, 24, 25, 30, 33, 34, 51, 57, 67, 84, 92], "triangle_context": [0, 23], "virtual_sweep_context": [0, 23], "actual_values_v": [0, 23, 75], "comma_sequence_to_list": [0, 23], "comma_sequence_to_list_of_float": [0, 23], "diff_matrix": [0, 23], "floats_to_comma_separated_list": [0, 23], "forward_and_back": [0, 23], "ints_to_comma_separated_list": [0, 23], "split_version_string_into_compon": [0, 23], "qdac2_arrai": [0, 64, 73], "array_arrangement_context": [0, 23], "qdac_nam": [0, 23], "sync": [0, 6, 18, 23, 25, 73], "common_trigger_in": [0, 23, 73], "control": [0, 5, 6, 7, 11, 12, 17, 21, 22, 23, 24, 34, 37, 44, 64, 73, 94, 95], "trigger_out": [0, 23, 73], "qutech": 0, "d4": 0, "get_buffers_en": [0, 24], "get_filter_valu": [0, 24], "get_mod": [0, 24], "d5a": 0, "set_dac_unit": [0, 24], "f1d": 0, "get_remote_set": [0, 24], "ivvi": 0, "adjust_parameter_valid": [0, 24], "get_pol_dac": [0, 24], "linspac": [0, 24, 49, 50, 51, 59, 60, 62, 68, 69, 75], "round_dac": [0, 24], "set_dacs_zero": [0, 24], "set_parameter_bound": [0, 24], "set_pol_dacrack": [0, 24], "dac_quata": [0, 24], "full_rang": [0, 24], "half_rang": [0, 24], "resolut": [0, 6, 24], "m2j": 0, "s5i": 0, "optimize_for_frequ": [0, 24], "rohdeschwarz": [0, 79, 80, 92], "privat": [0, 25], "hmc804x": [0, 25], "rohdeschwarzhmc804xchannel": [0, 25, 26], "hmp": [0, 25], "rohdeschwarzhmpchannel": [0, 25, 26], "get_max_curr": [0, 25, 26], "send_cmd": [0, 25, 26], "hmc8041": 0, "rohdeschwarzhmc8041": [0, 25], "hmc8042": 0, "rohdeschwarzhmc8042": [0, 25], "hmc8043": [0, 79], "rohdeschwarzhmc8043": [0, 25, 79], "hmp2020": 0, "rohdeschwarzhmp4040": [0, 25, 80], "hmp2030": 0, "hmp4030": 0, "rohdeschwarzhmp4030": [0, 25], "hmp4040": [0, 94, 95], "smr40": 0, "rohdeschwarz_smr40": [0, 25], "do_get_frequ": [0, 25], "do_get_pow": [0, 25], "do_get_pulse_delai": [0, 25], "do_get_statu": [0, 25], "do_get_status_of_alc": [0, 25], "do_get_status_of_modul": [0, 25], "do_set_frequ": [0, 25], "do_set_pow": [0, 25], "do_set_pulse_delai": [0, 25], "do_set_statu": [0, 25], "do_set_status_of_alc": [0, 25], "do_set_status_of_modul": [0, 25], "off_modul": [0, 25], "on_modul": [0, 25], "set_ext_trig": [0, 25], "smw200a": [0, 94, 95], "amplitudemodul": [0, 25], "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 46, 47, 48, 49, 56, 81, 94, 95], "depth": [0, 13, 25], "total_depth": [0, 25], "coupling_mod": [0, 25], "deviation_ratio": [0, 25, 81], "sensit": [0, 25, 56], "frequencymodul": [0, 25], "deviat": [0, 13, 25, 81], "total_devi": [0, 25], "iqchannel": [0, 25], "type": [0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 35, 36, 45, 51], "level": [0, 5, 6, 17, 22, 24, 25, 30, 33, 37, 56, 59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 84], "coupl": [0, 18, 25, 30], "i_bia": [0, 25], "q_bia": [0, 25], "i_offset": [0, 25], "q_offset": [0, 25], "iqmodul": [0, 25], "gain": [0, 5, 18, 24, 25], "swap": [0, 25], "crest_factor": [0, 25], "wideband": [0, 25], "lfoutputchannel": [0, 25], "bandwidth": [0, 25, 92], "source_path": [0, 25], "period": [0, 6, 13, 18, 23, 25, 29, 50, 51], "freq_manu": [0, 25], "freq_min": [0, 25], "freq_max": [0, 25], "shape_duty_cycl": [0, 25], "shape_period": [0, 25], "shape_width": [0, 25], "trapez_fal": [0, 25], "trapez_height": [0, 25], "trapez_period": [0, 25], "trapez_ris": [0, 25], "triangle_period": [0, 25], "triangle_ris": [0, 25], "lfoutputsweep": [0, 25], "dwell": [0, 13, 25], "execut": [0, 1, 18, 22, 24, 25, 29, 30, 33, 34], "retrac": [0, 25], "space": [0, 23, 24, 25, 37], "log_step": [0, 25], "lin_step": [0, 25], "outputchannel": [0, 25], "sweep_cent": [0, 25], "sweep_span": [0, 25], "sweep_start": [0, 25], "sweep_stop": [0, 25], "losc_input": [0, 25], "losc_mod": [0, 25], "losc_output": [0, 25], "losc_stat": [0, 25], "outputfrequencysweep": [0, 25], "outputlevelsweep": [0, 25], "attenu": [0, 14, 17, 25, 36, 94, 95], "phasemodul": [0, 25], "ratio": [0, 25], "pulsegener": [0, 25], "polar": [0, 6, 18, 24, 25, 35, 59, 65, 90], "output": [0, 1, 2, 5, 6, 12, 13, 14, 18, 20, 22, 23, 24, 25, 30, 33, 34, 36, 37, 38, 39, 44, 45, 47, 50, 51, 52, 54, 56, 58, 62, 68, 69, 70, 75, 83, 93, 94], "pulsemodul": [0, 25], "transition_typ": [0, 25], "video_polar": [0, 25], "imped": [0, 18, 25], "trigger_imped": [0, 25], "double_delai": [0, 25], "double_width": [0, 25], "trigger_mod": [0, 17, 18, 25, 40, 50, 51, 86], "width": [0, 6, 13, 23, 25, 27, 82], "delai": [0, 12, 18, 23, 24, 25, 33, 50, 51, 57, 92], "rohdeschwarz_smw200a": [0, 25, 81], "gen_trigger_puls": [0, 25], "get_error": [0, 25], "get_id": [0, 25, 81], "get_opt": [0, 25, 81], "smw200asim": 0, "zvl13": [0, 94, 95], "complexsweep": [0, 25], "frequencysweep": [0, 25], "safrequencysweep": [0, 25], "calibr": [0, 12, 23, 25, 29, 33, 92, 94], "na_mod": [0, 25], "sa_mod": [0, 25], "update_trac": [0, 25], "shamrock": [0, 94, 95], "sr750": [0, 94, 95], "shamrockcif": [0, 27], "get_calibr": [0, 27], "get_grat": [0, 27], "get_grating_info": [0, 27], "get_number_devic": [0, 27], "get_number_gr": [0, 27], "get_number_pixel": [0, 27], "get_pixel_width": [0, 27], "get_slit": [0, 27], "get_wavelength": [0, 27], "get_wavelength_limit": [0, 27], "set_grat": [0, 27], "set_number_pixel": [0, 27], "set_pixel_width": [0, 27], "set_slit": [0, 27], "set_wavelength": [0, 27], "shamrock_sr750": [0, 27, 82], "device_id": [0, 27, 32, 35, 37], "number_gr": [0, 27], "signalcor": [0, 83], "deviceinfot": [0, 28], "device_interfac": [0, 28], "firmware_revis": [0, 28], "hardware_revis": [0, 28], "man_dat": [0, 28], "product_serial_numb": [0, 28], "devicerfparamst": [0, 28], "atten_valu": [0, 28], "buffer_point": [0, 28], "level_dac_valu": [0, 28], "power_level": [0, 28, 56], "rf_phase_offset": [0, 28], "sweep_cycl": [0, 28], "sweep_dwell_tim": [0, 28], "sweep_start_freq": [0, 28], "sweep_step_freq": [0, 28], "sweep_stop_freq": [0, 28], "devicestatust": [0, 28], "list_mode_t": [0, 28], "operate_status_t": [0, 28], "pll_status_t": [0, 28], "hwtriggert": [0, 28], "edg": [0, 6, 18, 28, 30, 59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "pxi_en": [0, 28], "pxi_lin": [0, 28], "listmodet": [0, 28], "hw_trigger": [0, 28], "return_to_start": [0, 28], "step_on_hw_trig": [0, 28], "sweep_dir": [0, 28], "sweep_mod": [0, 28], "tri_waveform": [0, 28], "trig_out_en": [0, 28], "trig_out_on_cycl": [0, 28], "mandat": [0, 28], "dai": [0, 9, 28], "hour": [0, 28], "month": [0, 28], "year": [0, 28], "operatestatust": [0, 28], "auto_pwr_dis": [0, 28], "device_access": [0, 28], "device_standbi": [0, 28], "ext_ref_detect": [0, 28], "ext_ref_lock_en": [0, 28], "harmonic_ss": [0, 28], "list_mode_run": [0, 28], "output_en": [0, 28, 49, 56], "over_temp": [0, 28], "pci_clk_en": [0, 28], "ref_out_select": [0, 28], "rf1_lock_mod": [0, 28], "rf1_loop_gain": [0, 28], "rf_mode": [0, 28, 83], "pllstatust": [0, 28], "crs_aux_pll_ld": [0, 28], "crs_pll_ld": [0, 28], "crs_ref_pll_ld": [0, 28], "fine_pll_ld": [0, 28], "ref_100_pll_ld": [0, 28], "ref_10_pll_ld": [0, 28], "sum_pll_ld": [0, 28], "sc5521a": [0, 28, 94, 95], "singlequantum": [0, 84], "channelarrai": [0, 29], "communicationhandl": [0, 29], "acquire_cnts_t": [0, 29], "auto_cali_bias_curr": [0, 29], "auto_cali_finish": [0, 29], "enable_detector": [0, 29], "get_bias_curr": [0, 29], "get_bias_voltag": [0, 29], "get_measurement_period": [0, 29], "get_number_of_detector": [0, 29], "get_trigger_level": [0, 29], "set_bias_curr": [0, 29], "set_dark_counts_auto_iv": [0, 29], "set_measurement_period": [0, 29], "set_trigger_level": [0, 29], "sqcount": [0, 29], "get_n": [0, 29], "sqtalk": [0, 29], "add_labelprop": [0, 29], "get_all_label": [0, 29], "send": [0, 5, 13, 21, 23, 24, 29, 33, 34, 56], "sub_json": [0, 29], "timearrai": [0, 29], "websqcontrolqcod": [0, 29, 84], "py_head": [0, 30], "h2py": [0, 30], "main": [0, 20, 25, 30, 31, 34, 55], "process": [0, 30, 31], "pytifi": [0, 30, 31], "reg": [0, 30], "giga": [0, 30, 31], "giga_b": [0, 30, 31], "kilo": [0, 30, 31], "kilo_b": [0, 30, 31], "mega": [0, 30, 31], "mega_b": [0, 30, 31], "spcerr": [0, 30], "m4i": 0, "active_channel": [0, 30], "blockavg_hardware_trigger_acquisit": [0, 30], "convert_to_voltag": [0, 30], "gated_trigger_acquisit": [0, 30], "get_card_memori": [0, 30], "get_card_typ": [0, 30], "get_data": [0, 30], "get_error_info32bit": [0, 30], "get_max_sample_r": [0, 30], "initialize_channel": [0, 30], "multiple_trigger_acquisit": [0, 30], "retrieve_data": [0, 30], "set_channel_or_trigger_set": [0, 30], "set_channel_set": [0, 30], "set_ext0_or_trigger_set": [0, 30], "setup_multi_record": [0, 30], "single_software_trigger_acquisit": [0, 30], "single_software_trigger_acquisition_boxcar": [0, 30], "single_trigger_acquisit": [0, 30], "start_trigg": [0, 23, 30, 73], "wait_readi": [0, 30], "sztypetonam": [0, 30], "standa": [0, 94, 95], "standa_10mwa168": [0, 85], "deviceinform": [0, 32], "major": [0, 32], "manufactur": [0, 32], "manufacturerid": [0, 32], "minor": [0, 32, 63, 64], "productdescript": [0, 32], "getposit": [0, 32], "encposit": [0, 32], "uposit": [0, 32], "cmdbuffreespac": [0, 32], "curposit": [0, 32], "curspe": [0, 32], "curt": [0, 32], "encst": [0, 32], "flag": [0, 4, 6, 23, 24, 25, 27, 32, 35, 37], "gpioflag": [0, 32], "ipwr": [0, 32], "iusb": [0, 32], "movest": [0, 32], "mvcmdst": [0, 32], "pwrst": [0, 32], "upwr": [0, 32], "uusb": [0, 32], "windst": [0, 32], "ucurposit": [0, 32], "ucurspe": [0, 32], "libximc": [0, 32], "command_mov": [0, 32], "enumerate_devic": [0, 32], "get_device_nam": [0, 32], "open_devic": [0, 32], "stanfordresearchsystem": 0, "dg645": 0, "save_set": [0, 33, 36, 91], "self_calibr": [0, 33, 34], "self_test": [0, 33, 34], "wait": [0, 5, 8, 10, 18, 19, 22, 23, 25, 30, 33, 34, 35, 41, 50, 51, 88], "channel_map": [0, 33], "display_map": [0, 33], "output_map": [0, 33, 37], "polarity_map": [0, 33], "prescale_map": [0, 33], "trigger_map": [0, 33], "sim928": 0, "ask_modul": [0, 33], "byte_to_bit": [0, 33], "check_module_error": [0, 33], "find_modul": [0, 33], "get_module_idn": [0, 33], "get_module_statu": [0, 33], "get_voltag": [0, 33], "reset_modul": [0, 33], "set_smooth": [0, 33], "set_voltag": [0, 33, 79, 80], "write_modul": [0, 33], "tektronix": [0, 49, 94, 95], "afg3000": [0, 94, 95], "recal": [0, 34], "reset_edit_memori": [0, 34], "save": [0, 4, 5, 6, 23, 33, 34, 36, 38, 44, 47, 58, 69, 83, 92, 94], "synchronize_phas": [0, 34], "afg3252": [0, 34, 86], "awg520": [0, 95], "tektronix_awg520": [0, 34], "change_fold": [0, 34], "clear_waveform": [0, 34], "delete_all_waveforms_from_list": [0, 34], "force_logicjump": [0, 34], "force_trigg": [0, 34], "get_current_folder_nam": [0, 34], "get_filenam": [0, 34], "get_folder_cont": [0, 34], "get_jumpmod": [0, 34], "get_stat": [0, 34], "goto_root": [0, 34], "load_and_set_sequ": [0, 34], "make_directori": [0, 34], "resend_waveform": [0, 34], "return_self": [0, 34], "send_pattern": [0, 34], "send_sequ": [0, 34], "send_sequence2": [0, 34], "send_waveform": [0, 34], "set_current_folder_nam": [0, 34], "set_jumpmod": [0, 34], "set_sequ": [0, 34], "set_setup_filenam": [0, 34], "keithley_2000_scan": [0, 87], "keithley_2000_scan_channel": [0, 34], "keithley_2700": 0, "set_default": [0, 34], "set_mod": [0, 34], "set_mode_volt_dc": [0, 34], "bool_to_str": [0, 34], "parsebool": [0, 34], "parseint": [0, 34], "parsestr": [0, 34], "keithley_6430": [0, 49], "set_trigger_immedi": [0, 34], "keithley_6500": [0, 87], "keithley_sens": [0, 34], "thorlab": [0, 94, 95], "apt": [0, 88, 89, 90], "thorlabsexcept": [0, 35], "thorlabshwtyp": [0, 35], "k10cr1": [0, 94, 95], "mff10x": [0, 94, 95], "prm1z8": [0, 94, 95], "thorlabs_apt": [0, 35, 88, 89, 90], "apt_clean_up": [0, 35, 88, 89, 90], "apt_init": [0, 35], "disable_hw_channel": [0, 35], "enable_event_dlg": [0, 35], "enable_hw_channel": [0, 35], "get_hw_info": [0, 35], "get_hw_serial_num_ex": [0, 35], "init_hw_devic": [0, 35], "list_available_devic": [0, 35], "mot_get_home_paramet": [0, 35], "mot_get_posit": [0, 35], "mot_get_status_bit": [0, 35], "mot_get_velocity_paramet": [0, 35], "mot_move_absolute_ex": [0, 35], "mot_move_hom": [0, 35], "mot_move_jog": [0, 35], "mot_move_veloc": [0, 35], "mot_set_home_paramet": [0, 35], "mot_set_velocity_paramet": [0, 35], "mot_stop_profil": [0, 35], "homelimitswitch": [0, 35], "forward": [0, 5, 6, 23, 35], "revers": [0, 23, 35], "rotationdirect": [0, 35], "thorlabs_k10cr1": [0, 35, 88], "thorlabs_mff10x": [0, 35, 89], "thorlabs_prm1z8": [0, 35, 90], "vaunix": [0, 94, 95], "lda": [0, 94, 95], "ldaattenu": [0, 36], "scale": [0, 18, 23, 36, 59, 86], "ldachannel": [0, 36], "ldaparamet": [0, 36], "ldaworkingfrequ": [0, 36], "get_valid": [0, 36], "vaunix_lda": [0, 36, 91], "zurichinstru": [0, 93], "hf2li": [0, 94, 95], "sampl": [0, 18, 20, 24, 30, 37, 50, 51, 54, 62, 68, 75, 84, 92], "zihdawg8": 0, "compilererror": [0, 37], "create_parameters_from_node_tre": [0, 37], "disable_channel": [0, 37], "download_device_node_tre": [0, 37], "enable_channel": [0, 30, 37], "generate_csv_sequence_program": [0, 37], "set_channel_group": [0, 37], "snapshot": [0, 13, 23, 33, 37, 45, 94], "start_awg": [0, 37], "stop_awg": [0, 37], "upload_sequence_program": [0, 37], "waveform_to_csv": [0, 37], "waveform_to_wav": [0, 37], "except": [1, 6, 10, 18, 20, 21, 33, 34, 35, 37, 47, 50, 51, 53, 55, 87, 95], "base": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 44, 56, 94], "rais": [1, 5, 6, 18, 20, 21, 23, 24, 33, 37, 50, 51, 63, 64, 81, 87], "one": [1, 5, 6, 10, 12, 13, 18, 20, 21, 23, 24, 25, 28, 36, 37, 50, 51, 55, 56, 57, 66, 81, 87], "": [1, 6, 10, 12, 13, 14, 18, 19, 20, 22, 23, 24, 25, 29, 33, 35, 36, 37, 40, 44, 45, 46, 47, 49, 50, 51, 52, 56, 57, 86, 88, 93, 94], "daqnavi": 1, "librari": [1, 4, 5, 6, 18, 20, 22, 27, 35, 50, 51], "function": [1, 5, 6, 12, 13, 16, 18, 20, 21, 22, 23, 24, 25, 29, 30, 34, 35, 36, 37, 41, 47, 50, 51, 54, 67, 94, 95], "encount": 1, "an": [1, 4, 5, 6, 7, 13, 15, 17, 18, 20, 21, 23, 24, 25, 27, 28, 29, 30, 33, 35, 36, 37, 40, 44, 46, 47, 50, 51, 54, 55, 56, 57, 73, 81, 82, 87, 88, 93, 94, 95], "warn": [1, 6, 20, 37], "condit": [1, 29, 34], "class": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 81, 88], "arg": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 87], "ani": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 46, 47, 49, 50, 51, 79, 80], "kwarg": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 87], "instrument": [1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 45, 47, 49, 73, 79, 80, 81, 84, 87, 94, 95], "dio": 1, "card": [1, 8, 17, 18, 30, 34, 94], "from": [1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 17, 18, 20, 22, 23, 24, 25, 29, 30, 33, 34, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95], "The": [1, 4, 5, 6, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 33, 34, 35, 36, 37, 39, 40, 43, 45, 47, 50, 51, 53, 54, 55, 56, 57, 75, 80, 81, 83, 86, 87, 88, 91, 93, 94, 95], "ha": [1, 4, 5, 6, 12, 13, 18, 19, 20, 23, 25, 27, 28, 29, 34, 35, 36, 37, 53, 55, 56, 57, 87, 91, 95], "six": 1, "8255": 1, "ppi": 1, "c": [1, 5, 6, 7, 8, 20, 22, 28, 29, 33, 38, 40, 42, 44, 45, 47, 50, 51, 58, 83, 87, 91], "di": 1, "o": [1, 18, 20, 54], "port": [1, 5, 13, 18, 20, 21, 23, 25, 41, 45, 55, 56, 57, 84, 92], "each": [1, 5, 8, 20, 21, 23, 24, 25, 33, 34, 35, 36, 45, 57, 63, 64, 73, 82, 86, 95], "contain": [1, 2, 4, 5, 6, 7, 13, 15, 17, 18, 20, 21, 22, 23, 25, 27, 28, 29, 30, 33, 34, 35, 36, 37, 93, 95], "8": [1, 17, 18, 23, 24, 25, 30, 33, 37, 40, 41, 44, 45, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81, 82, 84, 86, 87, 90, 92], "pin": [1, 14], "can": [1, 5, 6, 7, 9, 10, 13, 17, 18, 20, 22, 23, 24, 25, 30, 35, 37, 39, 44, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 79, 80, 81, 87, 88, 89, 90, 91, 94, 95], "configur": [1, 6, 13, 18, 20, 23, 25, 30, 45, 55, 81, 86, 94], "either": [1, 4, 16, 18, 20, 25, 29, 36, 49], "input": [1, 5, 6, 13, 18, 20, 22, 23, 24, 25, 30, 33, 34, 36, 38, 44, 47, 51, 52, 54, 58, 69, 83, 87], "group": [1, 14, 23, 37], "four": [1, 7], "have": [1, 4, 6, 10, 12, 18, 20, 23, 24, 27, 30, 33, 34, 36, 37, 45, 47, 55, 56, 57, 94], "instal": [1, 6, 12, 18, 24, 25, 33, 37, 41, 44, 45, 81, 83], "so": [1, 4, 5, 7, 10, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 35, 36, 37, 54, 86, 88], "biodaq": 1, "access": [1, 6, 23, 47, 91], "thi": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 37, 40, 41, 44, 47, 50, 51, 53, 54, 55, 56, 57, 79, 80, 81, 83, 87, 88, 93, 94, 95], "qcode": [1, 2, 3, 5, 8, 9, 10, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25, 28, 29, 33, 34, 36, 37, 38, 43, 44, 45, 47, 48, 49, 50, 51, 53, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 83, 84, 92, 94], "us": [1, 4, 5, 6, 8, 10, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 29, 30, 33, 34, 35, 36, 37, 45, 50, 51, 52, 53, 55, 56, 57, 73, 76, 78, 86, 93, 95], "python": [1, 2, 6, 8, 9, 10, 18, 20, 22, 24, 28, 30, 34, 45, 50, 51, 55, 87], "foreign": 1, "cffi": 1, "call": [1, 4, 5, 6, 12, 16, 18, 20, 21, 22, 23, 24, 25, 29, 35, 87], "necessari": [1, 5, 6, 23, 25], "dynam": [1, 25], "link": [1, 95], "automat": [1, 4, 5, 6, 20, 21, 23, 25, 29, 36, 83, 92], "load": [1, 6, 18, 25, 34, 36, 50, 51, 91, 94], "declar": 1, "_bdaqctrl": 1, "h": [1, 33], "file": [1, 4, 6, 9, 18, 20, 22, 24, 25, 27, 29, 34, 35, 37, 43, 44, 50, 51, 55, 83], "onli": [1, 5, 6, 10, 13, 17, 18, 20, 23, 24, 25, 28, 34, 35, 36, 37, 47, 53, 54, 56, 57, 87], "preprocessor": 1, "header": 1, "includ": [1, 4, 7, 13, 15, 17, 20, 21, 23, 27, 28, 29, 30, 34, 35, 36], "gcc": 1, "d_bdaq_c_interfac": 1, "e": [1, 6, 16, 18, 20, 23, 33, 34, 37, 50, 51, 55, 82, 87, 93], "bdaqctrl": 1, "befor": [1, 5, 6, 10, 13, 18, 22, 23, 30, 33, 34, 47, 57, 88], "abov": [1, 5, 22, 29, 53, 57], "command": [1, 5, 6, 12, 13, 17, 21, 22, 23, 24, 25, 29, 30, 33, 34, 41, 45, 57, 87, 88], "win32": 1, "_win32": 1, "should": [1, 4, 5, 12, 16, 18, 20, 21, 22, 25, 27, 29, 34, 36, 37, 47, 51, 53, 55, 56, 79, 80, 91, 95], "undefin": [1, 55], "stdlib": 1, "comment": [1, 5, 25], "out": [1, 5, 22, 23, 29, 30, 47, 59, 65, 74, 75, 80, 88], "implement": [1, 13, 18, 20, 22, 25, 36, 87, 95], "instant": 1, "digit": [1, 14, 17, 18, 20, 25, 30, 33, 34, 36, 49, 50, 54, 94, 95], "buffer": [1, 13, 30, 33], "interrupt": 1, "counter": [1, 21, 29, 51, 57, 84], "ar": [1, 4, 5, 6, 7, 10, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 37, 41, 45, 47, 53, 55, 57, 81, 86, 87, 91, 94, 95], "test": [1, 4, 5, 6, 12, 13, 17, 20, 23, 24, 25, 27, 28, 33, 35, 36, 37, 54, 64, 77, 78, 81, 84, 92, 94, 95], "3": [1, 5, 6, 7, 12, 13, 17, 18, 21, 22, 23, 25, 33, 35, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93], "1": [1, 5, 6, 7, 8, 10, 13, 17, 18, 20, 21, 22, 23, 24, 25, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93], "10": [1, 5, 13, 20, 24, 30, 33, 34, 38, 40, 44, 45, 46, 47, 48, 49, 50, 51, 53, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 81, 82, 83, 84, 86, 87, 88, 92], "0": [1, 5, 6, 10, 12, 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 29, 30, 33, 34, 35, 36, 37, 38, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93], "ddl": 1, "12": [1, 12, 33, 38, 40, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 59, 60, 61, 68, 69, 70, 71, 72, 73, 74, 75, 80, 83, 87, 91, 92], "errorcod": 1, "occur": [1, 6, 24, 30, 33, 35, 37], "irreversibli": [1, 4, 20, 27, 36], "free": [1, 4, 18, 20, 23, 27, 29, 36, 44], "its": [1, 4, 6, 12, 18, 20, 25, 27, 33, 34, 36, 52, 57, 82, 88, 94], "resourc": [1, 4, 5, 8, 16, 18, 20, 23, 25, 27, 33, 35, 36, 55, 56, 94], "subclass": [1, 4, 20, 21, 25, 27, 29, 36], "overrid": [1, 4, 5, 7, 13, 15, 17, 20, 21, 22, 23, 27, 28, 29, 30, 35, 36, 37], "thei": [1, 4, 5, 6, 20, 24, 27, 36, 37, 50, 51, 91], "other": [1, 4, 5, 6, 7, 13, 15, 17, 20, 21, 22, 23, 27, 28, 29, 30, 35, 36, 44, 47, 54, 56, 57, 87, 94], "specif": [1, 4, 5, 14, 18, 20, 22, 23, 24, 27, 36, 41, 48, 56, 81], "pars": [1, 2, 4, 7, 12, 13, 15, 17, 18, 20, 21, 27, 28, 30, 35, 36], "standard": [1, 4, 7, 12, 13, 15, 17, 20, 21, 23, 25, 27, 28, 29, 30, 33, 35, 36], "visa": [1, 4, 5, 7, 8, 10, 13, 15, 16, 17, 19, 20, 21, 23, 25, 27, 28, 30, 33, 34, 35, 36, 55, 57, 67], "idn": [1, 4, 7, 12, 13, 15, 17, 20, 21, 22, 23, 24, 25, 27, 28, 30, 35, 36, 40, 44, 45, 47, 49, 53, 55, 56, 67, 82, 83, 86, 91], "respons": [1, 4, 5, 7, 10, 13, 15, 17, 20, 21, 23, 27, 28, 30, 33, 35, 36], "id": [1, 4, 6, 7, 13, 15, 17, 19, 20, 21, 27, 28, 30, 33, 35, 36, 44, 76, 81], "dict": [1, 4, 5, 7, 13, 15, 17, 20, 21, 22, 23, 25, 27, 28, 30, 33, 35, 36, 37, 55, 91, 93], "even": [1, 4, 5, 7, 13, 15, 17, 18, 20, 21, 23, 24, 27, 28, 30, 35, 36], "though": [1, 4, 7, 12, 13, 15, 17, 20, 21, 27, 28, 30, 35, 36], "i": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 43, 44, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 75, 81, 82, 84, 86, 87, 88, 91, 93, 94], "appli": [1, 4, 6, 7, 13, 15, 17, 18, 20, 21, 25, 27, 28, 30, 35, 36, 39, 47, 53], "variou": [1, 4, 7, 13, 15, 17, 20, 21, 27, 28, 30, 35, 36], "well": [1, 4, 7, 13, 15, 17, 20, 21, 22, 27, 28, 30, 35, 36, 53, 79, 80, 87, 95], "ipinstru": [1, 4, 7, 13, 15, 17, 20, 21, 27, 28, 30, 35, 36], "here": [1, 4, 7, 13, 15, 17, 20, 21, 22, 23, 25, 27, 28, 30, 34, 35, 36, 38, 44, 48, 57, 81, 83, 95], "your": [1, 4, 7, 13, 15, 17, 20, 21, 27, 28, 30, 35, 36, 51, 56, 81, 83, 84, 95], "doe": [1, 4, 7, 9, 12, 13, 15, 17, 20, 21, 22, 23, 24, 25, 27, 28, 30, 34, 35, 36, 37, 67, 91], "support": [1, 4, 7, 13, 15, 17, 18, 20, 21, 22, 23, 27, 28, 30, 35, 36, 37, 39, 54, 91, 95], "return": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 37, 50, 51, 55, 57, 87], "nonstandard": [1, 4, 7, 13, 15, 17, 20, 21, 27, 28, 30, 35, 36], "string": [1, 2, 4, 6, 7, 10, 13, 14, 15, 17, 20, 21, 22, 23, 25, 27, 28, 29, 30, 33, 34, 35, 36], "suppos": [1, 4, 7, 13, 15, 17, 20, 21, 22, 27, 28, 30, 35, 36], "comma": [1, 4, 7, 13, 15, 17, 20, 21, 22, 23, 27, 28, 30, 35, 36], "separ": [1, 4, 7, 12, 13, 15, 17, 20, 21, 22, 23, 27, 28, 30, 35, 36, 37, 57], "list": [1, 4, 6, 7, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 27, 28, 30, 33, 34, 35, 36, 37, 45, 55, 56, 62, 67, 69, 77, 78, 94], "semicolon": [1, 4, 7, 13, 15, 17, 20, 21, 22, 27, 28, 30, 35, 36], "colon": [1, 4, 7, 13, 15, 17, 20, 21, 22, 27, 28, 30, 35, 36], "also": [1, 4, 7, 13, 15, 17, 18, 20, 21, 22, 23, 25, 27, 28, 30, 34, 35, 36, 46, 47, 55, 57, 87], "common": [1, 4, 7, 13, 15, 17, 20, 21, 22, 25, 27, 28, 30, 34, 35, 36, 55], "we": [1, 4, 7, 10, 13, 15, 17, 20, 21, 22, 23, 27, 28, 30, 35, 36, 40, 42, 46, 47, 48, 52, 53, 55, 56, 57, 81, 82, 86, 89, 90, 95], "accept": [1, 4, 6, 7, 13, 15, 17, 20, 21, 22, 27, 28, 30, 35, 36], "them": [1, 4, 5, 7, 13, 14, 15, 17, 20, 21, 22, 25, 27, 28, 30, 34, 35, 36, 94], "A": [1, 4, 5, 6, 7, 8, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 39, 42, 52, 53, 57, 93], "devic": [1, 5, 6, 7, 8, 13, 14, 17, 18, 19, 20, 21, 22, 24, 25, 27, 35, 36, 37, 40, 41, 54, 55, 56, 57, 81, 91, 92, 93, 94, 95], "n": [1, 2, 5, 10, 18, 22, 24, 29, 34, 67], "For": [1, 5, 6, 13, 18, 20, 24, 30, 36, 45, 47, 53, 54, 56, 63, 64, 87, 95], "singl": [1, 5, 6, 8, 10, 12, 18, 23, 25, 29, 30, 33, 37, 53, 93, 94, 95], "integ": [1, 18, 23, 33, 37], "which": [1, 6, 8, 9, 10, 13, 16, 17, 18, 20, 21, 22, 23, 25, 29, 30, 33, 34, 35, 36, 37, 47, 53, 55, 56, 63, 64, 88, 95], "encod": [1, 23], "bit": [1, 6, 14, 18, 24, 33, 35, 36, 91], "set": [1, 4, 5, 6, 8, 10, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 29, 30, 33, 34, 35, 36, 37, 40, 41, 44, 47, 49, 50, 51, 52, 53, 55, 56, 79, 80, 81, 82, 84, 86, 88, 89, 90, 92, 93, 94, 95], "otherwis": [1, 6, 18, 29, 35], "If": [1, 4, 5, 6, 8, 16, 17, 18, 20, 23, 24, 25, 27, 30, 33, 35, 36, 37, 41, 47, 56, 57, 81, 87, 91, 95], "binari": [1, 18, 22, 23], "represent": [1, 5, 23, 25], "len": [1, 50, 51, 59, 63, 64, 67, 69], "respect": [1, 6, 18, 29, 34, 36, 91], "oper": [1, 4, 12, 18, 20, 25, 29, 39], "complet": [1, 5, 6, 18, 25, 30, 34, 57, 81], "successfulli": 1, "2684354560": 1, "avail": [1, 5, 6, 13, 17, 18, 20, 23, 24, 25, 34, 35, 36, 41, 44, 47, 55, 56, 69, 81], "2684354561": 1, "paramet": [1, 2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 33, 34, 35, 36, 37, 40, 45, 47, 49, 55, 56, 57, 81, 82, 84, 86, 87, 94, 95], "rang": [1, 5, 6, 8, 14, 18, 20, 21, 23, 24, 25, 30, 34, 37, 48, 50, 51, 52, 54, 57, 61, 81, 84, 86], "2684354562": 1, "properti": [1, 18, 20, 23, 30, 47, 57], "2684354563": 1, "2684354564": 1, "conflict": 1, "2684354565": 1, "all": [1, 5, 6, 8, 10, 13, 17, 18, 20, 22, 23, 24, 25, 29, 33, 34, 35, 36, 41, 44, 47, 49, 50, 51, 53, 55, 67, 81, 94], "same": [1, 5, 6, 18, 20, 23, 25, 30, 33, 47, 56, 57, 73, 87, 93], "4": [1, 5, 6, 7, 13, 17, 18, 21, 22, 23, 24, 25, 30, 33, 34, 35, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94], "20ma": 1, "pci": 1, "1724": 1, "3758096384": 1, "handl": [1, 5, 6, 20, 22, 24, 25, 29, 30], "null": 1, "doesn": [1, 5, 6, 30, 34, 55], "t": [1, 5, 6, 12, 19, 30, 34, 38, 44, 47, 53, 55, 56, 58, 69, 83, 86, 93], "match": [1, 22], "requir": [1, 6, 10, 13, 18, 20, 23, 24, 25, 36, 37, 43, 45, 47, 91], "3758096385": 1, "3758096386": 1, "3758096387": 1, "format": [1, 2, 12, 14, 22, 39, 48, 53, 54, 87, 92], "expect": [1, 20, 23, 30, 33, 50, 51, 54, 95], "3758096388": 1, "Not": [1, 5, 34, 36, 44, 55, 81], "enough": [1, 22, 50, 51, 86], "memori": [1, 5, 6, 18, 23, 30, 34, 36, 37, 86], "3758096389": 1, "data": [1, 4, 5, 6, 10, 12, 18, 20, 23, 24, 25, 29, 30, 34, 37, 50, 54, 59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 86, 92, 94], "3758096390": 1, "too": [1, 24], "small": [1, 10, 20], "3758096391": 1, "length": [1, 4, 18, 23, 25, 29, 37, 86], "exceed": 1, "limit": [1, 12, 18, 21, 24, 29, 35, 53, 56, 57], "3758096392": 1, "3758096393": 1, "event": [1, 4, 18, 25, 27, 29, 33, 34, 35], "3758096394": 1, "3758096395": 1, "3758096396": 1, "specifi": [1, 6, 18, 21, 23, 24, 25, 30, 33, 34, 35, 47, 53, 57, 81], "3758096397": 1, "3758096398": 1, "3758096399": 1, "hasn": 1, "own": [1, 23], "privileg": 1, "user": [1, 22, 25, 33, 34, 37, 38, 44, 45, 47, 48, 58, 69, 83, 86, 87], "want": [1, 17, 18, 20, 23, 29, 37, 53, 55, 93], "3758096400": 1, "becaus": [1, 5, 13, 18], "someon": 1, "els": [1, 18, 20, 36, 39, 50, 51, 87], "had": 1, "3758096401": 1, "wa": [1, 5, 18, 20, 35, 37, 46, 47, 53, 54], "found": [1, 5, 6, 13, 20, 24, 54, 91, 94, 95], "3758096402": 1, "mismatch": [1, 23], "3758096403": 1, "count": [1, 10, 23, 29, 40, 57, 84], "3758096404": 1, "open": [1, 6, 18, 22, 51, 95], "3758096405": 1, "exist": [1, 18, 23, 24, 30, 55, 95], "3758096406": 1, "unrecogn": 1, "3758096407": 1, "lost": 1, "unavail": 1, "3758096408": 1, "3758096409": 1, "busi": 1, "3758096410": 1, "3758096411": 1, "dma": [1, 18], "3758096412": 1, "time": [1, 5, 6, 8, 10, 12, 13, 18, 20, 22, 23, 24, 25, 29, 30, 33, 40, 47, 48, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 84, 86, 88], "when": [1, 5, 6, 12, 18, 20, 21, 22, 23, 24, 25, 28, 30, 35, 37, 56, 91], "3758096413": 1, "given": [1, 5, 18, 20, 25, 29, 33, 36, 37], "signatur": [1, 20], "3758096414": 1, "cannot": [1, 5, 18, 20, 34, 55, 81], "while": [1, 5, 8, 25, 51, 57, 86, 88, 95], "ai": 1, "3758096415": 1, "end": [1, 6, 18, 23, 24, 25, 34, 50, 51, 69, 76], "3758161919": 1, "visainstru": [2, 3, 5, 8, 10, 11, 12, 13, 15, 16, 17, 19, 21, 22, 23, 24, 25, 33, 34], "cxa": 2, "n9000a": [2, 94, 95], "analyz": [2, 10, 35, 94, 95], "str": [2, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 33, 34, 35, 36, 37, 54], "termin": [2, 10, 17, 23, 30, 34, 94], "option": [2, 5, 6, 10, 17, 18, 20, 23, 24, 25, 30, 33, 34, 36, 81, 91], "default": [2, 4, 5, 6, 8, 10, 12, 13, 14, 18, 20, 22, 23, 24, 25, 27, 30, 33, 34, 35, 37, 40, 53, 55, 83, 84], "charact": [2, 10, 17, 34], "repli": [2, 10], "val": [2, 13, 18, 25, 34], "float": [2, 4, 6, 8, 9, 10, 12, 13, 14, 18, 19, 20, 22, 23, 24, 25, 29, 30, 33, 34, 35, 36, 37, 69], "strin": 2, "psd": 2, "depend": [2, 5, 6, 18, 23, 25, 34, 57, 86, 95], "spectral": [2, 38], "desir": [2, 4, 5, 6, 14, 20, 25, 27, 29, 33, 35, 37], "dbm": [2, 13, 24, 25, 38, 44, 45, 47, 56, 83, 92], "densiti": [2, 38, 82], "hz": [2, 5, 6, 10, 13, 18, 20, 25, 34, 38, 44, 45, 47, 54, 56, 83, 86, 91, 92, 93], "aim": 3, "thurlbi": 3, "thandar": 3, "suppli": [3, 4, 12, 14, 17, 19, 20, 22, 25, 29, 91, 94, 95], "4k": [3, 9, 12, 22], "warmup": [3, 94], "heater": [3, 22, 94], "bu2": [4, 94, 95], "ccd": [4, 27, 82], "path": [4, 6, 9, 20, 22, 25, 27, 28, 30, 35, 36, 43, 50, 51, 83], "atmcd64": 4, "camera_id": 4, "setup": [4, 30, 40, 50, 51, 57, 94, 95], "true": [4, 5, 6, 8, 13, 18, 19, 20, 22, 23, 24, 27, 29, 30, 33, 34, 35, 36, 37, 38, 40, 42, 44, 45, 47, 48, 49, 51, 53, 56, 58, 63, 64, 69, 76, 83, 84, 86, 91, 92], "some": [4, 5, 6, 12, 13, 20, 30, 33, 40, 45, 50, 51, 56, 81], "sent": [4, 12, 21, 22, 23, 34, 56], "head": [4, 95], "build": 4, "pixel": [4, 27, 40, 82], "x": [4, 23, 33, 37, 40, 67, 69, 92, 93], "axi": [4, 5, 6, 21, 57, 86, 94], "y": [4, 23, 37, 67, 92, 93], "none": [4, 5, 6, 8, 9, 10, 13, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 42, 43, 46, 48, 49, 55, 56, 58, 63, 64, 82, 85], "taken": [4, 29, 30, 40], "being": [4, 12, 18, 47], "int": [4, 5, 6, 8, 9, 10, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 29, 30, 33, 34, 35, 36, 37, 45, 51, 81, 86], "perform": [4, 5, 6, 20, 24, 25, 29, 57, 68, 75, 81, 94], "actual": [4, 5, 16, 20, 23, 24, 25, 29, 34, 39, 57, 86, 88], "acquisit": [4, 20, 25, 29, 30, 94], "method": [4, 17, 18, 20, 21, 23, 24, 25, 29, 30, 37, 53, 55], "overwritten": [4, 20, 25, 29], "altern": [4, 20, 25, 29, 87], "suitabl": [4, 20, 24, 25, 29], "get_cmd": [4, 13, 25, 29], "constructor": [4, 20, 24, 25, 29, 81], "wrap": [4, 18, 20, 21, 23, 25, 29], "provid": [4, 5, 6, 13, 18, 20, 22, 23, 25, 29, 30, 37, 40, 42, 55], "get": [4, 5, 6, 9, 10, 18, 20, 21, 22, 24, 25, 29, 33, 34, 36, 40, 41, 42, 47, 52, 53, 80, 84, 86, 87, 89, 90, 92, 94], "instanc": [4, 5, 6, 13, 16, 18, 20, 24, 25, 29, 34, 36, 37, 50, 51, 87, 88, 93], "set_cmd": [4, 10, 13, 20], "bool": [4, 5, 6, 8, 18, 19, 20, 22, 23, 24, 27, 30, 33, 34, 35, 36, 37], "fals": [4, 5, 6, 8, 13, 17, 18, 20, 22, 23, 24, 27, 29, 30, 32, 33, 34, 35, 36, 38, 40, 42, 44, 45, 47, 48, 49, 51, 53, 56, 58, 59, 69, 76, 83, 86, 91], "object": [4, 5, 6, 8, 18, 20, 23, 24, 25, 27, 29, 32, 35], "wrapper": [4, 5, 6, 10, 14, 20, 22, 24, 25, 27, 35, 88], "been": [4, 5, 6, 12, 13, 18, 23, 27, 28, 30, 35, 38, 44, 45, 47, 58, 69, 83, 95], "idu": 4, "behaviour": [4, 18, 27, 35], "success": [4, 21, 27, 35, 37], "print": [4, 13, 18, 23, 27, 30, 35, 38, 39, 40, 41, 42, 43, 45, 46, 48, 49, 50, 51, 52, 53, 56, 57, 58, 64, 65, 67, 69, 72, 73, 75, 79, 80, 81, 82, 88, 90, 91, 94], "windll": [4, 27, 35], "function_nam": [4, 27, 32, 35], "tupl": [4, 6, 8, 10, 20, 23, 34, 35, 37], "camera_index": 4, "directori": [4, 6, 34, 36, 37], "cycle_tim": 4, "camera_handl": 4, "exposure_tim": [4, 40], "typ": 4, "closing_tim": 4, "opening_tim": 4, "simul": [5, 25, 36], "py": [5, 20, 25, 45, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 87], "reason": [5, 25, 53], "answer": [5, 23, 24, 25], "request": [5, 18, 24, 25], "thing": [5, 25], "chang": [5, 14, 16, 20, 23, 24, 25, 33, 41, 47, 49, 51, 53, 54, 57, 81, 94], "two": [5, 10, 20, 22, 23, 25, 37, 42, 47, 57, 64, 68, 69, 73, 75, 76, 87, 93, 94], "shown": [5, 25], "below": [5, 8, 12, 22, 25, 55, 56, 86, 94, 95], "real": [5, 18, 25], "attent": [5, 44], "feedback": [5, 6], "motor": [5, 6, 21, 35, 88], "That": 5, "mean": [5, 20, 21, 23, 25, 45, 49, 86], "known": [5, 13, 23], "behav": 5, "like": [5, 17, 20, 34, 47], "author": [5, 6, 13, 25, 29], "michael": [5, 25], "wagen": [5, 25], "fzj": 5, "zea": [5, 6, 25], "2": [5, 6, 7, 10, 13, 17, 18, 20, 21, 22, 23, 24, 25, 30, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95], "m": [5, 6, 13, 18, 23, 25, 29, 31, 45, 56, 84, 86, 88], "fz": [5, 6, 25], "juelich": [5, 6, 25], "de": [5, 6, 25], "Be": [5, 24, 81], "care": [5, 13], "correct": [5, 12, 23, 24, 29, 53, 75, 81], "usb": [5, 6, 12, 20, 38, 41, 48, 54, 57, 80, 87], "finish": [5, 18, 19, 21, 25, 29, 88], "commun": [5, 8, 13, 14, 17, 21, 24, 25, 29, 33, 34, 36, 57, 94, 95], "done": [5, 6, 13, 20, 22, 25, 38, 45, 48, 57], "usag": [5, 22, 24, 25, 30, 34, 81], "experi": [5, 25, 92, 94], "yet": [5, 23, 25], "cmd": [5, 10, 13, 21, 23, 25, 33], "runtimeerror": [5, 81, 87], "submod": [5, 25], "retun": [5, 25], "caller": [5, 25], "scan": [5, 20, 23, 25, 34, 41, 54, 77, 78, 94], "new": [5, 18, 21, 23, 25, 34, 37, 57, 95], "kei": [5, 12, 25, 33, 37], "modulenam": [5, 25], "parameternam": [5, 25], "routin": [5, 33], "regardless": [5, 56], "possibl": [5, 6, 13, 24, 25, 30, 34, 40, 48], "inform": [5, 6, 13, 30, 35, 37, 81, 95], "until": [5, 8, 18, 19, 22, 23, 35, 41, 45, 57, 81, 88], "ok": [5, 39], "come": [5, 36, 91], "back": [5, 6, 22, 23, 57, 69, 75, 76], "parent": [5, 7, 8, 16, 17, 18, 19, 20, 21, 23, 25, 26, 34, 36], "sn": 5, "instrumentchannel": [5, 7, 8, 16, 17, 19, 20, 21, 23, 25, 26, 34, 36], "creat": [5, 6, 13, 18, 22, 23, 24, 29, 36, 37, 41, 44, 50, 51, 79, 80, 87, 88], "piezo": [5, 6, 21, 94, 95], "up": [5, 6, 7, 13, 18, 21, 23, 24, 25, 35, 41, 45, 55, 56, 62, 69, 81, 83, 87, 94], "7": [5, 33, 34, 40, 41, 42, 44, 45, 46, 47, 48, 52, 53, 55, 57, 59, 60, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 81, 82, 84, 86, 87, 89, 90], "intern": [5, 6, 13, 16, 18, 23, 25, 33, 34, 37, 40, 45, 47, 69, 73, 81, 83, 86], "belong": [5, 18, 20, 23], "itself": [5, 34], "index": [5, 8, 14, 18, 20, 23, 24, 35, 37, 93, 95], "featur": [5, 6, 20, 25], "signal": [5, 6, 13, 14, 17, 18, 20, 25, 28, 30, 33, 37, 50, 81, 93, 94, 95], "maximum": [5, 12, 18, 20, 21, 24, 25, 35], "restrict": [5, 29], "combin": [5, 23, 25, 37, 49], "readonli": [5, 25], "step": [5, 6, 18, 21, 23, 24, 25, 33, 41, 50, 51, 57, 67, 68, 75, 94, 95], "add": [5, 17, 18, 24, 25, 33, 34, 50, 51, 75], "constant": [5, 12, 20, 24, 35, 37, 39, 53, 56, 77, 78, 94], "150": [5, 88], "v": [5, 6, 12, 13, 18, 23, 24, 25, 29, 30, 34, 39, 45, 48, 49, 53, 86, 93], "pass": [5, 17, 18, 20, 24, 29, 30, 34, 35, 50, 51], "anm150": [5, 94], "attribut": [5, 16, 20, 23, 25, 36, 37], "present": [5, 6, 23, 33, 56], "anm200": 5, "anm300": 5, "differ": [5, 8, 13, 18, 23, 24, 25, 34, 43, 47, 56, 87, 93, 94], "allow": [5, 6, 10, 18, 22, 24, 25, 33, 87], "certain": [5, 19, 23, 35, 45, 94], "typic": 5, "gnd": 5, "diabl": 5, "chassi": [5, 17, 18, 50, 51], "mass": 5, "inp": [5, 25], "In": [5, 6, 23, 38, 42, 56, 57, 95], "IN": [5, 18, 25, 29, 51, 56], "enabl": [5, 6, 13, 18, 23, 25, 30, 35, 37, 46, 53, 56, 84, 86], "cap": [5, 63, 64], "afterward": [5, 82], "It": [5, 6, 9, 18, 20, 22, 25, 36, 48, 55], "need": [5, 12, 18, 23, 25, 30, 34, 37, 42, 45, 47, 53, 56, 83, 89, 90], "stp": [5, 41], "modifi": [5, 12, 29, 81], "would": [5, 18, 23], "turn": [5, 7, 13, 22, 23, 37, 39, 40, 44, 52, 56, 63, 64, 79, 80, 94], "addit": [5, 18, 22, 23, 33, 37, 95], "ad": [5, 18, 23, 37, 47, 95], "subtract": [5, 23], "vac": 5, "amplif": 5, "bnc": 5, "frontplat": 5, "15": [5, 44, 45, 47, 48, 53, 59, 61, 62, 65, 68, 70, 75, 83], "movement": [5, 21, 41, 57], "neg": [5, 18, 21, 23, 24, 30, 56, 61], "contin": [5, 6, 10, 34], "direct": [5, 6, 18, 21, 23, 35, 57, 77, 78, 94], "down": [5, 20, 54], "global": [5, 21, 23], "timeout": [5, 10, 18, 20, 33, 44, 45, 47, 49, 53, 86, 92], "commandinterfac": 5, "stepw": 5, "after": [5, 6, 13, 18, 20, 21, 22, 23, 29, 30, 40, 41, 47, 56, 57, 81, 88], "hang": 5, "former": 5, "pyseri": 5, "work": [5, 6, 10, 17, 18, 20, 24, 25, 30, 34, 36, 53, 54, 56, 57, 67, 81, 91, 95], "fine": [5, 24], "But": [5, 23], "throw": [5, 18, 35, 55], "didn": 5, "To": [5, 6, 22, 23, 25, 29, 30, 87, 94], "avoid": [5, 22], "zero": [5, 6, 18, 21, 22, 23, 24, 35, 46, 50, 51, 88], "between": [5, 6, 8, 12, 14, 18, 20, 22, 23, 25, 34, 37, 57, 63, 64, 68, 75], "second": [5, 6, 8, 12, 13, 18, 20, 21, 22, 23, 24, 25, 33, 45, 57, 93], "block": [5, 8, 18, 19, 24, 30, 35, 45, 53, 88], "motion": [5, 6, 94, 95], "three": [5, 23], "dure": [5, 20, 25, 29, 30, 34, 36, 37, 39], "wai": [5, 23, 34, 48, 55, 56], "our": [5, 20, 46, 47, 57], "lab": 5, "just": [5, 16, 20, 23, 24, 25, 47], "you": [5, 6, 16, 17, 18, 22, 23, 25, 29, 45, 55, 56, 79, 80, 88, 93, 94, 95], "wish": [5, 16, 25], "backend": [5, 16, 25], "self": [5, 13, 16, 18, 20, 22, 23, 25, 29, 33, 34, 87, 94], "visalib": [5, 16, 25, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "api": [5, 20, 25, 28, 36, 37, 54, 83, 95], "synchron": [5, 17, 18, 20, 23, 25, 48, 54], "geta": 5, "000000": 5, "wrong": [5, 30, 50, 51, 87], "5": [5, 12, 18, 20, 21, 22, 23, 25, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92], "6": [5, 13, 18, 20, 24, 25, 33, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91], "getaci": 5, "acin": 5, "getc": 5, "nf": 5, "getcser": 5, "anc300b": 5, "1514": 5, "3006076": 5, "getdci": 5, "dcin": 5, "getf": 5, "210": [5, 41, 45], "getm": 5, "getser": 5, "anm150a": 5, "1545": 5, "3010045": 5, "3010041": 5, "gettd": 5, "gettu": 5, "getv": 5, "20": [5, 13, 18, 22, 25, 30, 41, 44, 45, 49, 50, 51, 57, 59, 65, 67, 74, 84, 86, 92], "stepd": 5, "stepu": 5, "ver": [5, 47], "1304": 5, "2013": 5, "17": [5, 44, 45, 47, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 91], "08": [5, 48, 70, 83], "16": [5, 8, 24, 30, 44, 45, 46, 47, 48, 50, 51, 59, 61, 65], "anc150": 5, "compatibil": [5, 34], "consol": [5, 30], "fit": [5, 24, 29, 49], "appropri": [5, 20, 56], "inst_no": 5, "sequenc": [5, 6, 20, 23, 34, 37], "first": [5, 6, 10, 18, 20, 23, 25, 29, 46, 47, 57, 81, 89, 90], "becom": [5, 6, 22], "invalid": [5, 6, 23], "dictionari": [5, 14, 30, 33, 37], "about": [5, 6, 12, 13, 23, 37, 57, 95], "persist": [5, 6, 22], "flash": [5, 6], "next": [5, 6, 18, 23, 25, 29], "everi": [5, 6, 18, 25, 37, 86, 88], "attach": [5, 8, 16, 17, 18, 23, 33], "position": 5, "ax": [5, 6, 21, 44, 57, 63, 64, 69, 84, 92], "adjust": [5, 6, 14, 24, 25, 56, 86], "1hz": [5, 25], "5khz": 5, "2khz": 5, "drive": [5, 14, 21], "bychang": 5, "vari": 5, "sawtooth": [5, 6, 25, 50, 51], "loop": [5, 6, 8, 20, 45, 48], "activ": [5, 6, 18, 22, 25, 29, 30, 35, 37, 38, 44, 47, 58, 69, 81, 83, 94], "target": [5, 6, 21, 29, 35, 53, 57, 88], "unit": [5, 6, 10, 13, 17, 18, 19, 23, 24, 40, 42, 46, 52, 53, 57, 82, 90, 93], "degre": [5, 6, 18, 35, 47, 86, 93], "defin": [5, 6, 18, 20, 21, 23, 24, 25, 33, 34, 44, 47, 86], "around": [5, 6, 10, 20, 23, 88], "where": [5, 6, 10, 17, 18, 20, 22, 23, 24, 29, 33, 34, 37, 50, 51, 87], "consid": [5, 6], "reach": [5, 6, 8, 29, 33, 35, 53, 88], "select": [5, 6, 18, 21, 25, 29, 82], "take": [5, 6, 13, 18, 21, 23, 30, 45, 87, 94], "few": [5, 6, 13, 45], "rel": [5, 6, 21, 57], "interpret": [5, 6], "absolut": [5, 6, 21, 35, 57], "multipl": [5, 6, 17, 18, 20, 23, 24, 30, 34, 37, 77, 78, 94], "sign": 5, "backward": [5, 6, 23, 24, 25], "indic": [5, 12, 18, 30, 35, 47], "besid": 5, "continu": [5, 6, 18, 23, 33, 35, 56, 86], "kind": [5, 6, 23, 29], "collect": [6, 18, 23, 30], "share": [6, 18, 50, 51], "luka": [6, 25], "lank": [6, 25], "forschungszentrum": 6, "j\u00fclich": 6, "gmbh": [6, 30], "l": [6, 25, 82], "abc": 6, "anc350v": 6, "lib": [6, 45, 87], "classmethod": [6, 36], "Then": [6, 57, 81, 89, 90], "neither": 6, "both": [6, 12, 18, 20, 22, 25, 30, 34, 37, 52], "case": [6, 18, 22, 29, 37, 57, 79, 80, 87], "intenum": 6, "enumer": [6, 35], "anc350v2lib": 6, "set_amplitude_control_mod": 6, "compon": [6, 18, 25, 93], "set_external_step_input_edg": 6, "set_input_trigger_mod": 6, "set_output_trigger_mod": 6, "set_trigger_polar": 6, "anc350v3": 6, "libusb0": 6, "disc": 6, "find": [6, 24, 29, 81], "32": [6, 18, 30, 36, 44, 52, 91], "64": [6, 30, 36, 44, 87, 91], "folder": [6, 9, 20, 34, 95], "anc350_librari": 6, "pleas": [6, 12, 23, 95], "instanti": [6, 8, 13, 17, 23, 45], "path_to_dl": 6, "adapt": [6, 24], "store": [6, 18, 20, 34, 43, 86], "dev_handl": 6, "c_void_p": 6, "axis_no": 6, "quad": 6, "b": [6, 7, 12, 25, 29, 33, 42, 49, 52], "meter": [6, 22], "nm": [6, 46, 82], "fail": 6, "clock": [6, 18, 20, 23, 34, 56, 73], "40n": 6, "3m": 6, "20n": [6, 25], "off_tim": 6, "duti": [6, 25, 86], "cycl": [6, 18, 23, 25], "sensor": [6, 23], "applic": 6, "extern": [6, 13, 18, 23, 25, 30, 45, 50, 51, 62, 68, 73, 75, 81], "nsl": 6, "lower": 6, "upper": 6, "nanomet": 6, "epsilon": 6, "hysteresi": 6, "per": [6, 10, 12, 17, 18, 20, 23, 24, 25, 30, 45, 50, 51, 77, 78, 94], "millidegre": 6, "dev_no": 6, "variabl": [6, 12], "must": [6, 18, 22, 23, 25, 30, 34, 37, 67], "smaller": [6, 18, 24, 33], "than": [6, 12, 18, 25, 36, 37, 45], "last": [6, 9, 14, 18, 20, 22, 23, 34, 81, 87], "search_usb": 6, "search_tcp": 6, "search": [6, 35, 95], "anc350r": 6, "lan": 6, "structur": [6, 12, 28, 32], "arw": 6, "anoth": [6, 20, 23, 25, 30, 82], "pc": [6, 18], "long": [6, 10], "subsequ": [6, 18], "less": [6, 25], "tcp": 6, "ip": [6, 7, 13, 22, 81, 84, 94, 95], "auto": [6, 18, 25, 29, 33, 38, 40, 44, 47, 58, 62, 69, 83, 86], "refer": [6, 12, 13, 18, 20, 23, 24, 45, 50, 51, 95], "mark": [6, 23, 33, 37, 62], "hit": 6, "ignor": [6, 18, 22, 37], "updat": [6, 10, 13, 22, 23, 25, 29, 30, 34, 37, 44, 45, 47, 49, 53, 56, 83, 84, 86, 91, 95], "later": [6, 23, 95], "volt": [6, 8, 18, 24, 25, 34, 49, 62, 67, 69, 87], "eot_fwd": 6, "travel": [6, 21, 57], "detect": [6, 13, 46, 87, 94], "eot_bwd": 6, "static": [6, 13, 17, 18, 23, 33, 37], "ethernet": [6, 34, 79], "lockin": [6, 37], "loss": 6, "app": 6, "io": [6, 18, 20, 54], "don": [6, 86, 93], "pointer": [6, 18], "mai": [6, 21, 23, 29, 34, 45, 47, 55], "anc_discov": 6, "dev_typ": 6, "program": [6, 20, 37, 50, 51, 83, 87], "hardwar": [6, 12, 18, 21, 24, 25, 30, 35, 83, 93], "dot": 6, "decim": 6, "notat": [6, 10], "alreadi": [6, 18, 20, 23, 45], "retriev": [6, 13, 18, 23, 25, 30, 94], "hertz": [6, 47], "valid": [6, 9, 13, 22, 24, 25, 30, 34, 36, 43, 55], "farad": 6, "f": [6, 13, 18, 33, 51, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 87], "approach": 6, "see": [6, 13, 20, 21, 23, 24, 25, 30, 34, 45, 47, 53, 54, 56, 57, 73, 86], "follow": [6, 12, 13, 18, 25, 29, 50, 51, 87, 88, 95], "affect": [6, 24, 57], "ground": 6, "255": [6, 40], "1mv": 6, "auto_dis": 6, "deactiv": [6, 24, 25, 35, 37], "mv": [6, 24, 30, 63, 64, 84, 93], "although": [6, 10, 55], "doubl": [6, 24, 25], "\u00b5": [6, 45], "anc350v4": 6, "compat": [6, 23, 24, 25, 47, 56], "more": [6, 12, 23, 24, 30, 36, 37, 47, 51, 55], "lut": 6, "look": [6, 36, 47, 94, 95], "tabl": [6, 20, 21, 34], "file_nam": 6, "lookup": 6, "hostnam": 6, "regist": [6, 9, 18, 20, 22, 30, 33], "network": [6, 7, 10, 13, 20, 34, 94, 95], "abl": 6, "via": [6, 18, 23, 34, 50, 51, 57, 80, 87], "segment": [6, 30], "through": [6, 8, 22], "router": 6, "reachabl": [6, 22], "rout": [6, 23], "those": [6, 18, 23], "prior": [6, 33], "sever": [6, 20, 22, 23], "succe": 6, "guarante": [6, 24], "couldn": 6, "resolv": 6, "target_ground": 6, "determin": [6, 21, 25, 86], "action": [6, 29], "0v": [6, 8, 23, 56], "9258": [7, 94, 95], "With": [7, 56, 81], "non": [7, 18, 23, 25, 48, 53, 55], "smart": 7, "http": [7, 13, 14, 20, 24, 30, 42, 44, 45, 54, 83, 94], "login_nam": [7, 42], "login": [7, 42], "login_password": [7, 42], "password": [7, 13, 42], "socket": [7, 47, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 94], "alphabet": 7, "d": [7, 33, 42], "enum": [7, 23, 35], "num_chan": 8, "init_start": [8, 48], "synchronous_en": [8, 48], "synchronous_delai": 8, "synchronous_threshold": 8, "1e": [8, 13, 23, 25, 44, 49, 60, 62, 65, 70, 71, 86, 92, 93], "05": [8, 21, 23, 36, 37, 44, 48, 49, 53, 62, 66, 70, 71, 72, 74, 75, 80, 86], "assign": [8, 18, 23, 25, 36, 55, 73], "2v": [8, 24, 25], "simpl": [8, 14, 23, 30, 39, 54, 84, 94], "iter": [8, 20], "threshold": [8, 18, 22], "unblock": 8, "chan": [8, 17, 23], "convers": [8, 22, 34, 87, 94], "ix": 8, "param": [8, 15, 18, 24, 26, 29, 34], "chan_num": [8, 48], "question": [8, 17], "param_nam": [8, 23], "multichannelinstrumentparamet": [8, 23], "extract": [9, 12, 22], "pressur": [9, 22, 43], "fridg": [9, 22, 39], "folder_path": [9, 43], "channel_vacuum_can": [9, 43], "channel_pumping_lin": [9, 43], "channel_compressor_outlet": [9, 43], "channel_compressor_inlet": [9, 43], "channel_mixture_tank": [9, 43], "channel_venting_lin": [9, 43], "channel_50k_pl": [9, 43], "channel_4k_pl": [9, 43], "channel_stil": [9, 43], "channel_mixing_chamb": [9, 43], "channel_magnet": [9, 43], "log": [9, 18, 22, 25, 29, 38, 43, 44, 47, 50, 51, 58, 69, 83], "interact": [9, 13, 22], "electron": [9, 22], "toward": [9, 22, 28, 43], "vacuum": 9, "pump": 9, "line": [9, 12, 13, 14, 18, 20, 23, 33, 49, 86], "compressor": 9, "outlet": 9, "inlet": 9, "mixtur": 9, "tank": 9, "vent": 9, "50k": 9, "plate": 9, "still": [9, 24, 25, 57], "mix": [9, 20, 22], "chamber": [9, 22], "magnet": [9, 12, 19, 22, 58, 94, 95], "mbar": 9, "kelvin": [9, 22], "npt": [10, 25, 29, 44, 51, 84, 92], "multiparamet": [10, 25], "sweep": [10, 13, 22, 23, 24, 25, 36, 44, 47, 57, 62, 68, 69, 75, 77, 78, 84, 92, 94], "magnitud": [10, 21, 44, 93], "phase": [10, 13, 18, 24, 25, 44, 47, 93, 94], "bound": 10, "paramrawdatatyp": 10, "setpoint": [10, 19, 29, 52, 55], "vna": [10, 44, 92], "copper": 10, "mountain": 10, "100000": [10, 18, 36], "purpos": [10, 29, 36], "ndarrai": [10, 18, 23, 37], "db": [10, 17, 25, 91, 94, 95], "rad": [10, 25, 44], "ghz": [10, 38, 56, 92], "s11": [10, 44, 92], "s12": [10, 44], "s21": [10, 44], "s22": [10, 44], "np": [10, 23, 49, 50, 51, 62, 63, 64, 68, 69, 73, 75, 76, 86, 92], "averag": [10, 20, 23, 25, 30, 34, 44, 54, 92], "sxx": [10, 94, 95], "cw": [10, 25, 86], "cmts5048": [10, 95], "make": [10, 13, 18, 20, 22, 24, 29, 34, 37, 45, 55, 73, 93], "readi": [10, 18, 30, 57], "factori": [10, 13], "arrayparamet": [10, 20, 25], "label": [10, 13, 20, 29, 42, 46, 52, 63, 64, 82, 90, 92, 94, 95], "custom": [10, 20, 23], "parser": [10, 18, 33], "exponenti": 10, "cryo": 11, "con": 11, "26": [11, 38, 45], "sms120c": 12, "manual": [12, 17, 18, 23, 24, 25, 37, 40, 53, 64, 73], "further": [12, 20, 23], "detail": [12, 20, 45], "p": [12, 22, 79, 80], "scpi": [12, 23, 34, 86], "compliant": 12, "note": [12, 18, 20, 22, 23, 34, 35, 37, 45, 50, 51, 55, 56, 57, 86], "unidirect": 12, "eg": 12, "rather": 12, "ftdi": 12, "chip": 12, "d2xx": 12, "sms60c": 12, "argument": [12, 18, 20, 23, 29, 34, 47], "latter": 12, "coil_const": [12, 19, 53], "current_r": 12, "accompani": 12, "slightli": 12, "60": [12, 13, 20, 38, 39, 40, 81], "exampl": [12, 13, 17, 18, 20, 21, 24, 30, 37, 50, 78, 95], "2t": 12, "0380136": 12, "52": 12, "61": [12, 48, 81], "hard": 12, "safeti": 12, "correspond": [12, 23, 24, 33, 34, 36, 37, 57], "overwrit": [12, 24, 34], "proper": [12, 24], "msg": [12, 29], "do": [12, 13, 20, 23, 24, 25, 29, 30, 35, 44], "regexp": 12, "uniqu": 12, "unus": 12, "0506": 12, "psu": [12, 22], "max": [12, 20, 23, 24, 30, 54, 55, 56, 92], "12t": 12, "105": 12, "84a": 12, "5v": [12, 23, 24, 86], "com": [12, 13, 14, 20, 30, 44, 45, 55, 83, 94], "coil": [12, 19, 53], "tesla": [12, 22, 53], "amper": [12, 23], "fix": [12, 18, 22, 25], "113375t": 12, "rate": [12, 15, 18, 19, 20, 23, 24, 30, 33, 54, 86, 94], "current_ramp_limit": 12, "ramp": [12, 13, 19, 23, 48, 94], "50mk": 12, "0506a": 12, "737e": 12, "34422t": 12, "min": [12, 19, 23, 24, 51, 53], "usual": [12, 14, 20, 23, 45], "12a": 12, "013605": 12, "8163": 12, "recommend": 12, "minimum": [12, 20, 24, 25, 35], "200m": 12, "victor": 13, "neg\u00eerneac": 13, "vnegirneac": 13, "qblox": [13, 45], "offici": [13, 20], "visit": 13, "github": [13, 20, 94], "val_map": 13, "tcxo": 13, "ocxo": [13, 45], "ra": 13, "_cmd_to_json_map": 13, "p5": 13, "nb": [13, 23], "6ghz": 13, "import": [13, 29, 39, 40, 41, 42, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94], "lo": [13, 25, 45], "asrl": [13, 15, 24, 94], "dev": [13, 25, 45, 55, 81], "cu": 13, "usbmodem14101": 13, "instr": [13, 22, 38, 39, 44, 45, 46, 48, 52, 53, 59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 79, 80, 81, 86, 87, 92], "onc": [13, 18, 44, 45], "sure": [13, 22, 29, 34, 45, 81], "date": [13, 45, 92], "print_readable_snapshot": [13, 40, 44, 45, 47, 49, 53, 55, 56, 82, 83, 86, 91], "oscil": [13, 25, 45], "7e9": [13, 45, 47], "raw": [13, 20, 24, 38, 44, 47, 49, 58, 69, 83], "doc": [13, 24, 54, 94, 95], "blob": [13, 20], "master": [13, 20, 79, 80, 94], "pdf": 13, "visa_handl": [13, 59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "directli": [13, 17, 57, 87, 94], "pyvisa": [13, 45, 77, 78, 92, 94, 95], "prefix": [13, 20], "discard": 13, "special": [13, 25], "conveni": [13, 20], "individu": [13, 24, 25, 57, 95], "getter": 13, "most": [13, 17, 20, 25, 34, 56, 87, 92], "often": [13, 35], "entir": 13, "esp8266": 13, "upload": [13, 17, 18, 34, 37, 50, 51, 94], "par_nam": 13, "json": [13, 23, 29, 33, 92], "diagnost": 13, "rf": [13, 16, 20, 24, 25, 44, 94, 95], "ON": [13, 18, 25, 34, 39, 47, 79, 80, 81], "1ghz": 13, "util": [13, 44, 50, 51, 76, 87], "settabl": [13, 20, 25, 47], "serv": [13, 14], "readabl": 13, "confirm": [13, 45, 46], "wifi": 13, "correctli": [13, 45], "rd": 13, "drawn": [13, 18], "initial_cache_valu": 13, "pd": 13, "debug": [13, 50, 51, 77, 78, 94], "embed": 13, "em": 13, "am": [13, 25, 56], "min_valu": [13, 24], "max_valu": [13, 24], "100": [13, 18, 21, 23, 24, 25, 29, 33, 42, 45, 49, 52, 54, 56, 63, 64, 81, 82, 83, 86, 93], "m5": 13, "get_pars": 13, "set_pars": 13, "lambda": [13, 69], "fm": [13, 25, 81], "20e9": 13, "m4": [13, 30], "freq": [13, 25, 41, 92], "m3": 13, "puls": [13, 18, 23, 25, 86, 94], "m6": 13, "1e6": [13, 18, 44, 54, 63, 64], "m7": 13, "m2": [13, 34], "microphon": [13, 45], "m1": [13, 34], "narrowband_fm": 13, "wideband_fm": [13, 45], "m0": 13, "pll": 13, "lmx1": 13, "lock": [13, 22, 24, 25, 45, 93], "unlock": [13, 22, 25], "lock_lmx1": 13, "lmx2": 13, "lock_lmx2": 13, "xtal": 13, "lock_xtal": 13, "2f": [13, 39], "_set_pow": 13, "ext": [13, 23, 25], "p1": [13, 79, 80], "mhz": [13, 18, 24, 30, 38, 50, 51, 54, 83, 93], "ref": [13, 47, 95], "connector": [13, 14, 18, 56], "rfoutput": 13, "_set_statu": 13, "s4": 13, "1e3": 13, "freerun": [13, 45], "ss": 13, "s0": 13, "low_spuri": [13, 45], "low_phase_nois": 13, "p9": 13, "synthes": [13, 16, 94, 95], "spuriou": [13, 25], "nois": [13, 24, 25], "u00b0c": 13, "peg": 13, "gatewai": 13, "pep1": 13, "hotspot": 13, "pes1": 13, "ssid": 13, "pei": 13, "station": [13, 18, 33, 50, 51, 55, 84, 94, 95], "pew": 13, "rssi": 13, "receiv": [13, 18, 23, 33, 81], "pep0": 13, "pes0": 13, "pen": 13, "subnet": 13, "mask": [13, 18, 51], "choos": [13, 24, 34, 45], "krato": 14, "microwav": [14, 94, 95], "seri": [14, 18, 34, 47, 94, 95], "349": 14, "349h": 14, "These": [14, 94, 95], "passiv": 14, "j3": 14, "www": [14, 83], "kratosm": 14, "gmcatalog": 14, "octav": 14, "band": [14, 25], "11": [14, 24, 33, 38, 40, 44, 45, 46, 47, 48, 53, 57, 59, 60, 61, 63, 64, 67, 68, 70, 71, 72, 73, 74, 75, 86, 87, 91], "diod": [14, 77, 78, 94], "_summary_": 14, "driver_dev": 14, "physic": [14, 36], "map": [14, 20, 23, 33, 34, 69], "63": [14, 52, 87], "97": 14, "maestro": [15, 94, 95], "powermet": 15, "baud_rat": 15, "baud": [15, 33], "identif": [15, 18, 23, 25], "ressourc": 16, "ch1": [16, 20, 34, 47, 55, 79, 80, 86, 87, 91], "ch2": [16, 34, 47, 55, 79, 80, 91], "colloqui": 16, "programm": 17, "beta": [17, 18, 25, 34], "todo": [17, 24], "e8527d": 17, "ones": [17, 25, 34, 37, 50, 51], "commonli": [17, 25, 34], "angle_deg": 17, "angle_rad": 17, "stat": [17, 25, 81], "j7211": 17, "j7211b": 17, "alia": [17, 20, 34, 36, 55], "m3201a": [17, 18], "awg": [17, 18, 23, 34, 37, 56, 59, 67, 94, 95], "pxie": [17, 18, 20, 56, 94, 95], "locat": [17, 18, 20, 33, 34], "slot": [17, 18, 33, 50, 51, 86], "plug": 17, "m3300a": [17, 18], "dig": 17, "deriv": [17, 18], "concurr": [17, 18], "sychron": 17, "awg1": [17, 18, 50, 51], "ref_1": [17, 18], "wave1": [17, 18], "keysightsd1": [17, 18, 50, 51], "sd_triggermod": [17, 18, 50, 51], "exttrig": [17, 18, 50, 51], "rubric": 17, "m3202a_sync": 17, "legacy_channel_numb": [17, 18], "among": 18, "m32xxa": 18, "m33xxa": 18, "written": [18, 20, 37, 54], "inherit": [18, 25, 34], "g": [18, 20, 23, 31, 33, 34, 37, 44, 47, 49, 87, 93], "mind": 18, "part": [18, 23, 30, 88], "sd1": [18, 50, 51], "softwar": [18, 23, 29, 34, 37, 44, 83, 93], "01": [18, 24, 25, 49, 53, 56, 63, 64, 67, 68, 70, 71, 75, 86, 88], "00": [18, 42, 43, 49, 58, 59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 91], "particularli": [18, 33], "whether": [18, 19, 20, 22, 23, 29], "legaci": 18, "awg_numb": [18, 37], "external_sourc": 18, "trigger_behaviour": 18, "queu": 18, "th": 18, "pxi": [18, 20, 50, 51, 55], "4000": [18, 24, 50, 51], "empti": [18, 23, 44, 51, 55, 93], "queue": [18, 23], "remov": [18, 23, 24, 34, 40, 46, 92], "onboard": [18, 56], "ram": 18, "start_delai": 18, "prescal": [18, 50, 51], "waveform_typ": 18, "waveform_data_a": 18, "waveform_data_b": 18, "padding_mod": 18, "arrai": [18, 20, 23, 24, 30, 37, 44, 67, 84], "launch": 18, "hvi": 18, "wf": [18, 34, 86, 91], "10n": 18, "repeat": [18, 42, 46, 67, 75, 82, 86, 89, 90], "infinit": [18, 23], "reduc": [18, 50, 51], "eff": 18, "waveform_fil": 18, "forc": [18, 34], "jump": [18, 24, 34], "paus": [18, 25], "leav": [18, 20, 30], "incom": 18, "resum": 18, "awg_mask": 18, "lsb": 18, "etc": [18, 23, 91], "cyclic": [18, 50, 51], "One": [18, 37, 81], "shot": [18, 33], "waveform_numb": 18, "begin": [18, 23], "immedi": [18, 34, 57], "least": [18, 23, 25], "vi": 18, "deviation_gain": 18, "No": [18, 23, 24, 59, 60, 61, 65, 67, 69, 70, 71, 74], "boolean": [18, 34], "clock_config": 18, "clk": 18, "clkref": 18, "copi": [18, 24, 29, 34], "sd_triggerexternalsourc": [18, 50, 51], "sd_fpgatriggerdirect": 18, "sd_triggerpolar": 18, "active_high": 18, "sync_mod": 18, "sd_syncmod": 18, "sync_non": 18, "fpga": 18, "inout": 18, "active_low": 18, "sync_clk10": 18, "clk10": 18, "effect": [18, 23], "sample_r": 18, "delet": [18, 23], "flush": [18, 23, 33], "clksy": 18, "clksync": 18, "sd_wave": 18, "filenam": [18, 34, 38, 44, 47, 58, 69, 83], "imag": [18, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75], "waveform_object": 18, "relat": [18, 25], "data_raw": 18, "reg_nam": 18, "data_s": 18, "fixed_address": 18, "sequenti": [18, 29], "consecut": [18, 23], "replac": [18, 25, 37], "equal": [18, 37, 84], "total": [18, 21, 23, 25, 30, 50, 51], "accumul": [18, 57, 94], "product": [18, 51], "trigger_sourc": [18, 44, 49, 86], "skew": 18, "pxi_clk10": 18, "channel_mask": 18, "simultan": [18, 23, 37, 54], "wave_shap": 18, "hiz": 18, "sinusoid": 18, "triangular": 18, "arbitrari": [18, 23, 34, 37, 50, 51, 77, 78, 94, 95], "partner": 18, "ch": [18, 23, 50, 51, 55, 59, 60, 61, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 91], "wave": [18, 23, 30, 37, 50, 51, 56, 73, 77, 78, 94], "hw": [18, 35], "filter_mod": [18, 40], "sd_digitalfiltermod": 18, "aou_filter_off": 18, "aou_filter_flat": 18, "aou_filter_fifteen_tap": 18, "anti": 18, "ring": 18, "iq": [18, 24, 25], "markermod": 18, "trgpximask": 18, "trgiomask": 18, "markervalu": 18, "syncmod": 18, "marker": [18, 37], "On": 18, "front": [18, 23, 24, 56, 87], "panel": [18, 24, 56, 87], "syncron": 18, "10mhz": 18, "tigger": 18, "manag": [18, 20, 22, 23, 24], "sd": 18, "reusabl": 18, "smallest": [18, 30], "By": [18, 23], "increas": [18, 84], "1e8": 18, "cost": [18, 24], "longer": [18, 25, 37, 45], "restor": 18, "behavior": 18, "old": 18, "sw_awg_async": 18, "awg2": [18, 50, 51, 59], "awg3": 18, "background": [18, 46], "ref_2": 18, "wave2": 18, "ref_3": 18, "wave3": 18, "waveform_size_limit": 18, "waveform_ref": 18, "_waveformreferenceintern": 18, "enqueu": [18, 94], "requested_waveform_size_limit": 18, "reserv": [18, 23], "undon": 18, "keyword": [18, 20, 29, 34], "till": 18, "reus": 18, "callabl": [18, 20, 29, 36], "decor": 18, "invok": [18, 29], "decoractor": 18, "signadyn": 18, "m32": 18, "33xx": 18, "initialis": [18, 23], "daq_mask": 18, "compos": 18, "bitmask": 18, "daq_0": 18, "daq_1": 18, "n_point": 18, "acquir": [18, 20, 29, 30, 54], "observ": 18, "full": [18, 25, 40, 57], "unknown": 18, "full_scal": [18, 51], "hi": 18, "z": 18, "50": [18, 23, 25, 30, 35, 56, 57, 71, 81, 86, 91, 93], "ohm": [18, 23, 30, 34, 86], "n_cycl": 18, "4095": 18, "sd_ain_triggermod": 18, "3v": 18, "combo": 18, "sd_combo": 18, "again": [18, 47, 50, 51, 52], "address_mod": 18, "access_mod": 18, "pcport": 18, "word": 18, "128": [18, 30], "wil": 18, "appear": [18, 23, 35, 57], "increment": [18, 23], "system": [18, 33, 36, 44, 84], "pxi_trigg": 18, "negat": 18, "logic": [18, 34], "simpli": [18, 57], "shell": 18, "1000000": [18, 25, 67], "1e4": [18, 60], "400": 18, "1e5": [18, 54], "1e7": 18, "wave_s": 18, "pprint": [18, 62], "_memory_manag": 18, "_memoryslot": 18, "sort_dict": 18, "allocated_slot": 18, "10000": [18, 30, 44, 86], "10000000": 18, "100000000": [18, 25], "331": [19, 52], "gpib": [19, 22, 34, 52, 53], "625": [19, 94, 95], "superconduct": [19, 22, 94, 95], "contant": 19, "unti": 19, "field_ramp_r": [19, 53], "field": [19, 20, 22, 94], "nation": [20, 56, 94, 95], "mutlifunct": 20, "nidaqmx": [20, 54], "readthedoc": [20, 54], "en": [20, 30, 54], "latest": [20, 23, 54], "6363": [20, 54], "pretti": [20, 23, 54], "minim": [20, 54], "analog": [20, 25, 54, 94], "squid": [20, 54], "_modul": [20, 54], "microscop": [20, 54], "susceptomet": [20, 54], "html": [20, 54, 83], "susceptometermicroscop": [20, 54], "scan_surfac": [20, 54], "samples_to_read": [20, 54], "Will": 20, "nchannel": 20, "target_point": [20, 54], "daq_ai": [20, 54], "dev_nam": 20, "ni": [20, 54, 55, 94, 95], "dev1": 20, "fresh": 20, "popul": 20, "ai_channel": [20, 54], "min_val": 20, "max_val": 20, "clock_src": 20, "final": [20, 46, 79, 80], "idx": 20, "sinc": [20, 22, 34, 53], "ao": 20, "daq_ao": [20, 54], "parameterwithsetpoint": [20, 29], "daq_do": 20, "pxi1slot2": 20, "2597": [20, 94, 95], "ch6": [20, 55], "name_map": [20, 55], "alias": [20, 94], "reset_devic": 20, "5654": [20, 56], "ivi": 20, "foundat": 20, "bin": [20, 40], "nirfsg_64": 20, "id_queri": 20, "As": [20, 23, 47, 81], "18": [20, 37, 44, 47, 65, 70, 92], "5610": 20, "5650": 20, "5651": 20, "5652": 20, "5670": 20, "5671": 20, "5611": 20, "5644": 20, "5645": 20, "5646": 20, "5653": 20, "5672": 20, "5673": 20, "5673e": 20, "5820": 20, "5840": 20, "document": [20, 23, 29, 44, 56, 87], "userspublicdocumentsn": 20, "instrumentsni": 20, "rfsgdocument": 20, "veri": [20, 23], "basic": [20, 24], "caus": [20, 30, 33], "niswitch": 20, "mostli": [20, 23], "maintain": 20, "session": [20, 37, 38, 44, 47, 58, 69, 83], "channellist": [20, 23], "niswitch_kw": 20, "raw_nam": 20, "repres": [20, 21, 29, 33, 50, 51, 57, 93], "_session": 20, "get_channel_nam": 20, "someth": [20, 23], "drivererror": 20, "chanel": 20, "nimi": 20, "nitclk": 20, "_librari": 20, "c_long": 20, "struct": 20, "associ": [20, 29, 36], "numer": [20, 21], "attributeid": 20, "lib_prefix": 20, "premad": 20, "functino": 20, "libname_error_messag": 20, "libname_init": 20, "libname_getattribut": 20, "nirfsg_init": 20, "nisync_init": 20, "concret": 20, "form": [20, 22, 25, 37, 73, 92], "nirfsg_functionnam": 20, "nirfsg": 20, "c_ulong": 20, "error_cod": [20, 21, 24], "_error_messag": 20, "attr": 20, "datatyp": 20, "nirfsg_getattributevireal64": 20, "vireal64": 20, "visess": 20, "_init": 20, "set_valu": 20, "libname_setattribut": 20, "nirfsg_setattributevireal64": 20, "name_in_librari": 20, "restyp": 20, "ctype": 20, "without": [20, 25, 29, 75, 88], "vistatu": 20, "convert": [20, 22, 30, 33, 34, 53], "nonzero": 20, "_check_error": 20, "alwai": [20, 22, 23, 25, 29, 47], "namedtupl": 20, "byte": [20, 24, 33, 34], "nifpga": 20, "refenc": 20, "agili": 21, "ag": [21, 94, 95], "uc8": [21, 94, 95], "stepper": [21, 22], "err": [21, 39, 67], "describ": [21, 23, 64, 73], "asrl3": [21, 39, 45, 57], "com3": [21, 57], "te": [21, 22], "previou": [21, 23, 50, 51], "NO": [21, 29, 33], "transform": 21, "super": 21, "new_cmd": 21, "instead": [21, 23, 36, 87, 95], "underli": 21, "extra": 21, "context": [21, 23], "002": [21, 23, 45], "120": [21, 22, 47, 88], "accord": [21, 93], "slow": [21, 22, 23, 57], "minut": 21, "1000": [21, 24, 25, 30, 34, 45, 50, 51, 57, 59, 63, 64, 67, 69, 81, 86, 92], "1700": 21, "666": 21, "optic": 21, "mount": [21, 57], "ilm": 22, "200": [22, 30, 41, 50, 51, 57, 82, 86, 90], "helium": 22, "asrl4": [22, 48, 80], "isobu": 22, "parallel": 22, "f008": 22, "safe": [22, 24], "fast": [22, 23, 25], "rs232": 22, "similar": [22, 24, 34], "prefac": 22, "use_gpib": 22, "overid": 22, "lead": 22, "field_valu": 22, "go": [22, 23, 24, 33, 34, 44, 45, 57, 86], "put": [22, 23], "cold": 22, "file_path": [22, 34, 58], "converter_path": 22, "threshold_temperatur": 22, "conversion_tim": 22, "30": [22, 25, 39, 45, 47, 57, 81, 82, 91], "vcl": [22, 58], "csv": [22, 37], "vcl_2_ascii_convert": 22, "ex": 22, "along": 22, "consequ": 22, "advic": 22, "thermomet": 22, "ruo2": 22, "cernox": 22, "bar": 22, "proprietari": 22, "subprocess": 22, "frequent": 22, "timer": 22, "bash": 22, "igh": 22, "dilut": 22, "refriger": 22, "intellig": 22, "idr": 22, "instrument_driv": [22, 40, 41, 42, 52, 59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 81, 82, 89, 90], "02": [22, 50, 51, 65, 75, 86, 89], "1998": [22, 24], "r": [22, 25, 37, 49, 50, 51, 91, 93, 94, 95], "valv": 22, "percentag": [22, 23], "2uw": 22, "20uw": 22, "200uw": 22, "2mw": 22, "20mw": 22, "generator_numb": 23, "text": 23, "_modetupl": 23, "channelis": 23, "expos": 23, "multi": [23, 30], "mode_forc": 23, "07": [23, 48, 86, 87], "assum": [23, 86], "update_curr": 23, "sec": 23, "idn_param": 23, "begin_tim": 23, "finit": [23, 24], "slope": [23, 61], "sort": 23, "v_startlist": 23, "v_endlist": 23, "ramptim": 23, "smoothli": [23, 33], "shallow": 23, "BE": [23, 29], "NOT": [23, 29], "001": [23, 25, 45, 86], "estim": [23, 49], "excecut": 23, "2d": [23, 30, 77, 78, 94], "slow_chan": 23, "slow_vstart": 23, "slow_vend": 23, "fast_chan": 23, "fast_vstart": 23, "fast_vend": 23, "step_length": 23, "slow_step": 23, "fast_step": 23, "spent": 23, "putput": 23, "params_to_skip_upd": [23, 37], "everyth": 23, "numpyjsonencod": 23, "never": 23, "skip": 23, "snapshot_get": 23, "ll": 23, "_write_respons": 23, "char": 23, "concaten": [23, 50, 51], "wav": 23, "fun": 23, "channum": 23, "sync_delai": 23, "sync_dur": 23, "lfag": 23, "24": [23, 56], "48": [23, 35, 44], "__getattr__": 23, "customis": 23, "readout": [23, 30, 34, 94], "contact": [23, 62, 63, 64, 68, 69, 73, 75], "output_trigg": [23, 62, 68, 75], "internal_trigg": [23, 69], "factor": [23, 25], "how": [23, 57, 67, 78, 95], "much": [23, 55], "particular": [23, 29, 39, 54], "influenc": 23, "signific": 23, "nearbi": 23, "thu": 23, "extend": 23, "ident": 23, "matrix": [23, 29, 63, 64], "multipli": 23, "nplc": [23, 34, 49, 63, 64], "current_rang": 23, "powerlin": 23, "over": [23, 47, 48, 57, 63, 64], "modulation_v": [23, 63, 64], "steadi": 23, "record": [23, 30], "resist": [23, 34, 63, 64, 87, 94, 95], "calcul": [23, 25], "modulation_voltag": 23, "divid": [23, 50, 51, 67], "current_chang": 23, "virtual": [23, 77, 78, 94], "contacts_to_voltag": 23, "contact_to_voltag": 23, "end_v": [23, 68, 75], "step_time_": [23, 68], "step_trigg": [23, 68, 75], "repetit": [23, 25, 34, 50, 51, 59, 65, 67, 68, 70, 71, 72, 74, 75, 86], "linearli": [23, 39], "involv": 23, "extrem": 23, "forth": 23, "start_sweep_trigg": 23, "1d": [23, 77, 78, 94], "outer_contact": [23, 62, 68, 69, 75], "outer": 23, "inner_contact": [23, 62, 68, 69, 75], "inner_voltag": [23, 62, 68, 69, 75], "outer_voltag": [23, 62, 68, 69, 75], "inner_step_time_": [23, 62, 68, 69, 75], "inner_step_trigg": [23, 62, 68, 69, 75], "inner": [23, 69], "order": [23, 42, 46, 56], "trace_nam": 23, "offset_v": [23, 59, 70, 71, 74], "slew_v_": [23, 70, 71, 74], "_waveform_context": 23, "remain": 23, "externalinput": 23, "dwell_": [23, 60, 65, 72], "delay_": [23, 76], "_dc_context": 23, "aperture_": 23, "_channel_context": 23, "peek": 23, "ii": [23, 63, 78, 94], "valueerror": [23, 24, 55], "gate": [23, 25, 61, 77, 78, 94], "pool": 23, "synchronis": [23, 77, 78, 94], "ie": 23, "row": [23, 29], "pair": [23, 36], "_message_flush_timeout_m": 23, "carri": 23, "linger": 23, "width_": [23, 59, 65, 70, 74], "06": [23, 43, 44, 48, 62, 75, 83, 85, 86], "1m": 23, "media": 23, "definit": [23, 94, 95], "loos": 23, "bu": [23, 44, 62], "trg": 23, "explicitli": 23, "inspect": [23, 53], "ieee": 23, "rememb": 23, "slew": [23, 25], "inject": 23, "placehold": 23, "10ma": 23, "200na": 23, "integr": [23, 84], "10hz": 23, "medium": 23, "10khz": 23, "300khz": 23, "frequency_hz": [23, 60], "period_": [23, 70, 71, 73, 74], "invert": [23, 25], "span_v": [23, 70, 71, 73, 74], "flip": [23, 89], "span": [23, 24, 25, 44, 92], "200mv": 23, "duty_cycle_perc": [23, 71, 74], "symmetr": 23, "There": [23, 37, 41, 53, 57, 87], "isol": 23, "3v3": 23, "dealloc": 23, "reclaim": 23, "exit": 23, "fill": 23, "listen": [23, 64, 73], "interconnect": [23, 73], "section": [23, 64, 73], "cabl": 23, "left": 23, "place": [23, 37, 95], "distribut": [23, 29], "listern": [23, 73], "across": 23, "dedic": 23, "indiviu": 23, "fire": 23, "frozenset": 23, "adc": 24, "spi": 24, "rack": 24, "spirack": 24, "pip": [24, 45, 95], "spi_rack": 24, "dac": [24, 48, 54, 67], "dacn": 24, "stepsizen": 24, "spann": 24, "4v": [24, 25], "uni": 24, "bi": 24, "inter_delai": 24, "dac_step": 24, "reset_voltag": 24, "number_dac": 24, "dacx": 24, "spanx": 24, "careful": 24, "d5a_modul": 24, "d5mux": 24, "mixer": [24, 37], "enable_remot": 24, "alpha": 24, "protect": 24, "protocol": 24, "tune": 24, "sleep": [24, 48, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 88], "statement": 24, "d5": 24, "qtwork": 24, "tudelft": 24, "nl": 24, "schouten": 24, "htm": 24, "descriptor": 24, "rs232linkformat": 24, "txt": 24, "bottom": 24, "numdac": 24, "dac_delai": 24, "safe_vers": 24, "bip": 24, "use_lock": 24, "initialz": 24, "po": [24, 86], "mechan": 24, "outsid": [24, 30], "prevent": 24, "flexibl": 24, "align": 24, "quantis": 24, "manner": 24, "numpi": [24, 29, 50, 51, 59, 60, 62, 63, 64, 66, 67, 68, 69, 72, 73, 74, 75, 76, 86, 92], "insid": [24, 30, 34], "millivolt": 24, "occasion": 24, "evenli": 24, "normal": [24, 25, 56], "99": [24, 86], "88555733577478": 24, "64141298542764": 24, "2000": [24, 30, 34, 41, 45, 50, 51, 94], "976": 24, "4858472571908": 24, "975": 24, "6923781185626": 24, "flexabl": 24, "999": 24, "9237048905165": 24, "2046": 24, "1302357518883": 24, "optim": [24, 25], "give": [24, 25, 34, 47, 53], "2048": 24, "insuffici": 24, "500": [24, 30, 50, 51, 57], "502": 24, "oversampl": 24, "0991836423285": 24, "14": [24, 33, 44, 45, 47, 48, 49, 60, 61, 63, 64, 68, 71, 73, 74, 75, 83, 86, 92], "501": 24, "9302662699321": 24, "narrow": 24, "help": 24, "message_len": 24, "dacnam": 24, "round": 24, "inter": 24, "precis": 24, "consist": [24, 95], "06103515625": 24, "amplifi": [24, 25, 37, 93], "41": [24, 75], "enable_output": 24, "output_level": 24, "optimum": 24, "greater": 24, "larg": [24, 86], "_rohdeschwarzhmc804x": 25, "rohd": [25, 79, 80, 81, 94, 95], "schwarz": [25, 79, 80, 94, 95], "_rohdeschwarzhmp": 25, "pend": [25, 34], "suit": 25, "mw": [25, 56], "vector": [25, 29, 81, 94, 95], "rs_smw200a": 25, "dummi": 25, "sarah": 25, "fleitmann": 25, "hwchan": 25, "chnum": 25, "concern": [25, 30], "arb": 25, "q": 25, "lf": 25, "lf1": [25, 81], "smw": [25, 81], "k24": 25, "ext1": [25, 65], "lf2": 25, "gerer": 25, "noi": 25, "ext2": 25, "percent": 25, "modefor": 25, "unc": 25, "independ": [25, 37, 93], "tot": 25, "rat": [25, 81], "path2": 25, "path1": 25, "report": 25, "intb": 25, "baseband": 25, "b9": 25, "nor": 25, "lno": [25, 81], "sing": [25, 59, 60, 61, 65, 68, 70, 71, 72, 73, 74, 75], "diff": [25, 34], "differenti": 25, "k16": 25, "var": 25, "vp": 25, "04v": 25, "b10": 25, "overal": 25, "exce": 25, "bia": [25, 29, 84], "ba": 25, "anal": 25, "k739": 25, "subset": 25, "db0": 25, "db2": 25, "db3": 25, "db4": 25, "db6": 25, "db8": 25, "dbm2": 25, "dbm3": 25, "dbm4": 25, "szu": 25, "crest": 25, "peak": 25, "envelop": 25, "pep": 25, "rm": [25, 67], "35": [25, 57], "higher": 25, "lfchan": 25, "6v": 25, "monitor": 25, "lf1a": 25, "lf2a": 25, "lf1b": 25, "lf2b": 25, "noisa": 25, "noisb": 25, "ama": 25, "amb": 25, "fmpm": 25, "fmpma": 25, "fmpmb": 25, "datasheet": 25, "1mhz": 25, "synonym": 25, "swe": 25, "trapez": 25, "trapezoid": 25, "exactli": [25, 87], "man": 25, "within": 25, "returnvalu": 25, "calculationmod": 25, "interv": 25, "lin": [25, 86], "logarithm": 25, "upto": 25, "loadabl": 25, "center": [25, 44, 92], "loscil": 25, "coup": 25, "eco": 25, "boff": 25, "ebof": 25, "aoff": 25, "brace": 25, "norm": [25, 59, 65, 81, 86], "built": [25, 57], "hpow": 25, "01db": 25, "139db": 25, "hban": 25, "hdev": 25, "characterist": 25, "k23": [25, 81], "inv": 25, "suppress": [25, 56], "video": 25, "transit": 25, "smo": 25, "flatten": 25, "smooth": 25, "shortest": 25, "vice": 25, "versa": 25, "g50": 25, "g1k": 25, "g10k": 25, "doub": 25, "egat": 25, "esin": 25, "forget": 25, "almost": 25, "outstand": 25, "And": [25, 79, 80], "k22": [25, 81], "0001": 25, "stringarrai": 25, "meanful": 25, "comun": 25, "1412": [25, 81], "0000k02": [25, 81], "105578": [25, 81], "04": [25, 38, 46, 49, 59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 81], "005": [25, 53, 63, 64, 67, 80, 81], "29": [25, 59, 81], "sp2": [25, 81], "opt": 25, "b13t": [25, 81], "b22": [25, 81], "b120": [25, 81], "outp1": 25, "sour1": [25, 81], "am1": 25, "dept": 25, "sour": [25, 59, 60, 61, 62, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 81], "am2": 25, "sen": 25, "fm1": [25, 81], "fm2": 25, "cent": 25, "300000000": 25, "losc": 25, "outp": [25, 62], "400000000": 25, "star": 25, "500000000": [25, 45], "20000000000": 25, "cre": 25, "lev": 25, "wbst": 25, "lfo1": 25, "lfo": 25, "50000": [25, 71, 74], "dwel": [25, 62, 67], "poin": 25, "retr": 25, "runn": 25, "shap": 25, "sawt": 25, "spac": 25, "pgen": 25, "pol": 25, "pm1": 25, "pm2": 25, "pm": 25, "pow": 25, "145": [25, 75, 88], "pulm": 25, "del": 25, "wid": 25, "imp": 25, "vid": 25, "trig": [25, 33, 59, 60, 61, 62, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 86], "ttyp": 25, "widt": [25, 62], "401": 25, "amod": 25, "21": [25, 49, 51, 56, 59, 61, 62, 64, 65, 68, 69, 70, 71, 73, 75, 76, 90, 91], "sour2": [25, 62], "bw10": 25, "lfo2": 25, "calibration_fil": 25, "number_pixel": 27, "grate": [27, 82], "wavelength": [27, 82, 94], "spectromet": [27, 94], "ccd_number_pixel": 27, "ccd_pixel_width": 27, "union": [28, 32], "member": [28, 32, 95], "core": [28, 94, 95], "sc5520a": [28, 83], "scipci": [28, 83], "x64": [28, 83], "sc5520a_uhf": [28, 83], "comput": [28, 37, 83], "mit": [29, 95], "licens": 29, "copyright": 29, "2020": 29, "quantum": [29, 94, 95], "permiss": 29, "herebi": 29, "grant": 29, "charg": 29, "person": 29, "obtain": 29, "deal": [29, 37], "right": [29, 45, 94], "merg": 29, "publish": 29, "sublicens": 29, "sell": 29, "permit": 29, "whom": 29, "furnish": 29, "subject": 29, "notic": [29, 57], "shall": 29, "substanti": 29, "portion": 29, "THE": 29, "AS": 29, "warranti": 29, "OF": 29, "express": 29, "OR": 29, "impli": 29, "BUT": 29, "TO": 29, "merchant": 29, "FOR": 29, "AND": [29, 51], "noninfring": 29, "holder": [29, 37], "liabl": 29, "claim": 29, "damag": 29, "liabil": 29, "contract": 29, "tort": 29, "aris": 29, "WITH": 29, "fetch": [29, 95], "stamp": 29, "numpy_arrai": 29, "root_instru": [29, 36], "tcp_ip_adr": 29, "localhost": [29, 44], "control_port": 29, "12000": [29, 84], "counts_port": 29, "12345": 29, "transpos": 29, "timestamp": [29, 38, 44, 47, 58, 69, 83], "light": 29, "detector": [29, 84], "procedur": 29, "dark": 29, "error_msg": 29, "current_in_ua": 29, "dark_count": 29, "t_in_m": 29, "trigger_level_mv": 29, "tcp_ip_port": 29, "cnts_buffer": 29, "error_callback": 29, "sub": [29, 37], "cardid": 30, "spcm0": 30, "44xx": 30, "x8": 30, "platform": 30, "overview": [30, 40, 47, 82], "server_nam": 30, "pyspcm": 30, "channel2": [30, 84], "mv_rang": 30, "input_path": 30, "compens": 30, "spc_tm_high": 30, "level0": 30, "calc": 30, "memsiz": 30, "seg_siz": 30, "posttrigger_s": 30, "sometim": 30, "restart": [30, 45], "nr_averag": 30, "post_trigg": 30, "external_trigger_mod": 30, "trigger_or_mask": 30, "interleav": 30, "input_rang": 30, "pretrigger_s": 30, "seem": 30, "addition": 30, "sbench6": 30, "problem": 30, "stdout": 30, "errorreg": 30, "errorvalu": 30, "4096": 30, "pretrigger_mems": 30, "lp_filter": 30, "channel_0": 30, "channel_1": 30, "pretrigg": 30, "spc_rec_std_multi": 30, "covers": 30, "post": 30, "m2cmd_card_reset": 30, "trig_mod": 30, "bitlevel0": 30, "bitlevel1": 30, "channel_index": 30, "5000": 30, "hf": 30, "2500": 30, "mohm": 30, "acdc_coupl": 30, "level1": 30, "ext0": 30, "enter": [30, 87], "window": [30, 36, 91], "256": 30, "0x01000001": 30, "arm": [30, 34], "0x01000002": 30, "2nd": 30, "boxcar_averag": 30, "boxcar": 30, "spc_rec_std_singl": 30, "m2cmd_card_waitreadi": 30, "lcardtyp": 30, "outfp": 31, "env": [31, 45], "bodi": 31, "k": [31, 52, 92, 94], "u_posit": 32, "probe_flag": 32, "device_enumer": 32, "device_index": 32, "device_nam": 32, "sr": [33, 82], "9": [33, 40, 44, 46, 47, 48, 53, 56, 57, 59, 60, 61, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 81, 82, 87, 91, 92], "t0": 33, "t1": 33, "advanced_trig_en": 33, "burst_t0_config": 33, "burst_count": 33, "burst_delai": 33, "burst_mod": 33, "burst_period": 33, "channel_delai": 33, "channel_output_level": 33, "channel_output_polar": 33, "13": [33, 38, 44, 45, 47, 48, 49, 52, 57, 59, 61, 65, 66, 67, 70, 71, 74, 75, 86, 91], "prescale_config": 33, "trig_holdoff": 33, "trig_lin": 33, "trig_rat": 33, "trig_single_shot": 33, "trig_thresh": 33, "ab": 33, "cd": 33, "ef": 33, "gh": 33, "ext_fal": 33, "ext_ris": 33, "single_ext_fal": 33, "single_ext_ris": 33, "stanford": 33, "research": 33, "sim": [33, 95], "928": 33, "sim900": 33, "mainfram": 33, "slot_nam": 33, "metadata": 33, "lowest": 33, "raiseexc": 33, "whose": 33, "esr": 33, "cesr": 33, "ovsr": 33, "overload": 33, "status": 33, "break": [33, 51], "assert": 33, "millisecond": 33, "upon": 33, "9600": 33, "voltagedict": 33, "equitim": 33, "volt_": 33, "_step": 33, "smooth_timestep": 33, "edit": 34, "emem": 34, "8191": 34, "half": 34, "voltage_low": 34, "voltage_high": 34, "src": 34, "user1": [34, 86], "user2": 34, "user3": 34, "user4": 34, "voltage_low1": [34, 86], "voltage_high1": [34, 86], "test_send": 34, "docstr": 34, "520": 34, "lot": 34, "1000000000": 34, "numpoint": 34, "kw": 34, "datapoint": [34, 51], "dir": [34, 62], "relev": 34, "jumplog": 34, "jump_log": 34, "properli": 34, "ron": 34, "wait_trigg": 34, "rep": 34, "goto": 34, "logic_jump": 34, "sequecn": 34, "root": 34, "w": [34, 46, 50, 51, 92], "resend": 34, "design": 34, "specifiedta": 34, "mandatori": 34, "marker1": 34, "marker2": 34, "pattern": 34, "extens": [34, 45], "poitn": 34, "moment": [34, 40], "retur": 34, "wfs1": 34, "wfs2": 34, "pat": 34, "seq": 34, "wfm": 34, "fname": 34, "force_reload": 34, "dmm": [34, 62, 68, 75, 87], "scanner": [34, 54, 87], "keithlei": [34, 94, 95], "multimet": [34, 94, 95], "keithley6500": 34, "change_displai": 34, "change_autozero": 34, "sourcemet": 34, "_mode": 34, "6430": [34, 94, 95], "smu": [34, 94, 95], "layer": 34, "idl": 34, "sens": [34, 49, 55, 87], "dmm6500": [34, 94, 95], "insert": [34, 87], "quantiti": [34, 47, 87], "31": [35, 49], "event_dialog": 35, "server": [35, 37, 44, 88, 89, 90], "mirror": [35, 89], "flipper": [35, 89], "wheel": [35, 90], "dialog": 35, "pop": 35, "clean": [35, 94], "thrown": 35, "hw_type": 35, "element": 35, "home": [35, 94], "veloc": [35, 88], "deg": [35, 47, 88], "360": 35, "acceler": 35, "absolute_posit": 35, "recalibr": [35, 88], "let": [35, 44, 46, 47, 52, 57, 94], "lim_switch": 35, "zero_offset": 35, "min_vel": 35, "accn": 35, "max_vel": 35, "veloctii": 35, "fwd": 35, "rev": 35, "descript": 35, "prmz1z8": 35, "vnx_atten64": [36, 91], "vnx_atten": [36, 91], "profil": 36, "133": [36, 49], "802q": [36, 91], "dll_get_funct": 36, "dll_set_funct": 36, "test_mod": [36, 91], "futur": [36, 38, 44, 47, 57, 58, 69, 83], "102": [36, 91], "55102": [36, 91], "zurich": [37, 94, 95], "meant": 37, "emul": 37, "demodul": [37, 93], "sigout": [37, 93], "auxout": [37, 93], "theta": [37, 93], "great": 37, "dev204": 37, "zhinst": 37, "demod": [37, 93], "excit": [37, 93], "num_sigout_mixer_channel": 37, "compil": 37, "zi": [37, 93], "hdawg8": 37, "labon": 37, "54618": 37, "53866": 37, "furthermor": 37, "web": 37, "made": 37, "treat": 37, "clip": 37, "truncat": 37, "happen": [37, 88], "silent": 37, "warnings_as_error": 37, "qucod": 37, "node": 37, "tree": [37, 94], "blue": 37, "led": 37, "zipython": 37, "zilistenum": 37, "settingsonli": 37, "0x08": 37, "streamingonli": 37, "0x10": 37, "stream": 37, "subscribedonli": 37, "0x20": 37, "subscrib": 37, "basechannel": 37, "0x40": 37, "Or": 37, "wave_info": 37, "plai": 37, "feature_cod": 37, "sequence_program": 37, "equival": 37, "tab": 37, "gui": 37, "elev": 37, "32768": 37, "wave_nam": 37, "referenc": 37, "qc": [38, 43, 44, 48, 49, 53, 58, 79, 80, 83, 84, 87, 91, 92], "qcodes_contrib_driv": [38, 39, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 83, 84, 85, 86, 87, 88, 91, 92, 93, 94, 95], "driver": [38, 39, 40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 79, 80, 81, 83, 84, 85, 86, 87, 88, 91, 92, 93], "hadn": [38, 44, 47, 58, 69, 83], "39": [38, 40, 44, 45, 47, 49, 53, 55, 56, 57, 58, 59, 60, 61, 62, 65, 67, 69, 70, 71, 74, 76, 81, 82, 83, 86, 87, 91], "plu": [38, 44, 47, 58, 69, 83], "ed261978": [38, 58, 83], "command_histori": [38, 44, 47, 58, 69, 83], "logfil": [38, 44, 47, 58, 69, 83], "200826": 38, "14764": 38, "psa": 38, "usb0": 38, "0x0957": 38, "0x0e0b": 38, "my49370329": 38, "technologi": [38, 59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "27": [38, 45, 56, 69, 73], "rf_center_frequ": 38, "resolution_bandwidth": 38, "video_bandwidth": 38, "29117031": 38, "power_spectral_dens": 38, "123": 38, "5143635": 38, "elp320": 39, "regul": 39, "watt": 39, "heater_addr": 39, "heater_v": 39, "heater_i": 39, "warmup_heat": 39, "voltage_set": 39, "current_set": 39, "voltage_out": 39, "current_out": 39, "matplotlib": [40, 49, 51, 63, 64, 69, 73, 84, 86, 92], "pyplot": [40, 49, 51, 63, 64, 69, 73, 84, 86], "plt": [40, 49, 51, 63, 64, 69, 73, 84, 86, 92], "notebook": [40, 86, 92, 94, 95], "howev": 40, "du401_bu2": 40, "13789": 40, "58": 40, "cooler": 40, "22": [40, 47, 57, 59, 63, 72, 74], "vertic": 40, "exposur": 40, "acquisition_mod": 40, "read_mod": 40, "shutter_mod": 40, "fulli": 40, "figur": [40, 51, 86, 92], "plot": [40, 44, 49, 84, 86, 94], "titl": [40, 63, 64, 69, 92], "xlabel": [40, 92], "ylabel": [40, 92], "cosmic": 40, "rai": 40, "accumulation_cycle_tim": 40, "number_accumul": 40, "63729": 40, "64724": 40, "64771": 40, "64745": 40, "65337": 40, "65069": 40, "65246": 40, "accordingli": 41, "anc": 41, "asrl7": 41, "axis1": [41, 57], "axis7": 41, "At": [41, 81], "submodul": [41, 81, 95], "asynchronosli": 41, "ip_pow": 42, "192": [42, 47, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 84, 87], "168": [42, 47, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 84, 87, 88], "admin": 42, "12345678": 42, "imform": 43, "valid_path": 43, "bf": 43, "bf_fridg": 43, "pressure_vacuum_can": 43, "pressure_compressor_inlet": 43, "pressure_compressor_outlet": 43, "pressure_mixture_tank": [43, 58], "pressure_venting_lin": 43, "temperature_4k_pl": [43, 58], "temperature_50k_pl": [43, 58], "temperature_magnet": [43, 58], "temperature_mixing_chamb": [43, 58], "temperature_stil": [43, 58], "blue_lagoon": 43, "53e": 43, "576": 43, "555": 43, "49": 43, "36": [43, 44], "9866099999999998": 43, "42": [43, 56], "9614": 43, "26158": 43, "912985": 43, "0078465": 43, "load_or_create_experi": [44, 84, 92], "initialise_databas": 44, "dataset": [44, 76, 84, 92], "plot_by_id": 44, "dond": [44, 76], "do1d": 44, "gre": [44, 47], "gre058050": [44, 47], "210330": 44, "113772": 44, "s2vn": 44, "download": [44, 94], "coppermountaintech": 44, "misc": 44, "hislip": 44, "tcpip0": [44, 47, 79, 86, 87, 92], "hislip0": [44, 81], "cmt": 44, "20107935": 44, "09": [44, 45, 46, 47, 56, 73, 74, 86], "201": 44, "averages_en": 44, "averages_trigger_en": 44, "0005e": 44, "data_transfer_format": 44, "asc": 44, "if_bandwidth": [44, 92], "nb_trace": 44, "2001": 44, "point_s11": 44, "point_s12": 44, "point_s21": 44, "point_s22": 44, "999e": 44, "2e": [44, 48, 59, 60, 65, 66, 67, 70, 73, 74], "databas": 44, "config": 44, "initialise_or_create_database_at": 44, "test_copper_mountain": 44, "exp": [44, 84, 86, 92], "experiment_nam": [44, 84, 92], "testing_coppermountain_driv": 44, "sample_nam": [44, 84, 92], "band_pass_filt": 44, "2e9": [44, 45], "10e3": 44, "mea": [44, 54, 87, 92], "register_paramet": [44, 84, 92], "datasav": [44, 84, 92], "add_result": [44, 84, 92], "cbax": [44, 84], "run_id": [44, 92], "experiment": [44, 76], "similarli": 44, "paramt": 44, "0477012": 44, "09391321": 44, "17265479": 44, "03038562": 44, "03399903": 44, "0214076": 44, "01097229": 44, "01708669": 44, "01996385": 44, "17442979": 44, "17352842": 44, "17585808": 44, "03521817": 44, "72": 44, "72068274": 44, "74": [44, 82], "92402692": 44, "77": [44, 53], "23523101": 44, "87500527": 44, "86": 44, "19919018": 44, "46406748": 44, "23681928": 44, "86312445": 44, "47": [44, 45], "37145838": 44, "20720528": 44, "45": [44, 83], "34542698": 44, "09130151": 44, "57583366": 44, "71111513": 44, "69": 44, "62992638": 44, "6484703": 44, "85211098": 44, "80363488": 44, "96240925": 44, "83102692": 44, "98620611": 44, "34": [44, 47, 48, 55, 59, 60, 61, 65, 67, 69, 70, 71, 74, 86, 87], "25529117": 44, "06598604": 44, "00305115": 44, "06177799": 44, "15385378": 44, "02385243": 44, "02926526": 44, "02279546": 44, "01547223": 44, "02163175": 44, "02391645": 44, "18152415": 44, "18361572": 44, "18402174": 44, "0000000e": 44, "9995000e": 44, "9990000e": 44, "9980010e": 44, "9990005e": 44, "03160302": 44, "10392121": 44, "17598948": 44, "02083835": 44, "02544277": 44, "02948864": 44, "01215209": 44, "01844561": 44, "01988006": 44, "11017192": 44, "10721224": 44, "10526495": 44, "68": [44, 56], "03181706": 44, "96986101": 44, "84": 44, "366874": 44, "70": 44, "94278538": 44, "79": 44, "11469549": 44, "38634014": 44, "24117547": 44, "60915241": 44, "78312326": 44, "20522653": 44, "38599278": 44, "49447507": 44, "83": 44, "2538078": 44, "67": 44, "23946765": 44, "73": 44, "17241871": 44, "75": [44, 56, 71, 74], "89235284": 44, "80": [44, 92], "80017483": 44, "81": 44, "72715481": 44, "1331486": 44, "56154342": 44, "36192594": 44, "23860211": 44, "37759455": 44, "75163547": 44, "00655536": 44, "06872062": 44, "14529468": 44, "02987041": 44, "01884765": 44, "02839042": 44, "01384824": 44, "02119365": 44, "02357165": 44, "10193855": 44, "10032872": 44, "09917688": 44, "vna_s11_magnitud": 44, "vna_s11_phas": 44, "setpoint_label": 44, "setpoint_nam": 44, "vna_frequ": 44, "pyusb": 45, "satisfi": 45, "conda": 45, "q38": 45, "site": [45, 87], "packag": [45, 87, 95], "kernel": 45, "close_al": [45, 49, 91], "era": 45, "0165": 45, "v1": [45, 79, 80], "82": 45, "4700000000": 45, "003": [45, 75], "sweep_start_frequ": 45, "2000000000": 45, "sweep_step_frequ": 45, "sweep_stop_frequ": 45, "6000000000": [45, 47, 91], "59": 45, "222": 45, "53": 45, "100e": [45, 60, 67, 70, 71, 74, 86], "10e6": 45, "succed": 45, "timeit": 45, "147": 45, "std": 45, "3e9": [45, 91], "178": [45, 87], "19": [45, 47, 64, 65, 73, 91, 93], "143": [45, 88], "277": 45, "asrl16": 46, "1024": [46, 59], "now": [46, 47, 52, 55, 56, 57, 81], "660": 46, "634878": 46, "zero_offset_en": 46, "000390634": 46, "210923": 47, "47112": 47, "rf_sourc": 47, "9760": 47, "hs9002b": 47, "020": 47, "28": [47, 55], "u": [47, 50, 51, 53, 86], "easili": [47, 53], "100mhz": 47, "ref_lock": 47, "rf_source_ch1": 47, "7e": 47, "temp": 47, "rf_source_ch2": 47, "6e": 47, "25": [47, 56, 59, 60, 61, 64, 65, 68, 73, 88, 91, 92], "6e9": 47, "1700000000": 47, "gotten": 47, "summari": 47, "23": [47, 56, 59, 60, 66, 75, 76], "conclud": 47, "introduct": [47, 95], "advanc": 47, "modul": [47, 50, 51, 81, 87, 94, 95], "theoret": 47, "conduct": 47, "regard": 47, "practic": 47, "2142": 48, "be2142b": 48, "12v": 48, "15ma": 48, "sn04": 48, "016": 48, "lc1846": 48, "vl446": 48, "240": [48, 88], "92e": 48, "12e": 48, "45e": 48, "67e": 48, "49e": 48, "19e": 48, "93e": 48, "73e": 48, "77e": 48, "17e": 48, "24e": 48, "11e": 48, "78e": 48, "08e": 48, "04e": 48, "42e": 48, "ch04": 48, "50000014": 48, "ramp_slop": 48, "00025": [48, 80], "47945107": 48, "45145621": 48, "42344528": 48, "39945953": 48, "37142712": 48, "34345707": 48, "31545273": 48, "29144462": 48, "26346268": 48, "keithley6430": 49, "inc": 49, "1357727": 49, "c28": 49, "jun": 49, "2011": 49, "43": 49, "a02": 49, "arm_count": 49, "arm_sourc": 49, "imm": 49, "autozero": 49, "filter_auto": 49, "filter_median": 49, "filter_median_en": 49, "filter_mov": 49, "filter_moving_en": 49, "filter_repeat": 49, "filter_repeat_en": 49, "output_auto_off": 49, "output_on": 49, "sense_autorang": 49, "sense_curr": 49, "sense_current_rang": 49, "050000e": 49, "sense_mod": 49, "curr": [49, 87], "sense_resist": 49, "sense_resistance_ocomp": 49, "sense_resistance_rang": 49, "100000e": 49, "sense_voltag": 49, "sense_voltage_rang": 49, "source_curr": 49, "000000e": 49, "source_current_compli": 49, "source_current_compliance_trip": 49, "source_current_rang": 49, "source_delai": 49, "00300": 49, "source_delay_auto": 49, "source_mod": 49, "source_voltag": 49, "source_voltage_compli": 49, "source_voltage_compliance_trip": 49, "source_voltage_rang": 49, "trigger_count": 49, "meas_r": 49, "meas2_r": 49, "lazi": 49, "100313": 49, "51099999998": 49, "100377": 49, "86190725854": 49, "gsa": [50, 51], "triger": [50, 51], "try": [50, 51, 55, 87], "probabl": [50, 51], "resid": [50, 51], "sy": [50, 51, 92], "x86": [50, 51], "logger": [50, 51, 84, 92], "start_all_log": [50, 51, 84, 92], "get_file_handl": [50, 51], "setlevel": [50, 51], "close_all_registered_instru": [50, 51], "demonstr": [50, 51], "wrong_chassi": [50, 51], "failur": [50, 51], "empty_slot": [50, 51], "not_m3202a": [50, 51], "add_compon": [50, 51, 84, 92], "def": [50, 51, 59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "get_divid": [50, 51], "elif": [50, 51], "create_sawtooth": [50, 51], "n_pt": [50, 51], "tile": [50, 51, 67], "create_sin": [50, 51], "phi": [50, 51], "pi": [50, 51, 56, 59, 86], "sin": [50, 51, 59, 86], "pxi1": [50, 51], "trigger_pxi1": [50, 51], "sd_triggerbehavior": [50, 51], "trigger_fal": [50, 51], "sd_waveshap": [50, 51], "aou_awg": [50, 51], "sd_queuemod": [50, 51], "amplitude_channel_1": [50, 51], "offset_channel_2": [50, 51], "durat": [50, 51, 86], "20x": [50, 51], "prescaler_1gsa": [50, 51], "prescaler_200msa": [50, 51], "prescaler_50msa": [50, 51], "sawtooth_2u": [50, 51], "200msa": [50, 51], "pt": [50, 51], "zeros_awg1": [50, 51], "sawtooth_2us_awg1": [50, 51], "steps_awg1": [50, 51], "zeros_awg2": [50, 51], "sine_awg2": [50, 51], "ext_trigg": [50, 51], "auto_trigg": [50, 51], "autotrig": [50, 51], "0b0011": [50, 51], "0b1100": [50, 51], "conenct": 51, "sd_error": 51, "geterrormessag": 51, "slot_in": 51, "num_channel": 51, "modulein": 51, "sd_ain": 51, "moduleinid": 51, "openwithslot": 51, "num_cycl": 51, "dig_prescal": 51, "in_dur": 51, "tot_points_in": 51, "delay_in": 51, "daqstop": 51, "daqflush": 51, "channelinputconfig": 51, "ain_imped": 51, "ain_impedance_hz": 51, "ain_coupl": 51, "ain_coupling_dc": 51, "channelprescalerconfig": 51, "daqdigitaltriggerconfig": 51, "daqconfig": 51, "daqstartmultipl": 51, "points_per_read": 51, "20000": [51, 70, 81], "read_timeout": 51, "numreadpoint": 51, "short": 51, "readdon": 51, "cnt": 51, "daqcounterread": 51, "readpoint": 51, "daqread": 51, "fig": [51, 63, 64, 69, 84], "show": [51, 56, 63, 64, 84, 95], "gpib0": [52, 53], "lsci": [52, 53], "331259": 52, "032301": 52, "294": 52, "284": 52, "heater_output": 52, "heater_rang": 52, "290": 52, "300": [52, 57, 88], "5w": 52, "specifz": 53, "0166614": 53, "6251287": 53, "01666": 53, "magnet_coil_constant_unit": 53, "coil_constant_unit": 53, "0014": 53, "current_limit": 53, "55": 53, "current_ramp_r": 53, "current_rate_limit": 53, "4e": [53, 65], "14994": 53, "oer_quench": 53, "operational_error_statu": 53, "000000000": 53, "persistent_switch_heat": 53, "quench_current_step_limit": 53, "quench_detect": 53, "ramp_seg": 53, "ramping_st": 53, "0048": 53, "voltage_limit": 53, "target_curr": 53, "target_field": 53, "verifi": 53, "inde": 53, "ben": 53, "0016660000000000002": 53, "001678": 53, "1007202881152461": 53, "09996000000000001": 53, "19992000000000001": 53, "follwo": 53, "million": 54, "num_ai_channel": 54, "thousand": 54, "devnam": [54, 93], "dev0": 54, "sample_rate_per_channel": 54, "num_samples_raw": 54, "num_samples_averag": 54, "ai_task": 54, "wait_until_don": 54, "mani": [54, 94, 95], "__": 54, "scan_lin": 54, "multichannel": 54, "ao_channel": 54, "voltage_0": 54, "voltage_4": 54, "multiplex": 55, "rf_switch": 55, "short_nam": 55, "1dbfd38": 55, "85": 55, "ch3": 55, "ch4": 55, "ch5": 55, "anywai": 55, "memor": 55, "yaml": 55, "unlik": 55, "qubit": 55, "switch_channel": 55, "switch_main": 55, "switch_ch2": 55, "switch_qubit": 55, "switch_ch4": 55, "switch_ch5": 55, "switch_ch6": 55, "switch_com": 55, "generatro": 56, "pxie5654": 56, "mw_sourc": 56, "03176e2e": 56, "2015": 56, "03": [56, 59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "bootload": 56, "5e9": 56, "visibl": 56, "oscilloscop": 56, "clock_sourc": 56, "pulse_mod_en": 56, "ttl": 56, "unmodul": 56, "carrier": 56, "a_c": 56, "co": 56, "nomin": 56, "produc": [56, 69], "tone": 56, "analog_mod_typ": 56, "cell": 56, "amplitude_mod_sensit": 56, "revert": 56, "5e": [56, 59, 61, 65, 83, 86], "ctl": 57, "v2": 57, "m100l": 57, "489": 57, "axis2": 57, "108": [57, 86], "progress": 57, "step_delai": 57, "step_amplitude_neg": 57, "touch": 57, "therefor": 57, "limit_statu": 57, "not_act": 57, "201007": 58, "9328": 58, "20201005": 58, "temperature_100mk": 58, "295": 58, "94393629146197": 58, "622032281476": 58, "282": 58, "72965240364397": 58, "9949711258109": 58, "115153276995": 58, "pressure_condensation_lin": 58, "pressure_forepump_back": 58, "420131839019814": 58, "0630699567828778": 58, "697571356918492": 58, "ipython": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 87], "displai": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 92], "qdac_addr": [59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76], "tcpip": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 81], "5025": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76], "rigol": [59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "ds1074z": [59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "ds1000z": [59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "rigol_addr": [59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "199": [59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "scope": [59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "ds1104z": [59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "ds1za171812151": [59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "captur": [59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 94], "disp": [59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "bmpdata": [59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "read_raw": [59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "rst": [59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "chan1": [59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "chan3": [59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 74, 75], "bwl": [59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "prob": [59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "scal": [59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75], "tim": [59, 60, 61, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 86], "my_trac": 59, "ch03": [59, 60, 61, 65, 66, 70, 71, 72, 74], "ext4": [59, 65, 70, 74], "source_from_trigg": [59, 65, 70, 74], "osc": [59, 65, 74, 75], "chan4": [59, 65, 68, 70, 74, 75], "10e": [59, 60, 62, 68, 72, 73, 75], "long_trac": 59, "endpoint": 59, "chan2": [59, 60, 68, 73, 75], "ch02": [59, 60], "20e": [60, 68, 69, 72, 75, 76], "dc_list_3": 60, "dc_list_2": 60, "list2_end": 60, "dc_constant_v": [61, 69, 76], "pp": 62, "prettyprint": 62, "plunger2": [62, 68, 75], "plunger3": [62, 68, 75], "trig4": 62, "int1": [62, 67], "sst": 62, "tmod": 62, "coun": [62, 67], "cont": [62, 67], "int2": 62, "sour3": 62, "416667": 62, "133333": 62, "tint": [62, 67], "resistor": [63, 64, 94, 95], "5m6": [63, 64], "33m": [63, 64], "5g": [63, 64], "g1": [63, 64, 73], "g2": [63, 64, 73], "g3": [63, 64], "g4": [63, 64], "o5": 63, "015": [63, 64], "013": [63, 64], "021": [63, 64], "modulation_mv": [63, 64], "powerline_cycl": [63, 64], "leakage_matrix_ohm": [63, 64], "leakage_megaohm": [63, 64], "m\u03c9": [63, 64], "subplot": [63, 64, 69, 84], "img": [63, 64, 69], "imshow": [63, 64, 69], "interpol": [63, 64, 69], "vmin": [63, 64], "vmax": [63, 64], "tick": [63, 64, 92], "arang": [63, 64, 67, 86], "minortick": [63, 64], "set_xtick": [63, 64], "set_ytick": [63, 64], "grid": [63, 64, 92], "color": [63, 64], "grei": [63, 64], "linewidth": [63, 64], "gca": [63, 64, 86], "invert_yaxi": [63, 64], "colorbar": [63, 64, 69], "set_label": [63, 64, 69], "qdac1_addr": [64, 73], "qdac_1": [64, 73], "qdac2_addr": [64, 73], "qdac_2": [64, 73], "togeth": [64, 73], "_": [64, 73], "47m": 64, "g5": 64, "o6": 64, "011": 64, "step_start_mark": 65, "step_end_mark": 65, "my_list": [65, 72], "resourcemanag": 67, "open_resourc": 67, "write_termin": 67, "read_termin": 67, "50e": [67, 72], "0e": 67, "trac": 67, "rem": 67, "mysquar": 67, "write_binary_valu": 67, "stair": 67, "syst": 67, "80e": 68, "detun": [68, 75], "jp": 69, "220421": 69, "5376": 69, "ge": [69, 76], "diodes_left": 69, "diodes_right": 69, "inner_step": 69, "inner_v": 69, "outer_step": 69, "outer_v": 69, "hook": 69, "flow": [69, 76], "circumv": 69, "flaw": 69, "442": 69, "reshap": 69, "extent": 69, "cmap": 69, "plasma": 69, "nearest": 69, "set_xlabel": 69, "set_ylabel": 69, "ma": 69, "200e": [70, 71, 74], "400e": [70, 71, 74], "prepar": 73, "8e": 73, "plunger4": 75, "60e": 75, "sensor1": 75, "41666667": 75, "13333333": 75, "98": 75, "057": 75, "037": 75, "017": 75, "023": 75, "04283333": 75, "02283333": 75, "00283333": 75, "01716667": 75, "03716667": 75, "02866667": 75, "00866667": 75, "01133333": 75, "03133333": 75, "05133333": 75, "0145": 75, "0055": 75, "0255": 75, "0455": 75, "0655": 75, "204": 75, "008": 75, "188": 75, "384": 75, "315": 75, "119": 75, "077": 75, "273": 75, "469": 75, "034": 75, "162": 75, "358": 75, "554": 75, "051": 75, "247": 75, "443": 75, "639": 75, "767": 75, "685": 75, "603": 75, "521": 75, "439": 75, "48366667": 75, "40166667": 75, "31966667": 75, "23766667": 75, "15566667": 75, "20033333": 75, "11833333": 75, "03633333": 75, "04566667": 75, "12766667": 75, "083": 75, "165": 75, "329": 75, "411": 75, "to_back": 75, "386": 75, "2615": 75, "137": 75, "0125": 75, "112": 75, "149": 75, "1625": 75, "176": [75, 87, 88], "1895": 75, "203": 75, "left_diod": 76, "right_diod": 76, "do2d": 76, "param_set1": 76, "start1": 76, "stop1": 76, "num_points1": 76, "delay1": 76, "param_set2": 76, "param_mea": 76, "read_current_a": 76, "set_before_sweep": 76, "show_progress": 76, "do_plot": 76, "213": 76, "chain": [77, 78, 94], "ps_1": [79, 80], "inst0": [79, 86, 87, 92], "amp": [79, 80, 81], "026373828": 79, "hw42000000": 79, "sw01": 79, "303": 79, "44": 79, "set_curr": [79, 80], "i1": [79, 80], "101920": 80, "hw50020003": 80, "sw2": 80, "62": 80, "schwartz": 81, "100khz": 81, "40ghz": 81, "wide": 81, "radar": 81, "rohde_schwarz": 81, "visaioerror": 81, "134": 81, "fm_channel": 81, "ration": 81, "dbg": 81, "mock": 81, "2975": 82, "blaze": 82, "groov": 82, "central": 82, "slit": 82, "groove_dens": 82, "650": 82, "600": 82, "mm": 82, "\u03bcm": 82, "756": 82, "675": 82, "1350": 82, "745": 82, "6130981445312": 82, "6336059570312": 82, "6541137695312": 82, "674560546875": 82, "695068359375": 82, "715576171875": 82, "736083984375": 82, "756591796875": 82, "777099609375": 82, "7975463867188": 82, "210604": 83, "4564": 83, "architectur": 83, "40ghz_signal": 83, "recogn": 83, "sc": 83, "mw1": 83, "268445854": 83, "0199999809265137": 83, "2684": 83, "clock_frequ": 83, "clock_refer": 83, "single_ton": 83, "406": 83, "celsiu": 83, "manufacture_d": 83, "2021": 83, "11h": 83, "10e9": 83, "10000000000": 83, "expand_setpoints_help": 84, "plot_dataset": 84, "websq": 84, "number_of_detector": 84, "measurement_period": 84, "ua": 84, "bias_curr": 84, "trigger_level": 84, "amount": 84, "iv": 84, "performing_meas_using_parameters_and_dataset": 84, "timemea": 84, "channel1": 84, "channel3": 84, "channel4": 84, "37866131": 85, "c010219": 86, "fv": 86, "94": 86, "am_depth1": 86, "am_depth2": 86, "am_internal_efile1": 86, "am_internal_efile2": 86, "am_internal_freq1": 86, "am_internal_freq2": 86, "am_internal_function1": 86, "am_internal_function2": 86, "am_internal_source1": 86, "am_internal_source2": 86, "am_state1": 86, "am_state2": 86, "burst_mode1": 86, "burst_mode2": 86, "burst_ncycles1": 86, "burst_ncycles2": 86, "burst_state1": 86, "burst_state2": 86, "burst_tdelay1": 86, "burst_tdelay2": 86, "center_freq1": 86, "center_freq2": 86, "combine1": 86, "combine2": 86, "fm_deviation1": 86, "fm_deviation2": 86, "fm_internal_efile1": 86, "fm_internal_efile2": 86, "fm_internal_freq1": 86, "fm_internal_freq2": 86, "fm_internal_function1": 86, "fm_internal_function2": 86, "fm_internal_source1": 86, "fm_internal_source2": 86, "fm_state1": 86, "fm_state2": 86, "freq_concurrent1": 86, "freq_concurrent2": 86, "freq_cw1": 86, "freq_cw2": 86, "freq_mode1": 86, "freq_mode2": 86, "freq_span1": 86, "9e": 86, "freq_span2": 86, "freq_start1": 86, "freq_start2": 86, "freq_stop1": 86, "freq_stop2": 86, "fsk_freq1": 86, "fsk_freq2": 86, "fsk_internal_rate1": 86, "fsk_internal_rate2": 86, "fsk_source1": 86, "fsk_source2": 86, "fsk_state1": 86, "fsk_state2": 86, "function_efile1": 86, "function_efile2": 86, "function_ramp_symmetry1": 86, "function_ramp_symmetry2": 86, "function_shape1": 86, "function_shape2": 86, "impedance_output1": 86, "impedance_output2": 86, "noise_level3": 86, "noise_level4": 86, "phase1": 86, "phase2": 86, "pm_deviation1": 86, "5708": 86, "pm_deviation2": 86, "pm_internal_efile1": 86, "pm_internal_efile2": 86, "pm_internal_freq1": 86, "pm_internal_freq2": 86, "pm_internal_function1": 86, "pm_internal_function2": 86, "pm_internal_source1": 86, "pm_internal_source2": 86, "pm_state1": 86, "pm_state2": 86, "polarity_output1": 86, "polarity_output2": 86, "pulse_delay1": 86, "pulse_delay2": 86, "pulse_duty_cycle1": 86, "pulse_duty_cycle2": 86, "pulse_hold1": 86, "pulse_hold2": 86, "pulse_period1": 86, "pulse_period2": 86, "pulse_trans_lead1": 86, "pulse_trans_lead2": 86, "pulse_trans_trail1": 86, "pulse_trans_trail2": 86, "pulse_width1": 86, "pulse_width2": 86, "pwm_duty_deviation1": 86, "pwm_duty_deviation2": 86, "pwm_internal_efile1": 86, "pwm_internal_efile2": 86, "pwm_internal_freq1": 86, "pwm_internal_freq2": 86, "pwm_internal_function1": 86, "pwm_internal_function2": 86, "pwm_internal_source1": 86, "pwm_internal_source2": 86, "pwm_state1": 86, "pwm_state2": 86, "state_output1": 86, "state_output2": 86, "sweep_hold_time1": 86, "sweep_hold_time2": 86, "sweep_mode1": 86, "sweep_mode2": 86, "sweep_return_time1": 86, "sweep_return_time2": 86, "sweep_spacing1": 86, "sweep_spacing2": 86, "sweep_time1": 86, "sweep_time2": 86, "trigger_slop": 86, "trigger_tim": 86, "voltage_amplitude1": 86, "voltage_amplitude2": 86, "voltage_concurrent1": 86, "voltage_concurrent2": 86, "voltage_high2": 86, "voltage_limit_high1": 86, "voltage_limit_high2": 86, "voltage_limit_low1": 86, "voltage_limit_low2": 86, "voltage_low2": 86, "voltage_offset1": 86, "voltage_offset2": 86, "voltage_unit1": 86, "vpp": 86, "voltage_unit2": 86, "realli": 86, "anyth": 86, "lt": [86, 87], "line2d": 86, "0xa471608": 86, "gt": [86, 87], "burst": 86, "invers": 86, "high1": 86, "1v": 86, "amongst": 87, "wire": 87, "dmm_1": 87, "04438044": 87, "04b": 87, "5799": 87, "959": 87, "fre": 87, "accessd": 87, "resistance_4w": 87, "voltage_dc": 87, "current_dc": 87, "5793": 87, "865": 87, "rear": 87, "knob": 87, "active_termin": 87, "fron": 87, "5798": 87, "519": 87, "traceback": 87, "recent": [87, 92], "7c3ed5015dc0": 87, "appdata": 87, "python38": 87, "get_wrapp": 87, "583": 87, "584": 87, "585": 87, "586": 87, "587": 87, "570": 87, "571": 87, "might": 87, "572": 87, "raw_valu": 87, "get_funct": 87, "573": 87, "574": 87, "_from_raw_value_to_valu": 87, "__call__": 87, "typeerror": 87, "177": 87, "arg_count": 87, "exec_funct": 87, "_measur": 87, "65": 87, "1_ch1_resist": 87, "84d4b9528614": 87, "152": 87, "153": [87, 88], "154": 87, "1_resist": 87, "inst": 88, "55125694": 88, "sw": [88, 89, 90], "move_hom": 88, "velocity_max": 88, "meantim": 88, "180": 88, "position_async": 88, "last_posit": 88, "250": 88, "280": 88, "33045196533203": 88, "121": 88, "30647277832031": 88, "122": 88, "93938446044922": 88, "125": 88, "22875213623047": 88, "127": 88, "80081939697266": 88, "130": 88, "36468505859375": 88, "132": 88, "91712951660156": 88, "135": 88, "5030059814453": 88, "138": 88, "07122802734375": 88, "140": 88, "61135864257812": 88, "18075561523438": 88, "73727416992188": 88, "148": 88, "30560302734375": 88, "8717498779297": 88, "4274444580078": 88, "155": 88, "98837280273438": 88, "158": 88, "54783630371094": 88, "161": 88, "1175994873047": 88, "163": 88, "6906280517578": 88, "166": 88, "25445556640625": 88, "7959442138672": 88, "171": 88, "37112426757812": 88, "173": 88, "93038940429688": 88, "48873901367188": 88, "179": 88, "0663604736328": 88, "181": 88, "61782836914062": 88, "184": 88, "19651794433594": 88, "mff002": 89, "37864181": 89, "tdc001": 90, "83857355": 90, "90": [90, 93], "00012969970703": 90, "00189208984375": 90, "serial_num": 91, "529": 91, "working_frequ": 91, "6300000000": 91, "working_frequnci": 91, "overridden": 91, "23160": 91, "main_port": 91, "test_port": 91, "lda_main_port": 91, "lda_ch2": 91, "200000000": 91, "lda_test_port": 91, "lda_ch4": 91, "datetim": 92, "zvl": 92, "vnarstafuri": 92, "fisica": 92, "unina": 92, "inizi": 92, "parameter_snap": 92, "s_paramet": 92, "meas_format": 92, "start_freq": 92, "end_freq": 92, "center_freq": 92, "span_freq": 92, "vna_pow": 92, "points_vna": 92, "101": 92, "4001": 92, "avg": 92, "1e9": 92, "san": 92, "nwa": 92, "original_timeout": 92, "new_timeout": 92, "exp_nam": 92, "registr": 92, "s_trace": 92, "rf_power": 92, "cont_meas_on": 92, "electrical_delay_auto": 92, "electr": 92, "autoscal": 92, "get_v": 92, "get_v2": 92, "complex": 92, "scatter": 92, "under": [92, 95], "shutdown": 92, "cont_meas_off": 92, "captured_run_id": 92, "load_by_run_spec": 92, "get_parameter_data": 92, "zvl_zvl_frequenc": 92, "save_trac": 92, "zvl_trace": 92, "zvl_s_trace": 92, "figsiz": 92, "dpi": 92, "facecolor": 92, "edgecolor": 92, "rc": 92, "labels": 92, "fontsiz": 92, "xtick": 92, "ytick": 92, "x_label": 92, "y_label": 92, "plot_titl": 92, "sa": 92, "seen": 92, "essenti": 93, "compris": 93, "whatev": 93, "auxiliari": 93, "dev200": 93, "lia": 93, "time_const": 93, "demod1": 93, "sigout1": 93, "auxouts1": 93, "lia1": 93, "9e3": 93, "sigout_rang": 93, "sigout_amplitude0": 93, "output_amplitud": 93, "git": [94, 95], "repositori": [94, 95], "initial": 94, "stage": 94, "equip": 94, "measurer": [94, 95], "laser": 94, "hs900b": [94, 95], "100k": [94, 95], "omega": [94, 95], "311": [94, 95], "quench": 94, "multifunct": [94, 95], "hmc": [94, 95], "8043": [94, 95], "rohe": [94, 95], "snspd": [94, 95], "10mwa168": [94, 95], "afg": 94, "develop": 95, "best": 95, "effort": 95, "basi": 95, "remam": 95, "clone": 95, "origin": 95, "checkout": 95, "symbol": 95, "heavili": 95, "improv": 95, "jupyt": 95, "strongli": 95, "encourag": 95, "makerofinstru": 95, "convent": 95, "especi": 95, "2700": 95, "gpl": 95, "subpackag": 95, "page": 95}, "objects": {"qcodes_contrib_drivers": [[0, 0, 0, "-", "drivers"]], "qcodes_contrib_drivers.drivers": [[1, 0, 0, "-", "Advantech"], [2, 0, 0, "-", "Agilent"], [3, 0, 0, "-", "AimTTi"], [4, 0, 0, "-", "Andor"], [5, 0, 0, "-", "Attocube"], [7, 0, 0, "-", "Aviosys"], [8, 0, 0, "-", "Bilt"], [9, 0, 0, "-", "BlueFors"], [0, 0, 0, "-", "CMTS5048"], [10, 0, 0, "-", "CopperMountain"], [11, 0, 0, "-", "Cryocon"], [12, 0, 0, "-", "Cryogenic"], [13, 0, 0, "-", "ERAInstruments"], [14, 0, 0, "-", "GeneralMicrowave"], [15, 0, 0, "-", "Gentec"], [16, 0, 0, "-", "Holzworth"], [17, 0, 0, "-", "Keysight"], [19, 0, 0, "-", "Lakeshore"], [20, 0, 0, "-", "NationalInstruments"], [21, 0, 0, "-", "Newport"], [22, 0, 0, "-", "Oxford"], [23, 0, 0, "-", "QDevil"], [24, 0, 0, "-", "QuTech"], [25, 0, 0, "-", "RohdeSchwarz"], [27, 0, 0, "-", "Shamrock"], [28, 0, 0, "-", "SignalCore"], [29, 0, 0, "-", "SingleQuantum"], [30, 0, 0, "-", "Spectrum"], [32, 0, 0, "-", "Standa"], [33, 0, 0, "-", "StanfordResearchSystems"], [34, 0, 0, "-", "Tektronix"], [35, 0, 0, "-", "Thorlabs"], [36, 0, 0, "-", "Vaunix"], [37, 0, 0, "-", "ZurichInstruments"]], "qcodes_contrib_drivers.drivers.Advantech": [[1, 0, 0, "-", "PCIE_1751"]], "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751": [[1, 1, 1, "", "Advantech_PCIE_1751"], [1, 4, 1, "", "DAQNaviException"], [1, 4, 1, "", "DAQNaviWarning"]], "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751": [[1, 2, 1, "", "ERRORMSG"], [1, 3, 1, "", "check"], [1, 3, 1, "", "close"], [1, 3, 1, "", "get_idn"], [1, 3, 1, "", "port_count"], [1, 3, 1, "", "read_pin"], [1, 3, 1, "", "read_port"], [1, 3, 1, "", "write_pin"], [1, 3, 1, "", "write_port"]], "qcodes_contrib_drivers.drivers.Agilent": [[2, 0, 0, "-", "Agilent_N9000A"]], "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A": [[2, 1, 1, "", "Agilent_N9000A"]], "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A.Agilent_N9000A": [[2, 3, 1, "", "__init__"], [2, 3, 1, "", "power_parser"]], "qcodes_contrib_drivers.drivers.AimTTi": [[3, 0, 0, "-", "EL320P"]], "qcodes_contrib_drivers.drivers.AimTTi.EL320P": [[3, 1, 1, "", "EL320P"]], "qcodes_contrib_drivers.drivers.Andor": [[4, 0, 0, "-", "DU401"]], "qcodes_contrib_drivers.drivers.Andor.DU401": [[4, 1, 1, "", "Andor_DU401"], [4, 1, 1, "", "Spectrum"], [4, 1, 1, "", "atmcd64d"]], "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401": [[4, 3, 1, "", "close"], [4, 2, 1, "", "firmware_build"], [4, 2, 1, "", "firmware_version"], [4, 3, 1, "", "get_idn"], [4, 2, 1, "", "head_model"], [4, 2, 1, "", "serial_number"], [4, 2, 1, "", "x_pixels"], [4, 2, 1, "", "y_pixels"]], "qcodes_contrib_drivers.drivers.Andor.DU401.Spectrum": [[4, 3, 1, "", "get_raw"], [4, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d": [[4, 3, 1, "", "cooler_off"], [4, 3, 1, "", "cooler_on"], [4, 2, 1, "", "dll"], [4, 3, 1, "", "error_check"], [4, 3, 1, "", "get_acquired_data"], [4, 3, 1, "", "get_acquisition_timings"], [4, 3, 1, "", "get_camera_handle"], [4, 3, 1, "", "get_camera_serial_number"], [4, 3, 1, "", "get_detector"], [4, 3, 1, "", "get_filter_mode"], [4, 3, 1, "", "get_hardware_version"], [4, 3, 1, "", "get_head_model"], [4, 3, 1, "", "get_status"], [4, 3, 1, "", "get_temperature"], [4, 3, 1, "", "get_temperature_range"], [4, 3, 1, "", "initialize"], [4, 3, 1, "", "is_cooler_on"], [4, 3, 1, "", "set_accumulation_cycle_time"], [4, 3, 1, "", "set_acquisition_mode"], [4, 3, 1, "", "set_current_camera"], [4, 3, 1, "", "set_exposure_time"], [4, 3, 1, "", "set_filter_mode"], [4, 3, 1, "", "set_number_accumulations"], [4, 3, 1, "", "set_read_mode"], [4, 3, 1, "", "set_shutter"], [4, 3, 1, "", "set_temperature"], [4, 3, 1, "", "set_trigger_mode"], [4, 3, 1, "", "shut_down"], [4, 3, 1, "", "start_acquisition"], [4, 2, 1, "", "verbose"], [4, 3, 1, "", "wait_for_acquisition"]], "qcodes_contrib_drivers.drivers.Attocube": [[5, 0, 0, "-", "ANC300"], [5, 0, 0, "-", "ANC300sim"], [5, 0, 0, "-", "ANC350"], [6, 0, 0, "-", "ANC350Lib"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300": [[5, 1, 1, "", "ANC300"], [5, 1, 1, "", "Anc300Axis"], [5, 1, 1, "", "Anc300TriggerOut"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300": [[5, 3, 1, "", "ask_raw"], [5, 3, 1, "", "close"], [5, 3, 1, "", "getall"], [5, 3, 1, "", "stopall"], [5, 3, 1, "", "version"], [5, 3, 1, "", "write_raw"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis": [[5, 3, 1, "", "__init__"], [5, 2, 1, "", "ac"], [5, 2, 1, "", "amplitude"], [5, 2, 1, "", "dc"], [5, 2, 1, "", "filter"], [5, 2, 1, "", "frequency"], [5, 2, 1, "", "mode"], [5, 2, 1, "", "move"], [5, 2, 1, "", "offset"], [5, 2, 1, "", "start"], [5, 3, 1, "", "stopMove"], [5, 2, 1, "", "triggerDown"], [5, 2, 1, "", "triggerUp"], [5, 2, 1, "", "voltage"], [5, 3, 1, "", "waitMove"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300TriggerOut": [[5, 3, 1, "", "__init__"], [5, 2, 1, "", "state"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300sim": [[5, 1, 1, "", "MockVisa"], [5, 1, 1, "", "MockVisaHandle"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisa": [[5, 3, 1, "", "set_address"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle": [[5, 3, 1, "", "ask"], [5, 3, 1, "", "clear"], [5, 3, 1, "", "close"], [5, 2, 1, "", "cmddef"], [5, 3, 1, "", "query"], [5, 3, 1, "", "read"], [5, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350": [[5, 1, 1, "", "ANC350"], [5, 1, 1, "", "Anc350Axis"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350": [[5, 3, 1, "", "close"], [5, 3, 1, "", "get_idn"], [5, 3, 1, "", "save_params"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis": [[5, 2, 1, "", "actuator"], [5, 2, 1, "", "actuator_name"], [5, 2, 1, "", "amplitude"], [5, 2, 1, "", "capacitance"], [5, 3, 1, "", "disable_auto_move"], [5, 3, 1, "", "enable_auto_move"], [5, 2, 1, "", "frequency"], [5, 3, 1, "", "multiple_steps"], [5, 2, 1, "", "position"], [5, 3, 1, "", "single_step"], [5, 3, 1, "", "start_continuous_move"], [5, 2, 1, "", "status"], [5, 3, 1, "", "stop_continuous_move"], [5, 2, 1, "", "target_position"], [5, 2, 1, "", "target_range"], [5, 2, 1, "", "voltage"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib": [[6, 1, 1, "", "ANC350LibActuatorType"], [6, 1, 1, "", "ANC350LibAmplitudeControlMode"], [6, 1, 1, "", "ANC350LibDeviceType"], [6, 4, 1, "", "ANC350LibError"], [6, 1, 1, "", "ANC350LibExternalTriggerMode"], [6, 1, 1, "", "ANC350LibSignalEdge"], [6, 1, 1, "", "ANC350LibTriggerInputMode"], [6, 1, 1, "", "ANC350LibTriggerOutputMode"], [6, 1, 1, "", "ANC350LibTriggerPolarity"], [6, 1, 1, "", "ANC350v3Lib"], [6, 4, 1, "", "ANC350v3LibError"], [6, 1, 1, "", "ANC350v4Lib"], [6, 0, 0, "-", "interface"], [6, 0, 0, "-", "v3"], [6, 0, 0, "-", "v4"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType": [[6, 2, 1, "", "Goniometer"], [6, 2, 1, "", "Linear"], [6, 2, 1, "", "Rotator"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode": [[6, 2, 1, "", "Amplitude"], [6, 2, 1, "", "Speed"], [6, 2, 1, "", "StepSize"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType": [[6, 2, 1, "", "Fps"], [6, 2, 1, "", "Nothing"], [6, 2, 1, "", "Num"], [6, 2, 1, "", "Res"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError": [[6, 2, 1, "", "SUCCESS_CODES"], [6, 2, 1, "", "WARNING_CODES"], [6, 3, 1, "", "__init__"], [6, 3, 1, "", "check_error"], [6, 2, 1, "", "code"], [6, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode": [[6, 2, 1, "", "Disable"], [6, 2, 1, "", "Quadrature"], [6, 2, 1, "", "Trigger"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibSignalEdge": [[6, 2, 1, "", "Falling"], [6, 2, 1, "", "Rising"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode": [[6, 2, 1, "", "Coarse"], [6, 2, 1, "", "Disable"], [6, 2, 1, "", "Quadratur"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode": [[6, 2, 1, "", "Disable"], [6, 2, 1, "", "IcHaus"], [6, 2, 1, "", "Position"], [6, 2, 1, "", "Quadratur"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerPolarity": [[6, 2, 1, "", "High"], [6, 2, 1, "", "Low"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib": [[6, 2, 1, "", "DEFAULT_PATH_TO_DLL"], [6, 3, 1, "", "__init__"], [6, 3, 1, "", "configure_a_quad_b_in"], [6, 3, 1, "", "configure_a_quad_b_out"], [6, 3, 1, "", "configure_duty_cycle"], [6, 3, 1, "", "configure_ext_trigger"], [6, 3, 1, "", "configure_nsl_trigger"], [6, 3, 1, "", "configure_nsl_trigger_axis"], [6, 3, 1, "", "configure_rng_trigger"], [6, 3, 1, "", "configure_rng_trigger_eps"], [6, 3, 1, "", "configure_rng_trigger_pol"], [6, 3, 1, "", "connect"], [6, 3, 1, "", "disconnect"], [6, 3, 1, "", "discover"], [6, 3, 1, "", "enable_ref_auto_reset"], [6, 3, 1, "", "enable_ref_auto_update"], [6, 3, 1, "", "enable_sensor"], [6, 3, 1, "", "get_actuator_name"], [6, 3, 1, "", "get_actuator_type"], [6, 3, 1, "", "get_amplitude"], [6, 3, 1, "", "get_axis_status"], [6, 3, 1, "", "get_device_config"], [6, 3, 1, "", "get_device_info"], [6, 3, 1, "", "get_firmware_version"], [6, 3, 1, "", "get_frequency"], [6, 3, 1, "", "get_position"], [6, 3, 1, "", "get_ref_position"], [6, 3, 1, "", "measure_capacitance"], [6, 3, 1, "", "move_reference"], [6, 3, 1, "", "reset_position"], [6, 3, 1, "", "save_params"], [6, 3, 1, "", "select_actuator"], [6, 3, 1, "", "set_amplitude"], [6, 3, 1, "", "set_axis_output"], [6, 3, 1, "", "set_dc_voltage"], [6, 3, 1, "", "set_frequency"], [6, 3, 1, "", "set_target_position"], [6, 3, 1, "", "set_target_range"], [6, 3, 1, "", "start_auto_move"], [6, 3, 1, "", "start_continuous_move"], [6, 3, 1, "", "start_single_step"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError": [[6, 3, 1, "", "__init__"], [6, 2, 1, "", "code"], [6, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib": [[6, 2, 1, "", "DEFAULT_PATH_TO_DLL"], [6, 3, 1, "", "__init__"], [6, 3, 1, "", "get_dc_voltage"], [6, 3, 1, "", "get_lut_name"], [6, 3, 1, "", "load_lut_file"], [6, 3, 1, "", "register_external_ip"], [6, 3, 1, "", "set_target_ground"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface": [[6, 1, 1, "", "ANC350LibActuatorType"], [6, 1, 1, "", "ANC350LibAmplitudeControlMode"], [6, 1, 1, "", "ANC350LibDeviceType"], [6, 4, 1, "", "ANC350LibError"], [6, 1, 1, "", "ANC350LibExternalTriggerMode"], [6, 1, 1, "", "ANC350LibSignalEdge"], [6, 1, 1, "", "ANC350LibTriggerInputMode"], [6, 1, 1, "", "ANC350LibTriggerOutputMode"], [6, 1, 1, "", "ANC350LibTriggerPolarity"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType": [[6, 2, 1, "", "Goniometer"], [6, 2, 1, "", "Linear"], [6, 2, 1, "", "Rotator"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode": [[6, 2, 1, "", "Amplitude"], [6, 2, 1, "", "Speed"], [6, 2, 1, "", "StepSize"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType": [[6, 2, 1, "", "Fps"], [6, 2, 1, "", "Nothing"], [6, 2, 1, "", "Num"], [6, 2, 1, "", "Res"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError": [[6, 2, 1, "", "SUCCESS_CODES"], [6, 2, 1, "", "WARNING_CODES"], [6, 3, 1, "", "__init__"], [6, 3, 1, "", "check_error"], [6, 2, 1, "", "code"], [6, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode": [[6, 2, 1, "", "Disable"], [6, 2, 1, "", "Quadrature"], [6, 2, 1, "", "Trigger"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibSignalEdge": [[6, 2, 1, "", "Falling"], [6, 2, 1, "", "Rising"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode": [[6, 2, 1, "", "Coarse"], [6, 2, 1, "", "Disable"], [6, 2, 1, "", "Quadratur"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode": [[6, 2, 1, "", "Disable"], [6, 2, 1, "", "IcHaus"], [6, 2, 1, "", "Position"], [6, 2, 1, "", "Quadratur"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerPolarity": [[6, 2, 1, "", "High"], [6, 2, 1, "", "Low"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3": [[6, 1, 1, "", "ANC350LibActuatorType"], [6, 1, 1, "", "ANC350LibDeviceType"], [6, 4, 1, "", "ANC350LibError"], [6, 1, 1, "", "ANC350LibExternalTriggerMode"], [6, 1, 1, "", "ANC350LibTriggerPolarity"], [6, 1, 1, "", "ANC350v3Lib"], [6, 4, 1, "", "ANC350v3LibError"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType": [[6, 2, 1, "", "Goniometer"], [6, 2, 1, "", "Linear"], [6, 2, 1, "", "Rotator"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType": [[6, 2, 1, "", "Fps"], [6, 2, 1, "", "Nothing"], [6, 2, 1, "", "Num"], [6, 2, 1, "", "Res"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError": [[6, 2, 1, "", "SUCCESS_CODES"], [6, 2, 1, "", "WARNING_CODES"], [6, 3, 1, "", "__init__"], [6, 3, 1, "", "check_error"], [6, 2, 1, "", "code"], [6, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode": [[6, 2, 1, "", "Disable"], [6, 2, 1, "", "Quadrature"], [6, 2, 1, "", "Trigger"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibTriggerPolarity": [[6, 2, 1, "", "High"], [6, 2, 1, "", "Low"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib": [[6, 2, 1, "", "DEFAULT_PATH_TO_DLL"], [6, 3, 1, "", "__init__"], [6, 3, 1, "", "configure_a_quad_b_in"], [6, 3, 1, "", "configure_a_quad_b_out"], [6, 3, 1, "", "configure_duty_cycle"], [6, 3, 1, "", "configure_ext_trigger"], [6, 3, 1, "", "configure_nsl_trigger"], [6, 3, 1, "", "configure_nsl_trigger_axis"], [6, 3, 1, "", "configure_rng_trigger"], [6, 3, 1, "", "configure_rng_trigger_eps"], [6, 3, 1, "", "configure_rng_trigger_pol"], [6, 3, 1, "", "connect"], [6, 3, 1, "", "disconnect"], [6, 3, 1, "", "discover"], [6, 3, 1, "", "enable_ref_auto_reset"], [6, 3, 1, "", "enable_ref_auto_update"], [6, 3, 1, "", "enable_sensor"], [6, 3, 1, "", "get_actuator_name"], [6, 3, 1, "", "get_actuator_type"], [6, 3, 1, "", "get_amplitude"], [6, 3, 1, "", "get_axis_status"], [6, 3, 1, "", "get_device_config"], [6, 3, 1, "", "get_device_info"], [6, 3, 1, "", "get_firmware_version"], [6, 3, 1, "", "get_frequency"], [6, 3, 1, "", "get_position"], [6, 3, 1, "", "get_ref_position"], [6, 3, 1, "", "measure_capacitance"], [6, 3, 1, "", "move_reference"], [6, 3, 1, "", "reset_position"], [6, 3, 1, "", "save_params"], [6, 3, 1, "", "select_actuator"], [6, 3, 1, "", "set_amplitude"], [6, 3, 1, "", "set_axis_output"], [6, 3, 1, "", "set_dc_voltage"], [6, 3, 1, "", "set_frequency"], [6, 3, 1, "", "set_target_position"], [6, 3, 1, "", "set_target_range"], [6, 3, 1, "", "start_auto_move"], [6, 3, 1, "", "start_continuous_move"], [6, 3, 1, "", "start_single_step"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError": [[6, 3, 1, "", "__init__"], [6, 2, 1, "", "code"], [6, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4": [[6, 1, 1, "", "ANC350LibActuatorType"], [6, 1, 1, "", "ANC350LibDeviceType"], [6, 4, 1, "", "ANC350LibError"], [6, 1, 1, "", "ANC350LibExternalTriggerMode"], [6, 1, 1, "", "ANC350LibTriggerPolarity"], [6, 4, 1, "", "ANC350v3LibError"], [6, 1, 1, "", "ANC350v4Lib"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType": [[6, 2, 1, "", "Goniometer"], [6, 2, 1, "", "Linear"], [6, 2, 1, "", "Rotator"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType": [[6, 2, 1, "", "Fps"], [6, 2, 1, "", "Nothing"], [6, 2, 1, "", "Num"], [6, 2, 1, "", "Res"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError": [[6, 2, 1, "", "SUCCESS_CODES"], [6, 2, 1, "", "WARNING_CODES"], [6, 3, 1, "", "__init__"], [6, 3, 1, "", "check_error"], [6, 2, 1, "", "code"], [6, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode": [[6, 2, 1, "", "Disable"], [6, 2, 1, "", "Quadrature"], [6, 2, 1, "", "Trigger"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibTriggerPolarity": [[6, 2, 1, "", "High"], [6, 2, 1, "", "Low"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError": [[6, 3, 1, "", "__init__"], [6, 2, 1, "", "code"], [6, 2, 1, "", "message"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib": [[6, 2, 1, "", "DEFAULT_PATH_TO_DLL"], [6, 3, 1, "", "__init__"], [6, 3, 1, "", "get_dc_voltage"], [6, 3, 1, "", "get_lut_name"], [6, 3, 1, "", "load_lut_file"], [6, 3, 1, "", "register_external_ip"], [6, 3, 1, "", "set_target_ground"]], "qcodes_contrib_drivers.drivers.Aviosys": [[7, 0, 0, "-", "IP_Power_9258S"]], "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S": [[7, 1, 1, "", "Aviosys_IP_Power_9258S"], [7, 1, 1, "", "PowerChannel"]], "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.Aviosys_IP_Power_9258S": [[7, 2, 1, "", "address"], [7, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.PowerChannel": [[7, 2, 1, "", "CHANNEL_IDS"], [7, 2, 1, "", "CHANNEL_NAMES"]], "qcodes_contrib_drivers.drivers.Bilt": [[8, 0, 0, "-", "ITest"]], "qcodes_contrib_drivers.drivers.Bilt.ITest": [[8, 1, 1, "", "ITest"], [8, 1, 1, "", "iTestChannel"], [8, 1, 1, "", "iTestMultiChannelParameter"]], "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest": [[8, 3, 1, "", "__init__"], [8, 3, 1, "", "chan_to_ic"], [8, 3, 1, "", "chan_to_id"]], "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel": [[8, 3, 1, "", "__init__"], [8, 3, 1, "", "start"], [8, 3, 1, "", "stop"]], "qcodes_contrib_drivers.drivers.BlueFors": [[9, 0, 0, "-", "BlueFors"]], "qcodes_contrib_drivers.drivers.BlueFors.BlueFors": [[9, 1, 1, "", "BlueFors"]], "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors": [[9, 3, 1, "", "__init__"], [9, 3, 1, "", "get_pressure"], [9, 3, 1, "", "get_temperature"]], "qcodes_contrib_drivers.drivers.CopperMountain": [[10, 0, 0, "-", "M5180"], [10, 0, 0, "-", "S5048"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180": [[10, 1, 1, "", "FrequencySweepMagPhase"], [10, 1, 1, "", "M5180"], [10, 1, 1, "", "PointMagPhase"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase": [[10, 3, 1, "", "__init__"], [10, 3, 1, "", "get_raw"], [10, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180": [[10, 3, 1, "", "__init__"], [10, 3, 1, "", "get_s"], [10, 3, 1, "", "reset_averages"], [10, 3, 1, "", "update_lin_traces"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointMagPhase": [[10, 3, 1, "", "__init__"], [10, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.CopperMountain.S5048": [[10, 5, 1, "", "CMTIntParser"], [10, 1, 1, "", "CMTS5048"], [10, 1, 1, "", "CMTS5048Trace"], [10, 4, 1, "", "TraceNotReady"]], "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048": [[10, 3, 1, "", "invalidate_trace"], [10, 3, 1, "", "reset"], [10, 3, 1, "", "run_N_times"], [10, 3, 1, "", "run_continously"], [10, 3, 1, "", "startup"]], "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048Trace": [[10, 3, 1, "", "get_raw"], [10, 3, 1, "", "prepare_trace"]], "qcodes_contrib_drivers.drivers.Cryocon": [[11, 0, 0, "-", "cryocon_26"]], "qcodes_contrib_drivers.drivers.Cryocon.cryocon_26": [[11, 1, 1, "", "Cryocon_26"]], "qcodes_contrib_drivers.drivers.Cryogenic": [[12, 0, 0, "-", "CryogenicSMS120C"]], "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C": [[12, 1, 1, "", "CryogenicSMS120C"]], "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C": [[12, 2, 1, "", "default_current_ramp_limit"], [12, 2, 1, "", "default_max_current_ramp_limit"], [12, 3, 1, "", "get_idn"], [12, 3, 1, "", "query"]], "qcodes_contrib_drivers.drivers.ERAInstruments": [[13, 0, 0, "-", "erasynth"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth": [[13, 1, 1, "", "ERASynth"], [13, 1, 1, "", "ERASynthBase"], [13, 1, 1, "", "ERASynthPlus"], [13, 1, 1, "", "ERASynthPlusPlus"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynth": [[13, 2, 1, "", "reference_tcxo_ocxo"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase": [[13, 3, 1, "", "__init__"], [13, 3, 1, "", "ask"], [13, 3, 1, "", "ask_raw"], [13, 3, 1, "", "clear_read_buffer"], [13, 2, 1, "", "current"], [13, 2, 1, "", "debug_messages_en"], [13, 2, 1, "", "embedded_version"], [13, 3, 1, "", "esp8266_upload_mode"], [13, 3, 1, "", "factory_reset"], [13, 3, 1, "", "get_configuration"], [13, 3, 1, "", "get_diagnostic_status"], [13, 3, 1, "", "get_idn"], [13, 2, 1, "", "modulation_am_depth"], [13, 2, 1, "", "modulation_en"], [13, 2, 1, "", "modulation_fm_deviation"], [13, 2, 1, "", "modulation_freq"], [13, 2, 1, "", "modulation_pulse_period"], [13, 2, 1, "", "modulation_pulse_width"], [13, 2, 1, "", "modulation_signal_waveform"], [13, 2, 1, "", "modulation_source"], [13, 2, 1, "", "modulation_type"], [13, 3, 1, "", "off"], [13, 3, 1, "", "on"], [13, 2, 1, "", "pll_lmx1_status"], [13, 2, 1, "", "pll_lmx2_status"], [13, 2, 1, "", "pll_xtal_status"], [13, 2, 1, "", "power"], [13, 3, 1, "", "preset"], [13, 3, 1, "", "print_pyvisa_resources"], [13, 2, 1, "", "ref_osc_source"], [13, 3, 1, "", "run_self_test"], [13, 2, 1, "", "status"], [13, 2, 1, "", "sweep_dwell"], [13, 2, 1, "", "sweep_en"], [13, 2, 1, "", "sweep_trigger"], [13, 2, 1, "", "synthesizer_mode"], [13, 2, 1, "", "temperature"], [13, 2, 1, "", "voltage"], [13, 2, 1, "", "wifi_gateway_address"], [13, 2, 1, "", "wifi_hotspot_password"], [13, 2, 1, "", "wifi_hotspot_ssid"], [13, 2, 1, "", "wifi_ip_address"], [13, 2, 1, "", "wifi_mode"], [13, 3, 1, "", "wifi_off"], [13, 3, 1, "", "wifi_on"], [13, 2, 1, "", "wifi_rssi"], [13, 2, 1, "", "wifi_station_password"], [13, 2, 1, "", "wifi_station_ssid"], [13, 2, 1, "", "wifi_subnet_address"], [13, 3, 1, "", "write"], [13, 3, 1, "", "write_raw"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlus": [[13, 2, 1, "", "reference_tcxo_ocxo"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlusPlus": [[13, 2, 1, "", "reference_tcxo_ocxo"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave": [[14, 0, 0, "-", "GM349"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349": [[14, 1, 1, "", "GM349"], [14, 1, 1, "", "GM349Attenuation"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349": [[14, 3, 1, "", "pin_map"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349Attenuation": [[14, 3, 1, "", "get_raw"], [14, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.Gentec": [[15, 0, 0, "-", "Gentec_Maestro"]], "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro": [[15, 1, 1, "", "Gentec_Maestro"]], "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro": [[15, 3, 1, "", "clear_zero_offset"], [15, 2, 1, "", "firmware_version"], [15, 3, 1, "", "get_idn"], [15, 2, 1, "", "model"], [15, 3, 1, "", "set_zero_offset"]], "qcodes_contrib_drivers.drivers.Holzworth": [[16, 0, 0, "-", "HS900"], [16, 0, 0, "-", "HS9008B"]], "qcodes_contrib_drivers.drivers.Holzworth.HS900": [[16, 1, 1, "", "HS900"], [16, 1, 1, "", "HS900Channel"]], "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900": [[16, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900Channel": [[16, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Holzworth.HS9008B": [[16, 1, 1, "", "HS9008B"], [16, 1, 1, "", "HS9008BChannel"]], "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008B": [[16, 3, 1, "", "__init__"], [16, 3, 1, "", "set_address"]], "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008BChannel": [[16, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Keysight": [[17, 0, 0, "-", "Keysight_E36313A"], [17, 0, 0, "-", "Keysight_E8267D"], [17, 0, 0, "-", "Keysight_J7211"], [17, 0, 0, "-", "Keysight_M3201A"], [17, 0, 0, "-", "Keysight_M3300A"], [17, 0, 0, "-", "M3202A"], [18, 0, 0, "-", "SD_common"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A": [[17, 1, 1, "", "E36313A"], [17, 1, 1, "", "E36313AChannel"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313A": [[17, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313AChannel": [[17, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D": [[17, 1, 1, "", "Keysight_E8267D"], [17, 5, 1, "", "parse_on_off"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D": [[17, 3, 1, "", "deg_to_rad"], [17, 3, 1, "", "off"], [17, 3, 1, "", "on"], [17, 3, 1, "", "rad_to_deg"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211": [[17, 1, 1, "", "Keysight_J7211"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A": [[17, 1, 1, "", "Keysight_M3201A"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A": [[17, 1, 1, "", "M3300A_AWG"], [17, 1, 1, "", "M3300A_DIG"]], "qcodes_contrib_drivers.drivers.Keysight.M3202A": [[17, 1, 1, "", "M3202A"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common": [[18, 0, 0, "-", "SD_AWG"], [18, 0, 0, "-", "SD_AWG_Async"], [18, 0, 0, "-", "SD_DIG"], [18, 0, 0, "-", "SD_Module"], [18, 0, 0, "-", "memory_manager"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG": [[18, 1, 1, "", "SD_AWG"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG": [[18, 3, 1, "", "awg_config_external_trigger"], [18, 3, 1, "", "awg_flush"], [18, 3, 1, "", "awg_from_array"], [18, 3, 1, "", "awg_from_file"], [18, 3, 1, "", "awg_is_running"], [18, 3, 1, "", "awg_jump_next_waveform"], [18, 3, 1, "", "awg_pause"], [18, 3, 1, "", "awg_pause_multiple"], [18, 3, 1, "", "awg_queue_config"], [18, 3, 1, "", "awg_queue_waveform"], [18, 3, 1, "", "awg_resume"], [18, 3, 1, "", "awg_resume_multiple"], [18, 3, 1, "", "awg_start"], [18, 3, 1, "", "awg_start_multiple"], [18, 3, 1, "", "awg_stop"], [18, 3, 1, "", "awg_stop_multiple"], [18, 3, 1, "", "awg_trigger"], [18, 3, 1, "", "awg_trigger_multiple"], [18, 3, 1, "", "config_amplitude_modulation"], [18, 3, 1, "", "config_angle_modulation"], [18, 3, 1, "", "config_clock_io"], [18, 3, 1, "", "config_fpga_trigger"], [18, 3, 1, "", "config_trigger_io"], [18, 3, 1, "", "convert_prescaler_to_sample_rate"], [18, 3, 1, "", "convert_sample_rate_to_prescaler"], [18, 3, 1, "", "flush_waveform"], [18, 3, 1, "", "get_clock_frequency"], [18, 3, 1, "", "get_clock_sync_frequency"], [18, 3, 1, "", "get_trigger_io"], [18, 3, 1, "", "get_waveform_status"], [18, 3, 1, "", "get_waveform_type"], [18, 3, 1, "", "load_fpga_image"], [18, 3, 1, "", "load_waveform"], [18, 3, 1, "", "load_waveform_int16"], [18, 3, 1, "", "new_waveform_from_double"], [18, 3, 1, "", "new_waveform_from_file"], [18, 3, 1, "", "new_waveform_from_int"], [18, 3, 1, "", "off"], [18, 3, 1, "", "read_fpga"], [18, 3, 1, "", "read_fpga_array"], [18, 3, 1, "", "reload_waveform"], [18, 3, 1, "", "reload_waveform_int16"], [18, 3, 1, "", "reset_channel_phase"], [18, 3, 1, "", "reset_clock_phase"], [18, 3, 1, "", "reset_multiple_channel_phase"], [18, 3, 1, "", "set_channel_amplitude"], [18, 3, 1, "", "set_channel_frequency"], [18, 3, 1, "", "set_channel_offset"], [18, 3, 1, "", "set_channel_phase"], [18, 3, 1, "", "set_channel_wave_shape"], [18, 3, 1, "", "set_clock_frequency"], [18, 3, 1, "", "set_digital_filter_mode"], [18, 3, 1, "", "set_iq_modulation"], [18, 3, 1, "", "set_marker_config"], [18, 3, 1, "", "set_trigger_io"], [18, 3, 1, "", "write_fpga"], [18, 3, 1, "", "write_fpga_array"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async": [[18, 1, 1, "", "SD_AWG_Async"], [18, 1, 1, "", "Task"], [18, 1, 1, "", "WaveformReference"], [18, 5, 1, "", "switchable"], [18, 5, 1, "", "threaded"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async": [[18, 3, 1, "", "asynchronous"], [18, 3, 1, "", "awg_flush"], [18, 3, 1, "", "awg_from_array"], [18, 3, 1, "", "awg_from_file"], [18, 3, 1, "", "awg_queue_waveform"], [18, 3, 1, "", "close"], [18, 3, 1, "", "flush_waveform"], [18, 3, 1, "", "load_waveform"], [18, 3, 1, "", "load_waveform_int16"], [18, 3, 1, "", "reload_waveform"], [18, 3, 1, "", "reload_waveform_int16"], [18, 3, 1, "", "set_asynchronous"], [18, 3, 1, "", "set_waveform_limit"], [18, 3, 1, "", "upload_waveform"], [18, 3, 1, "", "uploader_ready"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task": [[18, 6, 1, "", "result"], [18, 3, 1, "", "run"], [18, 2, 1, "", "verbose"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference": [[18, 6, 1, "", "awg_name"], [18, 3, 1, "", "is_uploaded"], [18, 3, 1, "", "release"], [18, 3, 1, "", "wait_uploaded"], [18, 6, 1, "", "wave_number"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG": [[18, 1, 1, "", "SD_DIG"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG": [[18, 3, 1, "", "__init__"], [18, 3, 1, "", "daq_flush"], [18, 3, 1, "", "daq_flush_multiple"], [18, 3, 1, "", "daq_read"], [18, 3, 1, "", "daq_start"], [18, 3, 1, "", "daq_start_multiple"], [18, 3, 1, "", "daq_stop"], [18, 3, 1, "", "daq_stop_multiple"], [18, 3, 1, "", "daq_trigger"], [18, 3, 1, "", "daq_trigger_multiple"], [18, 3, 1, "", "get_coupling"], [18, 3, 1, "", "get_full_scale"], [18, 3, 1, "", "get_impedance"], [18, 3, 1, "", "get_prescaler"], [18, 3, 1, "", "get_trigger_io"], [18, 3, 1, "", "get_trigger_mode"], [18, 3, 1, "", "get_trigger_threshold"], [18, 3, 1, "", "reset_clock_phase"], [18, 3, 1, "", "set_analog_trigger_mask"], [18, 3, 1, "", "set_clksys_frequency"], [18, 3, 1, "", "set_coupling"], [18, 3, 1, "", "set_daq_trigger_delay"], [18, 3, 1, "", "set_daq_trigger_mode"], [18, 3, 1, "", "set_digital_trigger_mode"], [18, 3, 1, "", "set_digital_trigger_source"], [18, 3, 1, "", "set_ext_trigger_behaviour"], [18, 3, 1, "", "set_ext_trigger_source"], [18, 3, 1, "", "set_full_scale"], [18, 3, 1, "", "set_impedance"], [18, 3, 1, "", "set_n_cycles"], [18, 3, 1, "", "set_n_points"], [18, 3, 1, "", "set_points_per_cycle"], [18, 3, 1, "", "set_prescaler"], [18, 3, 1, "", "set_timeout"], [18, 3, 1, "", "set_trigger_io"], [18, 3, 1, "", "set_trigger_mode"], [18, 3, 1, "", "set_trigger_threshold"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module": [[18, 1, 1, "", "SD_Module"], [18, 5, 1, "", "result_parser"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module": [[18, 3, 1, "", "close"], [18, 3, 1, "", "close_soft"], [18, 3, 1, "", "get_chassis"], [18, 3, 1, "", "get_firmware_version"], [18, 3, 1, "", "get_fpga_pc_port"], [18, 3, 1, "", "get_hardware_version"], [18, 3, 1, "", "get_hvi_register"], [18, 3, 1, "", "get_module_count"], [18, 3, 1, "", "get_open"], [18, 3, 1, "", "get_product_name"], [18, 3, 1, "", "get_product_name_by_index"], [18, 3, 1, "", "get_product_name_by_slot"], [18, 3, 1, "", "get_pxi_trigger"], [18, 3, 1, "", "get_serial_number"], [18, 3, 1, "", "get_serial_number_by_index"], [18, 3, 1, "", "get_serial_number_by_slot"], [18, 3, 1, "", "get_slot"], [18, 3, 1, "", "get_status"], [18, 3, 1, "", "get_type"], [18, 3, 1, "", "get_type_by_index"], [18, 3, 1, "", "get_type_by_slot"], [18, 3, 1, "", "load_fpga_image"], [18, 3, 1, "", "open_with_serial_number"], [18, 3, 1, "", "open_with_slot"], [18, 3, 1, "", "run_self_test"], [18, 3, 1, "", "set_fpga_pc_port"], [18, 3, 1, "", "set_hvi_register"], [18, 3, 1, "", "set_pxi_trigger"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager": [[18, 1, 1, "", "MemoryManager"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager": [[18, 1, 1, "", "AllocatedSlot"], [18, 3, 1, "", "allocate"], [18, 3, 1, "", "allocation_state"], [18, 3, 1, "", "get_uninitialized_slots"], [18, 3, 1, "", "mem_usage"], [18, 2, 1, "", "memory_sizes"], [18, 3, 1, "", "release"], [18, 3, 1, "", "set_waveform_limit"], [18, 2, 1, "", "verbose"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot": [[18, 2, 1, "", "allocation_ref"], [18, 2, 1, "", "memory_manager"], [18, 2, 1, "", "number"], [18, 3, 1, "", "release"]], "qcodes_contrib_drivers.drivers.Lakeshore": [[19, 0, 0, "-", "Model_331"], [19, 0, 0, "-", "Model_625"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_331": [[19, 1, 1, "", "Model_331"], [19, 1, 1, "", "SensorChannel"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_331.SensorChannel": [[19, 2, 1, "", "channel"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_625": [[19, 1, 1, "", "Lakeshore625"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_625.Lakeshore625": [[19, 3, 1, "", "set_field"]], "qcodes_contrib_drivers.drivers.NationalInstruments": [[20, 0, 0, "-", "DAQ"], [20, 0, 0, "-", "PXIe_2597"], [20, 0, 0, "-", "PXIe_5654"], [20, 0, 0, "-", "RFSG"], [20, 0, 0, "-", "Switch"], [20, 0, 0, "-", "dll_wrapper"], [20, 0, 0, "-", "ni_dll_instrument"], [20, 0, 0, "-", "visa_types"]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ": [[20, 1, 1, "", "DAQAnalogInputVoltages"], [20, 1, 1, "", "DAQAnalogInputs"], [20, 1, 1, "", "DAQAnalogOutputVoltage"], [20, 1, 1, "", "DAQAnalogOutputs"], [20, 1, 1, "", "DAQDigitalOutputState"], [20, 1, 1, "", "DAQDigitalOutputs"]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogInputVoltages": [[20, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputVoltage": [[20, 3, 1, "", "get_raw"], [20, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQDigitalOutputState": [[20, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597": [[20, 1, 1, "", "NI_PXIe_2597"]], "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654": [[20, 2, 1, "", "NI_PXIe_5654"], [20, 1, 1, "", "NationalInstruments_PXIe_5654"]], "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG": [[20, 2, 1, "", "NI_RFSG"], [20, 1, 1, "", "NationalInstruments_RFSG"]], "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG": [[20, 3, 1, "", "abort"], [20, 2, 1, "", "dll_path"], [20, 6, 1, "", "firmware"], [20, 3, 1, "", "get_idn"], [20, 3, 1, "", "initiate"], [20, 6, 1, "", "model"], [20, 6, 1, "", "serial"], [20, 6, 1, "", "vendor"]], "qcodes_contrib_drivers.drivers.NationalInstruments.Switch": [[20, 1, 1, "", "NI_Switch"], [20, 1, 1, "", "SwitchChannel"]], "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch": [[20, 3, 1, "", "close"], [20, 3, 1, "", "disconnect_all"], [20, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel": [[20, 3, 1, "", "connect_to"], [20, 3, 1, "", "disconnect_from"], [20, 3, 1, "", "disconnect_from_all"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper": [[20, 1, 1, "", "AttributeWrapper"], [20, 1, 1, "", "NIDLLWrapper"], [20, 1, 1, "", "NamedArgType"], [20, 5, 1, "", "c_str"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.AttributeWrapper": [[20, 2, 1, "", "dtype"], [20, 2, 1, "", "value"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper": [[20, 3, 1, "", "error_message"], [20, 3, 1, "", "get_attribute"], [20, 3, 1, "", "init"], [20, 3, 1, "", "set_attribute"], [20, 3, 1, "", "wrap_dll_function"], [20, 3, 1, "", "wrap_dll_function_checked"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NamedArgType": [[20, 2, 1, "", "argtype"], [20, 2, 1, "", "name"]], "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument": [[20, 1, 1, "", "NIDLLInstrument"]], "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument": [[20, 3, 1, "", "close"], [20, 3, 1, "", "get_attribute"], [20, 3, 1, "", "init"], [20, 3, 1, "", "reset"], [20, 3, 1, "", "set_attribute"]], "qcodes_contrib_drivers.drivers.Newport": [[21, 0, 0, "-", "AG_UC8"]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8": [[21, 1, 1, "", "Newport_AG_UC8"], [21, 1, 1, "", "Newport_AG_UC8_Axis"], [21, 1, 1, "", "Newport_AG_UC8_Channel"], [21, 4, 1, "", "Newport_AG_UC8_ErrorCode"], [21, 4, 1, "", "Newport_AG_UC8_Exception"]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8": [[21, 3, 1, "", "ask_channel"], [21, 2, 1, "", "command_delay"], [21, 2, 1, "", "default_timeout"], [21, 3, 1, "", "get_idn"], [21, 3, 1, "", "get_last_error"], [21, 3, 1, "", "reset"], [21, 2, 1, "", "reset_delay"], [21, 2, 1, "", "slow_command_timeout"], [21, 3, 1, "", "write"], [21, 3, 1, "", "write_channel"]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis": [[21, 2, 1, "", "SPEED_TABLE"], [21, 3, 1, "", "jog"], [21, 3, 1, "", "measure_position"], [21, 3, 1, "", "move_abs"], [21, 3, 1, "", "move_limit"], [21, 3, 1, "", "move_rel"], [21, 3, 1, "", "stop"], [21, 3, 1, "", "zero_position"]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Channel": [[21, 3, 1, "", "ask"], [21, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.Oxford": [[22, 0, 0, "-", "ILM200"], [22, 0, 0, "-", "IPS120"], [22, 0, 0, "-", "Triton"], [22, 0, 0, "-", "kelvinox"]], "qcodes_contrib_drivers.drivers.Oxford.ILM200": [[22, 1, 1, "", "OxfordInstruments_ILM200"]], "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200": [[22, 3, 1, "", "__init__"], [22, 3, 1, "", "close"], [22, 3, 1, "", "get_all"], [22, 3, 1, "", "get_idn"], [22, 3, 1, "", "local"], [22, 3, 1, "", "remote"], [22, 3, 1, "", "set_remote_status"], [22, 3, 1, "", "set_to_fast"], [22, 3, 1, "", "set_to_slow"]], "qcodes_contrib_drivers.drivers.Oxford.IPS120": [[22, 1, 1, "", "OxfordInstruments_IPS120"]], "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120": [[22, 3, 1, "", "__init__"], [22, 3, 1, "", "close"], [22, 3, 1, "", "examine"], [22, 3, 1, "", "get_all"], [22, 3, 1, "", "get_idn"], [22, 3, 1, "", "heater_off"], [22, 3, 1, "", "heater_on"], [22, 3, 1, "", "hold"], [22, 3, 1, "", "identify"], [22, 3, 1, "", "leave_persistent_mode"], [22, 3, 1, "", "local"], [22, 3, 1, "", "remote"], [22, 3, 1, "", "run_to_field"], [22, 3, 1, "", "run_to_field_wait"], [22, 3, 1, "", "set_persistent"], [22, 3, 1, "", "to_setpoint"], [22, 3, 1, "", "to_zero"]], "qcodes_contrib_drivers.drivers.Oxford.Triton": [[22, 1, 1, "", "Triton"]], "qcodes_contrib_drivers.drivers.Oxford.Triton.Triton": [[22, 3, 1, "", "__init__"], [22, 3, 1, "", "get_pressure"], [22, 3, 1, "", "get_temperature"], [22, 3, 1, "", "vcl2csv"]], "qcodes_contrib_drivers.drivers.Oxford.kelvinox": [[22, 1, 1, "", "OxfordInstruments_Kelvinox_IGH"]], "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH": [[22, 3, 1, "", "__init__"], [22, 3, 1, "", "close"], [22, 3, 1, "", "get_all"], [22, 3, 1, "", "get_idn"], [22, 3, 1, "", "identify"], [22, 3, 1, "", "local"], [22, 3, 1, "", "remote"], [22, 3, 1, "", "rotate_Nvalve"], [22, 3, 1, "", "set_mix_chamber_heater_mode"], [22, 3, 1, "", "set_mix_chamber_heater_power_range"]], "qcodes_contrib_drivers.drivers.QDevil": [[23, 0, 0, "-", "QDAC1"], [23, 0, 0, "-", "QDAC2"], [23, 0, 0, "-", "QDAC2_Array"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1": [[23, 1, 1, "", "Generator"], [23, 1, 1, "", "Mode"], [23, 1, 1, "", "QDac"], [23, 1, 1, "", "QDacChannel"], [23, 1, 1, "", "QDacMultiChannelParameter"], [23, 1, 1, "", "Waveform"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode": [[23, 3, 1, "", "get_label"], [23, 2, 1, "", "vhigh_ihigh"], [23, 2, 1, "", "vhigh_ilow"], [23, 2, 1, "", "vlow_ilow"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac": [[23, 3, 1, "", "__init__"], [23, 3, 1, "", "connect_message"], [23, 2, 1, "", "max_status_age"], [23, 3, 1, "", "print_overview"], [23, 3, 1, "", "print_slopes"], [23, 3, 1, "", "print_syncs"], [23, 3, 1, "", "ramp_voltages"], [23, 3, 1, "", "ramp_voltages_2d"], [23, 3, 1, "", "read"], [23, 3, 1, "", "reset"], [23, 3, 1, "", "snapshot_base"], [23, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacChannel": [[23, 3, 1, "", "__init__"], [23, 3, 1, "", "snapshot_base"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacMultiChannelParameter": [[23, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform": [[23, 2, 1, "", "all_waveforms"], [23, 2, 1, "", "sine"], [23, 2, 1, "", "square"], [23, 2, 1, "", "staircase"], [23, 2, 1, "", "triangle"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2": [[23, 1, 1, "", "Arrangement_Context"], [23, 1, 1, "", "Awg_Context"], [23, 1, 1, "", "List_Context"], [23, 1, 1, "", "Measurement_Context"], [23, 1, 1, "", "QDac2"], [23, 1, 1, "", "QDac2Channel"], [23, 1, 1, "", "QDac2ExternalTrigger"], [23, 1, 1, "", "QDac2Trigger_Context"], [23, 1, 1, "", "Sine_Context"], [23, 1, 1, "", "Square_Context"], [23, 1, 1, "", "Sweep_Context"], [23, 1, 1, "", "Trace_Context"], [23, 1, 1, "", "Triangle_Context"], [23, 1, 1, "", "Virtual_Sweep_Context"], [23, 5, 1, "", "comma_sequence_to_list"], [23, 5, 1, "", "comma_sequence_to_list_of_floats"], [23, 5, 1, "", "diff_matrix"], [23, 5, 1, "", "floats_to_comma_separated_list"], [23, 5, 1, "", "forward_and_back"], [23, 5, 1, "", "ints_to_comma_separated_list"], [23, 5, 1, "", "split_version_string_into_components"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context": [[23, 3, 1, "", "actual_voltages"], [23, 3, 1, "", "add_correction"], [23, 3, 1, "", "channel"], [23, 6, 1, "", "channel_numbers"], [23, 6, 1, "", "contact_names"], [23, 6, 1, "", "correction_matrix"], [23, 3, 1, "", "currents_A"], [23, 3, 1, "", "get_trigger_by_name"], [23, 3, 1, "", "initiate_correction"], [23, 3, 1, "", "leakage"], [23, 3, 1, "", "set_virtual_voltage"], [23, 3, 1, "", "set_virtual_voltages"], [23, 6, 1, "", "shape"], [23, 3, 1, "", "virtual_detune"], [23, 3, 1, "", "virtual_sweep"], [23, 3, 1, "", "virtual_sweep2d"], [23, 3, 1, "", "virtual_voltage"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context": [[23, 3, 1, "", "abort"], [23, 3, 1, "", "cycles_remaining"], [23, 3, 1, "", "end_marker"], [23, 3, 1, "", "period_end_marker"], [23, 3, 1, "", "period_start_marker"], [23, 3, 1, "", "start"], [23, 3, 1, "", "start_marker"], [23, 3, 1, "", "start_on"], [23, 3, 1, "", "start_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context": [[23, 3, 1, "", "append"], [23, 3, 1, "", "cycles_remaining"], [23, 3, 1, "", "points"], [23, 3, 1, "", "start"], [23, 3, 1, "", "values_V"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context": [[23, 3, 1, "", "abort"], [23, 3, 1, "", "available_A"], [23, 3, 1, "", "n_available"], [23, 3, 1, "", "n_cycles_remaining"], [23, 3, 1, "", "peek_A"], [23, 3, 1, "", "start"], [23, 3, 1, "", "start_on"], [23, 3, 1, "", "start_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2": [[23, 3, 1, "", "__init__"], [23, 3, 1, "", "allocate_trace"], [23, 3, 1, "", "allocate_trigger"], [23, 3, 1, "", "arrange"], [23, 3, 1, "", "ask"], [23, 3, 1, "", "channel"], [23, 3, 1, "", "clear"], [23, 3, 1, "", "clear_read_queue"], [23, 3, 1, "", "connect_external_trigger"], [23, 3, 1, "", "error"], [23, 3, 1, "", "errors"], [23, 3, 1, "", "free_all_triggers"], [23, 3, 1, "", "free_trigger"], [23, 3, 1, "", "get_recorded_scpi_commands"], [23, 3, 1, "", "mac"], [23, 3, 1, "", "n_channels"], [23, 3, 1, "", "n_errors"], [23, 3, 1, "", "n_external_inputs"], [23, 3, 1, "", "n_external_outputs"], [23, 3, 1, "", "n_triggers"], [23, 3, 1, "", "remove_traces"], [23, 3, 1, "", "reset"], [23, 3, 1, "", "start_all"], [23, 3, 1, "", "start_recording_scpi"], [23, 3, 1, "", "traces"], [23, 3, 1, "", "write"], [23, 3, 1, "", "write_floats"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel": [[23, 3, 1, "", "arbitrary_wave"], [23, 3, 1, "", "ask_channel"], [23, 3, 1, "", "clear_measurements"], [23, 3, 1, "", "dc_list"], [23, 3, 1, "", "dc_sweep"], [23, 3, 1, "", "measurement"], [23, 6, 1, "", "number"], [23, 3, 1, "", "output_mode"], [23, 3, 1, "", "sine_wave"], [23, 3, 1, "", "square_wave"], [23, 3, 1, "", "triangle_wave"], [23, 3, 1, "", "write"], [23, 3, 1, "", "write_channel"], [23, 3, 1, "", "write_channel_floats"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Trigger_Context": [[23, 6, 1, "", "value"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context": [[23, 3, 1, "", "abort"], [23, 3, 1, "", "cycles_remaining"], [23, 3, 1, "", "end_marker"], [23, 3, 1, "", "period_end_marker"], [23, 3, 1, "", "period_start_marker"], [23, 3, 1, "", "start"], [23, 3, 1, "", "start_marker"], [23, 3, 1, "", "start_on"], [23, 3, 1, "", "start_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context": [[23, 3, 1, "", "abort"], [23, 3, 1, "", "cycles_remaining"], [23, 3, 1, "", "end_marker"], [23, 3, 1, "", "period_end_marker"], [23, 3, 1, "", "period_start_marker"], [23, 3, 1, "", "start"], [23, 3, 1, "", "start_marker"], [23, 3, 1, "", "start_on"], [23, 3, 1, "", "start_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context": [[23, 3, 1, "", "cycles_remaining"], [23, 3, 1, "", "points"], [23, 3, 1, "", "start"], [23, 3, 1, "", "start_V"], [23, 3, 1, "", "stop_V"], [23, 3, 1, "", "time_s"], [23, 3, 1, "", "values_V"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context": [[23, 6, 1, "", "name"], [23, 6, 1, "", "size"], [23, 3, 1, "", "waveform"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context": [[23, 3, 1, "", "abort"], [23, 3, 1, "", "cycles_remaining"], [23, 3, 1, "", "end_marker"], [23, 3, 1, "", "period_end_marker"], [23, 3, 1, "", "period_start_marker"], [23, 3, 1, "", "start"], [23, 3, 1, "", "start_marker"], [23, 3, 1, "", "start_on"], [23, 3, 1, "", "start_on_external"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Virtual_Sweep_Context": [[23, 3, 1, "", "actual_values_V"], [23, 3, 1, "", "start"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array": [[23, 1, 1, "", "Array_Arrangement_Context"], [23, 1, 1, "", "QDac2_Array"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context": [[23, 3, 1, "", "channel"], [23, 6, 1, "", "contact_names"], [23, 3, 1, "", "currents_A"], [23, 3, 1, "", "leakage"], [23, 3, 1, "", "qdac_names"], [23, 3, 1, "", "set_virtual_voltages"], [23, 3, 1, "", "virtual_voltage"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array": [[23, 3, 1, "", "allocate_trigger"], [23, 3, 1, "", "arrange"], [23, 6, 1, "", "common_trigger_in"], [23, 3, 1, "", "connect_external_trigger"], [23, 6, 1, "", "controller"], [23, 6, 1, "", "names"], [23, 3, 1, "", "sync"], [23, 3, 1, "", "trigger"], [23, 6, 1, "", "trigger_out"]], "qcodes_contrib_drivers.drivers.QuTech": [[24, 0, 0, "-", "D4"], [24, 0, 0, "-", "D5a"], [24, 0, 0, "-", "F1d"], [24, 0, 0, "-", "IVVI"], [24, 0, 0, "-", "M2j"], [24, 0, 0, "-", "S5i"]], "qcodes_contrib_drivers.drivers.QuTech.D4": [[24, 1, 1, "", "D4"]], "qcodes_contrib_drivers.drivers.QuTech.D4.D4": [[24, 3, 1, "", "get_buffers_enabled"], [24, 3, 1, "", "get_filter_value"], [24, 3, 1, "", "get_mode"]], "qcodes_contrib_drivers.drivers.QuTech.D5a": [[24, 1, 1, "", "D5a"]], "qcodes_contrib_drivers.drivers.QuTech.D5a.D5a": [[24, 3, 1, "", "__init__"], [24, 3, 1, "", "set_dac_unit"]], "qcodes_contrib_drivers.drivers.QuTech.F1d": [[24, 1, 1, "", "F1d"]], "qcodes_contrib_drivers.drivers.QuTech.F1d.F1d": [[24, 3, 1, "", "get_remote_settings"]], "qcodes_contrib_drivers.drivers.QuTech.IVVI": [[24, 1, 1, "", "IVVI"]], "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI": [[24, 3, 1, "", "__init__"], [24, 3, 1, "", "adjust_parameter_validator"], [24, 3, 1, "", "ask"], [24, 2, 1, "", "dac_quata"], [24, 2, 1, "", "full_range"], [24, 3, 1, "", "get_all"], [24, 3, 1, "", "get_idn"], [24, 3, 1, "", "get_pol_dac"], [24, 2, 1, "", "half_range"], [24, 3, 1, "", "linspace"], [24, 3, 1, "", "read"], [24, 2, 1, "", "resolution"], [24, 3, 1, "", "round_dac"], [24, 3, 1, "", "set_dacs_zero"], [24, 3, 1, "", "set_parameter_bounds"], [24, 3, 1, "", "set_pol_dacrack"], [24, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.QuTech.M2j": [[24, 1, 1, "", "M2j"]], "qcodes_contrib_drivers.drivers.QuTech.M2j.M2j": [[24, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.QuTech.S5i": [[24, 1, 1, "", "S5i"]], "qcodes_contrib_drivers.drivers.QuTech.S5i.S5i": [[24, 3, 1, "", "optimize_for_frequency"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz": [[25, 0, 0, "-", "HMC8041"], [25, 0, 0, "-", "HMC8042"], [25, 0, 0, "-", "HMC8043"], [25, 0, 0, "-", "HMP2020"], [25, 0, 0, "-", "HMP2030"], [25, 0, 0, "-", "HMP4030"], [25, 0, 0, "-", "HMP4040"], [25, 0, 0, "-", "SMR40"], [25, 0, 0, "-", "SMW200A"], [25, 0, 0, "-", "SMW200Asim"], [25, 0, 0, "-", "ZVL13"], [26, 0, 0, "-", "private"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041": [[25, 1, 1, "", "RohdeSchwarzHMC8041"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042": [[25, 1, 1, "", "RohdeSchwarzHMC8042"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043": [[25, 1, 1, "", "RohdeSchwarzHMC8043"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020": [[25, 1, 1, "", "RohdeSchwarzHMP4040"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030": [[25, 1, 1, "", "RohdeSchwarzHMP4040"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030": [[25, 1, 1, "", "RohdeSchwarzHMP4030"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040": [[25, 1, 1, "", "RohdeSchwarzHMP4040"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40": [[25, 1, 1, "", "RohdeSchwarz_SMR40"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40": [[25, 3, 1, "", "do_get_frequency"], [25, 3, 1, "", "do_get_power"], [25, 3, 1, "", "do_get_pulse_delay"], [25, 3, 1, "", "do_get_status"], [25, 3, 1, "", "do_get_status_of_ALC"], [25, 3, 1, "", "do_get_status_of_modulation"], [25, 3, 1, "", "do_set_frequency"], [25, 3, 1, "", "do_set_power"], [25, 3, 1, "", "do_set_pulse_delay"], [25, 3, 1, "", "do_set_status"], [25, 3, 1, "", "do_set_status_of_ALC"], [25, 3, 1, "", "do_set_status_of_modulation"], [25, 3, 1, "", "get_all"], [25, 3, 1, "", "off"], [25, 3, 1, "", "off_modulation"], [25, 3, 1, "", "on"], [25, 3, 1, "", "on_modulation"], [25, 3, 1, "", "reset"], [25, 3, 1, "", "set_ext_trig"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A": [[25, 1, 1, "", "AmplitudeModulation"], [25, 1, 1, "", "FrequencyModulation"], [25, 1, 1, "", "IQChannel"], [25, 1, 1, "", "IQModulation"], [25, 1, 1, "", "LFOutputChannel"], [25, 1, 1, "", "LFOutputSweep"], [25, 1, 1, "", "OutputChannel"], [25, 1, 1, "", "OutputFrequencySweep"], [25, 1, 1, "", "OutputLevelSweep"], [25, 1, 1, "", "PhaseModulation"], [25, 1, 1, "", "PulseGenerator"], [25, 1, 1, "", "PulseModulation"], [25, 1, 1, "", "RohdeSchwarz_SMW200A"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation": [[25, 3, 1, "", "__init__"], [25, 2, 1, "", "coupling_mode"], [25, 2, 1, "", "depth"], [25, 2, 1, "", "deviation_ratio"], [25, 2, 1, "", "sensitivity"], [25, 2, 1, "", "source"], [25, 2, 1, "", "state"], [25, 2, 1, "", "total_depth"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation": [[25, 3, 1, "", "__init__"], [25, 2, 1, "", "coupling_mode"], [25, 2, 1, "", "deviation"], [25, 2, 1, "", "deviation_ratio"], [25, 2, 1, "", "mode"], [25, 2, 1, "", "sensitivity"], [25, 2, 1, "", "source"], [25, 2, 1, "", "state"], [25, 2, 1, "", "total_deviation"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel": [[25, 3, 1, "", "__init__"], [25, 2, 1, "", "coupling"], [25, 2, 1, "", "i_bias"], [25, 2, 1, "", "i_offset"], [25, 2, 1, "", "level"], [25, 2, 1, "", "mode"], [25, 2, 1, "", "q_bias"], [25, 2, 1, "", "q_offset"], [25, 2, 1, "", "state"], [25, 2, 1, "", "type"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation": [[25, 3, 1, "", "__init__"], [25, 2, 1, "", "crest_factor"], [25, 2, 1, "", "gain"], [25, 2, 1, "", "source"], [25, 2, 1, "", "state"], [25, 2, 1, "", "swap"], [25, 2, 1, "", "wideband"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel": [[25, 3, 1, "", "__init__"], [25, 2, 1, "", "bandwidth"], [25, 2, 1, "", "freq_manual"], [25, 2, 1, "", "freq_max"], [25, 2, 1, "", "freq_min"], [25, 2, 1, "", "frequency"], [25, 2, 1, "", "mode"], [25, 2, 1, "", "offset"], [25, 2, 1, "", "period"], [25, 2, 1, "", "shape"], [25, 2, 1, "", "shape_duty_cycle"], [25, 2, 1, "", "shape_period"], [25, 2, 1, "", "shape_width"], [25, 2, 1, "", "source"], [25, 2, 1, "", "source_path"], [25, 2, 1, "", "state"], [25, 2, 1, "", "trapez_fall"], [25, 2, 1, "", "trapez_height"], [25, 2, 1, "", "trapez_period"], [25, 2, 1, "", "trapez_rise"], [25, 2, 1, "", "triangle_period"], [25, 2, 1, "", "triangle_rise"], [25, 2, 1, "", "voltage"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep": [[25, 3, 1, "", "__init__"], [25, 2, 1, "", "dwell"], [25, 2, 1, "", "execute"], [25, 2, 1, "", "lin_step"], [25, 2, 1, "", "log_step"], [25, 2, 1, "", "mode"], [25, 2, 1, "", "points"], [25, 2, 1, "", "retrace"], [25, 2, 1, "", "running"], [25, 2, 1, "", "shape"], [25, 2, 1, "", "spacing"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel": [[25, 3, 1, "", "__init__"], [25, 2, 1, "", "frequency"], [25, 2, 1, "", "level"], [25, 2, 1, "", "losc_input"], [25, 2, 1, "", "losc_mode"], [25, 2, 1, "", "losc_output"], [25, 2, 1, "", "losc_state"], [25, 2, 1, "", "mode"], [25, 2, 1, "", "state"], [25, 2, 1, "", "sweep_center"], [25, 2, 1, "", "sweep_span"], [25, 2, 1, "", "sweep_start"], [25, 2, 1, "", "sweep_stop"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep": [[25, 3, 1, "", "__init__"], [25, 2, 1, "", "dwell"], [25, 2, 1, "", "execute"], [25, 2, 1, "", "lin_step"], [25, 2, 1, "", "log_step"], [25, 2, 1, "", "mode"], [25, 2, 1, "", "points"], [25, 2, 1, "", "reset"], [25, 2, 1, "", "retrace"], [25, 2, 1, "", "running"], [25, 2, 1, "", "shape"], [25, 2, 1, "", "spacing"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep": [[25, 3, 1, "", "__init__"], [25, 2, 1, "", "attenuator"], [25, 2, 1, "", "dwell"], [25, 2, 1, "", "execute"], [25, 2, 1, "", "log_step"], [25, 2, 1, "", "mode"], [25, 2, 1, "", "points"], [25, 2, 1, "", "reset"], [25, 2, 1, "", "retrace"], [25, 2, 1, "", "running"], [25, 2, 1, "", "shape"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation": [[25, 3, 1, "", "__init__"], [25, 2, 1, "", "coupling_mode"], [25, 2, 1, "", "deviation"], [25, 2, 1, "", "mode"], [25, 2, 1, "", "ratio"], [25, 2, 1, "", "sensitivity"], [25, 2, 1, "", "source"], [25, 2, 1, "", "state"], [25, 2, 1, "", "total_deviation"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator": [[25, 3, 1, "", "__init__"], [25, 2, 1, "", "output"], [25, 2, 1, "", "polarity"], [25, 2, 1, "", "state"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation": [[25, 3, 1, "", "__init__"], [25, 2, 1, "", "delay"], [25, 2, 1, "", "double_delay"], [25, 2, 1, "", "double_width"], [25, 2, 1, "", "impedance"], [25, 2, 1, "", "mode"], [25, 2, 1, "", "period"], [25, 2, 1, "", "polarity"], [25, 2, 1, "", "source"], [25, 2, 1, "", "state"], [25, 2, 1, "", "transition_type"], [25, 2, 1, "", "trigger_impedance"], [25, 2, 1, "", "trigger_mode"], [25, 2, 1, "", "video_polarity"], [25, 2, 1, "", "width"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A": [[25, 3, 1, "", "close"], [25, 3, 1, "", "gen_trigger_pulse"], [25, 3, 1, "", "get_error"], [25, 3, 1, "", "get_id"], [25, 3, 1, "", "get_options"], [25, 3, 1, "", "getall"], [25, 3, 1, "", "reset"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim": [[25, 1, 1, "", "MockVisa"], [25, 1, 1, "", "MockVisaHandle"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisa": [[25, 3, 1, "", "set_address"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle": [[25, 3, 1, "", "ask"], [25, 3, 1, "", "clear"], [25, 3, 1, "", "close"], [25, 2, 1, "", "cmddef"], [25, 3, 1, "", "query"], [25, 3, 1, "", "write"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13": [[25, 1, 1, "", "ComplexSweep"], [25, 1, 1, "", "FrequencySweep"], [25, 1, 1, "", "FrequencySweepMagPhase"], [25, 1, 1, "", "SAFrequencySweep"], [25, 1, 1, "", "ZVL13"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ComplexSweep": [[25, 3, 1, "", "get_raw"], [25, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweep": [[25, 3, 1, "", "get_raw"], [25, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweepMagPhase": [[25, 3, 1, "", "get_raw"], [25, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.SAFrequencySweep": [[25, 3, 1, "", "get_raw"], [25, 3, 1, "", "set_sweep"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13": [[25, 3, 1, "", "calibration"], [25, 3, 1, "", "na_mode"], [25, 3, 1, "", "reset"], [25, 3, 1, "", "sa_mode"], [25, 3, 1, "", "update_traces"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private": [[26, 0, 0, "-", "HMC804x"], [26, 0, 0, "-", "HMP"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x": [[26, 1, 1, "", "RohdeSchwarzHMC804xChannel"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP": [[26, 1, 1, "", "RohdeSchwarzHMPChannel"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP.RohdeSchwarzHMPChannel": [[26, 3, 1, "", "get_max_current"], [26, 3, 1, "", "send_cmd"]], "qcodes_contrib_drivers.drivers.Shamrock": [[27, 0, 0, "-", "SR750"]], "qcodes_contrib_drivers.drivers.Shamrock.SR750": [[27, 1, 1, "", "ShamrockCIF"], [27, 1, 1, "", "Shamrock_SR750"]], "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF": [[27, 3, 1, "", "close"], [27, 2, 1, "", "dll"], [27, 3, 1, "", "error_check"], [27, 3, 1, "", "get_calibration"], [27, 3, 1, "", "get_grating"], [27, 3, 1, "", "get_grating_info"], [27, 3, 1, "", "get_number_devices"], [27, 3, 1, "", "get_number_gratings"], [27, 3, 1, "", "get_number_pixels"], [27, 3, 1, "", "get_pixel_width"], [27, 3, 1, "", "get_serial_number"], [27, 3, 1, "", "get_slit"], [27, 3, 1, "", "get_wavelength"], [27, 3, 1, "", "get_wavelength_limits"], [27, 3, 1, "", "initialize"], [27, 3, 1, "", "set_grating"], [27, 3, 1, "", "set_number_pixels"], [27, 3, 1, "", "set_pixel_width"], [27, 3, 1, "", "set_slit"], [27, 3, 1, "", "set_wavelength"], [27, 2, 1, "", "verbose"]], "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750": [[27, 2, 1, "", "ShamrockCIF"], [27, 3, 1, "", "close"], [27, 2, 1, "", "device_id"], [27, 3, 1, "", "get_idn"], [27, 2, 1, "", "number_gratings"], [27, 2, 1, "", "serial_number"]], "qcodes_contrib_drivers.drivers.SignalCore": [[28, 0, 0, "-", "SignalCore"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore": [[28, 1, 1, "", "DeviceInfoT"], [28, 1, 1, "", "DeviceRFParamsT"], [28, 1, 1, "", "DeviceStatusT"], [28, 1, 1, "", "HWTriggerT"], [28, 1, 1, "", "ListModeT"], [28, 1, 1, "", "ManDate"], [28, 1, 1, "", "OperateStatusT"], [28, 1, 1, "", "PLLStatusT"], [28, 1, 1, "", "SC5521A"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT": [[28, 2, 1, "", "device_interfaces"], [28, 2, 1, "", "firmware_revision"], [28, 2, 1, "", "hardware_revision"], [28, 2, 1, "", "man_date"], [28, 2, 1, "", "product_serial_number"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT": [[28, 2, 1, "", "atten_value"], [28, 2, 1, "", "buffer_points"], [28, 2, 1, "", "frequency"], [28, 2, 1, "", "level_dac_value"], [28, 2, 1, "", "power_level"], [28, 2, 1, "", "rf_phase_offset"], [28, 2, 1, "", "sweep_cycles"], [28, 2, 1, "", "sweep_dwell_time"], [28, 2, 1, "", "sweep_start_freq"], [28, 2, 1, "", "sweep_step_freq"], [28, 2, 1, "", "sweep_stop_freq"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT": [[28, 2, 1, "", "list_mode_t"], [28, 2, 1, "", "operate_status_t"], [28, 2, 1, "", "pll_status_t"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT": [[28, 2, 1, "", "edge"], [28, 2, 1, "", "pxi_enable"], [28, 2, 1, "", "pxi_line"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT": [[28, 2, 1, "", "hw_trigger"], [28, 2, 1, "", "return_to_start"], [28, 2, 1, "", "step_on_hw_trig"], [28, 2, 1, "", "sweep_dir"], [28, 2, 1, "", "sweep_mode"], [28, 2, 1, "", "tri_waveform"], [28, 2, 1, "", "trig_out_enable"], [28, 2, 1, "", "trig_out_on_cycle"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate": [[28, 2, 1, "", "day"], [28, 2, 1, "", "hour"], [28, 2, 1, "", "month"], [28, 2, 1, "", "year"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT": [[28, 2, 1, "", "auto_pwr_disable"], [28, 2, 1, "", "device_access"], [28, 2, 1, "", "device_standby"], [28, 2, 1, "", "ext_ref_detect"], [28, 2, 1, "", "ext_ref_lock_enable"], [28, 2, 1, "", "harmonic_ss"], [28, 2, 1, "", "list_mode_running"], [28, 2, 1, "", "output_enable"], [28, 2, 1, "", "over_temp"], [28, 2, 1, "", "pci_clk_enable"], [28, 2, 1, "", "ref_out_select"], [28, 2, 1, "", "rf1_lock_mode"], [28, 2, 1, "", "rf1_loop_gain"], [28, 2, 1, "", "rf_mode"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT": [[28, 2, 1, "", "crs_aux_pll_ld"], [28, 2, 1, "", "crs_pll_ld"], [28, 2, 1, "", "crs_ref_pll_ld"], [28, 2, 1, "", "fine_pll_ld"], [28, 2, 1, "", "ref_100_pll_ld"], [28, 2, 1, "", "ref_10_pll_ld"], [28, 2, 1, "", "sum_pll_ld"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.SC5521A": [[28, 3, 1, "", "__init__"], [28, 3, 1, "", "get_idn"]], "qcodes_contrib_drivers.drivers.SingleQuantum": [[29, 0, 0, "-", "SingleQuantum"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum": [[29, 1, 1, "", "ChannelArray"], [29, 1, 1, "", "CommunicationHandler"], [29, 1, 1, "", "SQCounts"], [29, 1, 1, "", "SQTalk"], [29, 1, 1, "", "TimeArray"], [29, 1, 1, "", "WebSQControlqcode"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.ChannelArray": [[29, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler": [[29, 3, 1, "", "acquire_cnts_t"], [29, 3, 1, "", "auto_cali_bias_currents"], [29, 3, 1, "", "auto_cali_finished"], [29, 3, 1, "", "enable_detectors"], [29, 3, 1, "", "error"], [29, 3, 1, "", "get_bias_current"], [29, 3, 1, "", "get_bias_voltage"], [29, 3, 1, "", "get_measurement_periode"], [29, 3, 1, "", "get_number_of_detectors"], [29, 3, 1, "", "get_trigger_level"], [29, 3, 1, "", "set_bias_current"], [29, 3, 1, "", "set_dark_counts_auto_iv"], [29, 3, 1, "", "set_measurement_periode"], [29, 3, 1, "", "set_trigger_level"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts": [[29, 3, 1, "", "close"], [29, 3, 1, "", "get_n"], [29, 3, 1, "", "run"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk": [[29, 3, 1, "", "add_labelProps"], [29, 3, 1, "", "check_error"], [29, 3, 1, "", "close"], [29, 3, 1, "", "get_all_labels"], [29, 3, 1, "", "get_label"], [29, 3, 1, "", "run"], [29, 3, 1, "", "send"], [29, 3, 1, "", "sub_jsons"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.TimeArray": [[29, 3, 1, "", "get_raw"]], "qcodes_contrib_drivers.drivers.Spectrum": [[30, 0, 0, "-", "M4i"], [31, 0, 0, "-", "py_header"]], "qcodes_contrib_drivers.drivers.Spectrum.M4i": [[30, 1, 1, "", "M4i"], [30, 5, 1, "", "szTypeToName"]], "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i": [[30, 3, 1, "", "__init__"], [30, 3, 1, "", "active_channels"], [30, 3, 1, "", "blockavg_hardware_trigger_acquisition"], [30, 3, 1, "", "close"], [30, 3, 1, "", "convert_to_voltage"], [30, 3, 1, "", "gated_trigger_acquisition"], [30, 3, 1, "", "get_card_memory"], [30, 3, 1, "", "get_card_type"], [30, 3, 1, "", "get_data"], [30, 3, 1, "", "get_error_info32bit"], [30, 3, 1, "", "get_firmware_version"], [30, 3, 1, "", "get_hardware_version"], [30, 3, 1, "", "get_idn"], [30, 3, 1, "", "get_max_sample_rate"], [30, 3, 1, "", "initialize_channels"], [30, 3, 1, "", "multiple_trigger_acquisition"], [30, 3, 1, "", "reset"], [30, 3, 1, "", "retrieve_data"], [30, 3, 1, "", "set_channel_OR_trigger_settings"], [30, 3, 1, "", "set_channel_settings"], [30, 3, 1, "", "set_ext0_OR_trigger_settings"], [30, 3, 1, "", "setup_multi_recording"], [30, 3, 1, "", "single_software_trigger_acquisition"], [30, 3, 1, "", "single_software_trigger_acquisition_boxcar"], [30, 3, 1, "", "single_trigger_acquisition"], [30, 3, 1, "", "start_acquisition"], [30, 3, 1, "", "start_triggered"], [30, 3, 1, "", "wait_ready"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header": [[31, 0, 0, "-", "h2py"], [31, 0, 0, "-", "regs"], [31, 0, 0, "-", "spcerr"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py": [[31, 5, 1, "", "main"], [31, 5, 1, "", "process"], [31, 5, 1, "", "pytify"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs": [[31, 5, 1, "", "GIGA"], [31, 5, 1, "", "GIGA_B"], [31, 5, 1, "", "KILO"], [31, 5, 1, "", "KILO_B"], [31, 5, 1, "", "MEGA"], [31, 5, 1, "", "MEGA_B"]], "qcodes_contrib_drivers.drivers.Standa": [[32, 0, 0, "-", "Standa_10MWA168"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168": [[32, 1, 1, "", "DeviceInformation"], [32, 1, 1, "", "GetPosition"], [32, 1, 1, "", "Standa_10MWA168"], [32, 1, 1, "", "Status"], [32, 1, 1, "", "libximc"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation": [[32, 2, 1, "", "Major"], [32, 2, 1, "", "Manufacturer"], [32, 2, 1, "", "ManufacturerId"], [32, 2, 1, "", "Minor"], [32, 2, 1, "", "ProductDescription"], [32, 2, 1, "", "Release"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition": [[32, 2, 1, "", "EncPosition"], [32, 2, 1, "", "Position"], [32, 2, 1, "", "uPosition"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status": [[32, 2, 1, "", "CmdBufFreeSpace"], [32, 2, 1, "", "CurPosition"], [32, 2, 1, "", "CurSpeed"], [32, 2, 1, "", "CurT"], [32, 2, 1, "", "EncPosition"], [32, 2, 1, "", "EncSts"], [32, 2, 1, "", "Flags"], [32, 2, 1, "", "GPIOFlags"], [32, 2, 1, "", "Ipwr"], [32, 2, 1, "", "Iusb"], [32, 2, 1, "", "MoveSts"], [32, 2, 1, "", "MvCmdSts"], [32, 2, 1, "", "PWRSts"], [32, 2, 1, "", "Upwr"], [32, 2, 1, "", "Uusb"], [32, 2, 1, "", "WindSts"], [32, 2, 1, "", "uCurPosition"], [32, 2, 1, "", "uCurSpeed"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc": [[32, 3, 1, "", "command_move"], [32, 3, 1, "", "enumerate_devices"], [32, 3, 1, "", "error_check"], [32, 3, 1, "", "get_device_name"], [32, 3, 1, "", "get_position"], [32, 3, 1, "", "get_status"], [32, 3, 1, "", "open_device"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems": [[33, 0, 0, "-", "DG645"], [33, 0, 0, "-", "SIM928"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645": [[33, 1, 1, "", "DG645"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645": [[33, 2, 1, "", "CHANNEL_MAPPING"], [33, 2, 1, "", "DISPLAY_MAPPING"], [33, 2, 1, "", "OUTPUT_MAPPING"], [33, 2, 1, "", "POLARITY_MAPPING"], [33, 2, 1, "", "PRESCALE_MAPPING"], [33, 2, 1, "", "TRIGGER_MAPPING"], [33, 3, 1, "", "local"], [33, 3, 1, "", "remote"], [33, 3, 1, "", "reset"], [33, 3, 1, "", "save_settings"], [33, 3, 1, "", "self_calibrate"], [33, 3, 1, "", "self_test"], [33, 3, 1, "", "trigger"], [33, 3, 1, "", "wait"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928": [[33, 1, 1, "", "SIM928"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928": [[33, 3, 1, "", "ask_module"], [33, 3, 1, "", "byte_to_bits"], [33, 3, 1, "", "check_module_errors"], [33, 3, 1, "", "find_modules"], [33, 3, 1, "", "get_module_idn"], [33, 3, 1, "", "get_module_status"], [33, 3, 1, "", "get_voltage"], [33, 3, 1, "", "reset_module"], [33, 3, 1, "", "set_smooth"], [33, 3, 1, "", "set_voltage"], [33, 3, 1, "", "write_module"]], "qcodes_contrib_drivers.drivers.Tektronix": [[34, 0, 0, "-", "AFG3000"], [34, 0, 0, "-", "AWG520"], [34, 0, 0, "-", "Keithley_2000_Scan"], [34, 0, 0, "-", "Keithley_2700"], [34, 0, 0, "-", "Keithley_6430"], [34, 0, 0, "-", "Keithley_6500"]], "qcodes_contrib_drivers.drivers.Tektronix.AFG3000": [[34, 1, 1, "", "AFG3000"], [34, 1, 1, "", "AFG3252"]], "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000": [[34, 3, 1, "", "abort"], [34, 3, 1, "", "recall"], [34, 3, 1, "", "reset"], [34, 3, 1, "", "reset_edit_memory"], [34, 3, 1, "", "save"], [34, 3, 1, "", "self_calibrate"], [34, 3, 1, "", "self_test"], [34, 3, 1, "", "synchronize_phase"], [34, 3, 1, "", "upload_waveform"], [34, 3, 1, "", "wait"]], "qcodes_contrib_drivers.drivers.Tektronix.AWG520": [[34, 1, 1, "", "Tektronix_AWG520"]], "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520": [[34, 3, 1, "", "__init__"], [34, 3, 1, "", "change_folder"], [34, 3, 1, "", "clear_waveforms"], [34, 3, 1, "", "delete_all_waveforms_from_list"], [34, 3, 1, "", "force_logicjump"], [34, 3, 1, "", "force_trigger"], [34, 3, 1, "", "get_all"], [34, 3, 1, "", "get_current_folder_name"], [34, 3, 1, "", "get_filenames"], [34, 3, 1, "", "get_folder_contents"], [34, 3, 1, "", "get_jumpmode"], [34, 3, 1, "", "get_state"], [34, 3, 1, "", "goto_root"], [34, 3, 1, "", "load_and_set_sequence"], [34, 3, 1, "", "make_directory"], [34, 3, 1, "", "resend_waveform"], [34, 3, 1, "", "return_self"], [34, 3, 1, "", "send_pattern"], [34, 3, 1, "", "send_sequence"], [34, 3, 1, "", "send_sequence2"], [34, 3, 1, "", "send_waveform"], [34, 3, 1, "", "set_current_folder_name"], [34, 3, 1, "", "set_jumpmode"], [34, 3, 1, "", "set_sequence"], [34, 3, 1, "", "set_setup_filename"], [34, 3, 1, "", "start"], [34, 3, 1, "", "stop"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan": [[34, 1, 1, "", "Keithley_2000_Scan_Channel"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan.Keithley_2000_Scan_Channel": [[34, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700": [[34, 1, 1, "", "Keithley_2700"], [34, 5, 1, "", "bool_to_str"], [34, 5, 1, "", "parsebool"], [34, 5, 1, "", "parseint"], [34, 5, 1, "", "parsestr"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700": [[34, 3, 1, "", "get_all"], [34, 3, 1, "", "reset"], [34, 3, 1, "", "set_defaults"], [34, 3, 1, "", "set_mode"], [34, 3, 1, "", "set_mode_volt_dc"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430": [[34, 1, 1, "", "Keithley_6430"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430": [[34, 3, 1, "", "init"], [34, 3, 1, "", "read"], [34, 3, 1, "", "reset"], [34, 3, 1, "", "set_trigger_immediate"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500": [[34, 1, 1, "", "Keithley_6500"], [34, 1, 1, "", "Keithley_Sense"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_6500": [[34, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_Sense": [[34, 3, 1, "", "__init__"]], "qcodes_contrib_drivers.drivers.Thorlabs": [[35, 0, 0, "-", "APT"], [35, 0, 0, "-", "K10CR1"], [35, 0, 0, "-", "MFF10x"], [35, 0, 0, "-", "PRM1Z8"]], "qcodes_contrib_drivers.drivers.Thorlabs.APT": [[35, 4, 1, "", "ThorlabsException"], [35, 1, 1, "", "ThorlabsHWType"], [35, 1, 1, "", "Thorlabs_APT"]], "qcodes_contrib_drivers.drivers.Thorlabs.APT.ThorlabsHWType": [[35, 2, 1, "", "K10CR1"], [35, 2, 1, "", "MFF10x"], [35, 2, 1, "", "PRM1Z8"]], "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT": [[35, 3, 1, "", "apt_clean_up"], [35, 3, 1, "", "apt_init"], [35, 3, 1, "", "disable_hw_channel"], [35, 2, 1, "", "dll"], [35, 3, 1, "", "enable_event_dlg"], [35, 3, 1, "", "enable_hw_channel"], [35, 3, 1, "", "error_check"], [35, 3, 1, "", "get_hw_info"], [35, 3, 1, "", "get_hw_serial_num_ex"], [35, 3, 1, "", "init_hw_device"], [35, 3, 1, "", "list_available_devices"], [35, 3, 1, "", "mot_get_home_parameters"], [35, 3, 1, "", "mot_get_position"], [35, 3, 1, "", "mot_get_status_bits"], [35, 3, 1, "", "mot_get_velocity_parameters"], [35, 3, 1, "", "mot_move_absolute_ex"], [35, 3, 1, "", "mot_move_home"], [35, 3, 1, "", "mot_move_jog"], [35, 3, 1, "", "mot_move_velocity"], [35, 3, 1, "", "mot_set_home_parameters"], [35, 3, 1, "", "mot_set_velocity_parameters"], [35, 3, 1, "", "mot_stop_profiled"], [35, 2, 1, "", "verbose"]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1": [[35, 1, 1, "", "HomeLimitSwitch"], [35, 1, 1, "", "RotationDirection"], [35, 1, 1, "", "Thorlabs_K10CR1"]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.HomeLimitSwitch": [[35, 2, 1, "", "FORWARD"], [35, 2, 1, "", "REVERSE"]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.RotationDirection": [[35, 2, 1, "", "FORWARD"], [35, 2, 1, "", "REVERSE"]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1": [[35, 2, 1, "", "apt"], [35, 3, 1, "", "get_idn"], [35, 2, 1, "", "model"], [35, 2, 1, "", "serial_number"], [35, 2, 1, "", "version"]], "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x": [[35, 1, 1, "", "Thorlabs_MFF10x"]], "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x": [[35, 2, 1, "", "apt"], [35, 3, 1, "", "get_idn"], [35, 2, 1, "", "model"], [35, 2, 1, "", "serial_number"], [35, 2, 1, "", "version"]], "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8": [[35, 1, 1, "", "Thorlabs_PRM1Z8"]], "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8": [[35, 2, 1, "", "apt"], [35, 3, 1, "", "get_idn"], [35, 2, 1, "", "model"], [35, 2, 1, "", "serial_number"], [35, 2, 1, "", "version"]], "qcodes_contrib_drivers.drivers.Vaunix": [[36, 0, 0, "-", "LDA"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA": [[36, 2, 1, "", "LDA"], [36, 1, 1, "", "LdaAttenuation"], [36, 1, 1, "", "LdaChannel"], [36, 1, 1, "", "LdaParameter"], [36, 1, 1, "", "LdaWorkingFrequency"], [36, 1, 1, "", "Vaunix_LDA"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaAttenuation": [[36, 2, 1, "", "scaling"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter": [[36, 3, 1, "", "__init__"], [36, 3, 1, "", "get_raw"], [36, 2, 1, "", "scaling"], [36, 3, 1, "", "set_raw"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency": [[36, 3, 1, "", "__init__"], [36, 3, 1, "", "get_validator"], [36, 2, 1, "", "scaling"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA": [[36, 3, 1, "", "__init__"], [36, 3, 1, "", "close"], [36, 2, 1, "", "dll_path"], [36, 3, 1, "", "get_idn"], [36, 3, 1, "", "save_settings"]], "qcodes_contrib_drivers.drivers.ZurichInstruments": [[37, 0, 0, "-", "HF2LI"], [37, 0, 0, "-", "ZIHDAWG8"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI": [[37, 1, 1, "", "HF2LI"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI.HF2LI": [[37, 2, 1, "", "OUTPUT_MAPPING"], [37, 3, 1, "", "sample"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8": [[37, 4, 1, "", "CompilerError"], [37, 1, 1, "", "ZIHDAWG8"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8": [[37, 3, 1, "", "__init__"], [37, 3, 1, "", "create_parameters_from_node_tree"], [37, 3, 1, "", "disable_channel"], [37, 3, 1, "", "download_device_node_tree"], [37, 3, 1, "", "enable_channel"], [37, 3, 1, "", "generate_csv_sequence_program"], [37, 3, 1, "", "set_channel_grouping"], [37, 3, 1, "", "snapshot"], [37, 3, 1, "", "snapshot_base"], [37, 3, 1, "", "start_awg"], [37, 3, 1, "", "stop_awg"], [37, 3, 1, "", "upload_sequence_program"], [37, 3, 1, "", "upload_waveform"], [37, 3, 1, "", "waveform_to_csv"], [37, 3, 1, "", "waveform_to_wave"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:method", "4": "py:exception", "5": "py:function", "6": "py:property"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "method", "Python method"], "4": ["py", "exception", "Python exception"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"]}, "titleterms": {"qcodes_contrib_driv": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "driver": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 56, 58, 78, 94, 95], "packag": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "subpackag": [0, 5, 17, 25, 30], "submodul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "cmts5048": 0, "modul": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 56], "content": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 95], "advantech": 1, "pcie_1751": 1, "agil": [2, 38], "agilent_n9000a": 2, "aimtti": [3, 39], "el320p": [3, 39], "andor": [4, 40], "du401": [4, 40], "attocub": [5, 6, 41], "anc300": [5, 41], "anc300sim": 5, "anc350": 5, "anc350lib": 6, "interfac": 6, "v3": 6, "v4": 6, "aviosi": [7, 42], "ip_power_9258": 7, "bilt": [8, 48], "itest": [8, 48], "bluefor": [9, 39, 43], "coppermountain": [10, 44], "m5180": [10, 44], "s5048": 10, "cryocon": 11, "cryocon_26": 11, "cryogen": 12, "cryogenicsms120c": 12, "erainstru": 13, "erasynth": [13, 45], "generalmicrowav": 14, "gm349": 14, "gentec": [15, 46], "gentec_maestro": 15, "holzworth": [16, 47], "hs900": 16, "hs9008b": 16, "keysight": [17, 18, 50, 51], "keysight_e36313a": 17, "keysight_e8267d": 17, "keysight_j7211": 17, "keysight_m3201a": 17, "keysight_m3300a": 17, "m3202a": [17, 50, 51], "sd_common": 18, "sd_awg": 18, "sd_awg_async": 18, "sd_dig": 18, "sd_modul": 18, "memory_manag": 18, "lakeshor": [19, 52, 53], "model_331": 19, "model_625": 19, "nationalinstru": 20, "daq": [20, 54], "pxie_2597": 20, "pxie_5654": 20, "rfsg": [20, 56], "switch": [20, 55], "dll_wrapper": 20, "ni_dll_instru": 20, "visa_typ": 20, "newport": [21, 57], "ag_uc8": 21, "oxford": [22, 58], "ilm200": 22, "ips120": 22, "triton": [22, 58], "kelvinox": 22, "qdevil": [23, 78], "qdac1": 23, "qdac2": 23, "qdac2_arrai": 23, "qutech": 24, "d4": 24, "d5a": 24, "f1d": 24, "ivvi": 24, "m2j": 24, "s5i": 24, "rohdeschwarz": [25, 26], "hmc8041": 25, "hmc8042": 25, "hmc8043": 25, "hmp2020": 25, "hmp2030": 25, "hmp4030": 25, "hmp4040": [25, 80], "smr40": 25, "smw200a": [25, 81], "smw200asim": 25, "zvl13": [25, 92], "privat": 26, "hmc804x": 26, "hmp": 26, "shamrock": [27, 82], "sr750": [27, 82], "signalcor": 28, "singlequantum": 29, "spectrum": [30, 31, 40, 92], "m4i": 30, "py_head": 31, "h2py": 31, "reg": 31, "spcerr": 31, "standa": [32, 85], "standa_10mwa168": 32, "stanfordresearchsystem": 33, "dg645": 33, "sim928": 33, "tektronix": [34, 86, 87], "afg3000": [34, 86], "awg520": 34, "keithley_2000_scan": 34, "keithley_2700": 34, "keithley_6430": 34, "keithley_6500": 34, "thorlab": [35, 88, 89, 90], "apt": 35, "k10cr1": [35, 88], "mff10x": [35, 89], "prm1z8": [35, 90], "vaunix": [36, 91], "lda": [36, 91], "zurichinstru": 37, "hf2li": [37, 93], "zihdawg8": 37, "exampl": [38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 77, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94], "n9000a": 38, "import": [38, 43, 48, 58], "load": [38, 43, 48, 58], "instrument": [38, 40, 42, 43, 46, 48, 52, 54, 55, 56, 58, 82, 85, 89, 90, 91, 92, 93], "initial": [38, 48], "measur": [38, 44, 48, 49, 87], "notebook": [39, 47, 49], "thi": 39, "i": [39, 41, 95], "power": [39, 42, 46, 53, 79, 80], "suppli": [39, 53, 79, 80], "us": [39, 46, 64, 67, 77, 87, 94], "4": 39, "k": 39, "stage": 39, "warmup": 39, "heater": [39, 52], "qcode": [40, 41, 42, 46, 52, 55, 56, 57, 77, 79, 80, 81, 82, 85, 87, 88, 89, 90, 91, 95], "bu2": 40, "initi": [40, 42, 46, 52, 56, 82, 85, 87, 88, 89, 90, 91, 92], "take": [40, 56, 82], "singl": [40, 84], "scan": [40, 68, 69, 76, 87], "acquisit": [40, 92], "mode": [40, 45, 92], "accumul": 40, "snapshot": [40, 55, 56, 82], "close": [40, 42, 46, 52, 56, 82, 89, 90, 91], "The": 41, "test": [41, 44, 45, 63], "control": [41, 57], "equip": 41, "two": 41, "anm150": 41, "axi": 41, "ip": 42, "9258": 42, "read": [42, 46, 52, 89, 90], "statu": 42, "set": [42, 45, 46, 48, 83, 91], "turn": [42, 45], "all": 42, "socket": 42, "model": [44, 53, 91], "vector": [44, 92], "network": [44, 92], "analyz": [44, 92], "connect": [44, 55, 83, 87], "devic": [44, 83], "setup": [44, 82], "db": 44, "station": [44, 92], "measurer": 44, "trace": [44, 92], "look": [44, 53], "name": [44, 55], "label": 44, "sxx": 44, "paramet": [44, 53, 58, 83, 91, 92], "frequenc": [45, 56], "run": 45, "self": 45, "sweep": [45, 72], "commun": 45, "perform": [45, 87], "maestro": 46, "its": 46, "asrl": 46, "address": 46, "wavelength": 46, "get": [46, 82, 95], "right": 46, "calibr": [46, 82], "laser": 46, "hs900b": 47, "rf": [47, 55, 56], "synthes": 47, "from": [48, 83], "keithlei": [49, 87], "6430": 49, "smu": 49, "resist": 49, "100k": 49, "omega": 49, "resistor": 49, "awg": [50, 51], "gener": [50, 51, 56, 59, 66, 86], "enqueu": [50, 51], "waveform": [50, 51, 59, 86], "trigger": [50, 51, 60], "digit": [51, 87], "configur": [51, 52], "captur": 51, "signal": [51, 56, 83], "retriev": 51, "data": 51, "plot": [51, 92], "result": 51, "311": 52, "temperatur": 52, "625": 53, "superconduct": 53, "magnet": 53, "check": [53, 87], "current": [53, 82, 89, 90], "field": 53, "convers": 53, "let": 53, "": [53, 79, 80, 95], "have": 53, "other": 53, "ramp": 53, "rate": 53, "quench": 53, "detect": 53, "nation": [54, 55], "multifunct": 54, "daqanaloginput": 54, "daqanalogoutput": 54, "pxie": 55, "2597": 55, "differ": 55, "channel": [55, 66, 91], "alias": 55, "print": 55, "ni": 56, "puls": 56, "analog": 56, "amplitud": 56, "phase": 56, "stop": 56, "ag": 57, "uc8": 57, "piezo": 57, "motion": 57, "readout": 58, "qdac": [59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "ii": [59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "arbitrari": [59, 86], "chain": 60, "constant": 61, "voltag": [61, 65, 72], "debug": 62, "gate": [63, 64, 75], "leakag": [63, 64], "multipl": [64, 66, 73], "list": 65, "per": 66, "pyvisa": 67, "direct": 67, "1d": 68, "2d": [68, 69, 76], "diod": [69, 76], "sine": 70, "wave": [70, 71, 74], "squar": 71, "synchronis": 73, "triangl": 74, "virtual": 75, "how": [77, 94], "r": [79, 80], "hmc": 79, "8043": 79, "rohe": 81, "schwarz": [81, 92], "spectromet": 82, "chang": [82, 89, 90], "microwav": 83, "sourc": 83, "sc5521a": 83, "core": 83, "quantum": 84, "snspd": 84, "10mwa168": 85, "seri": 86, "function": 86, "upload": 86, "an": 86, "afg": 86, "output": 86, "multimet": 87, "dmm6500": 87, "simpl": 87, "queri": 87, "activ": 87, "termin": 87, "2000": 87, "card": 87, "move": 88, "rotat": 88, "home": 88, "certain": 88, "posit": [88, 89, 90], "asynchron": 88, "clean": 88, "up": 88, "resourc": 88, "step": 91, "attenu": 91, "save": 91, "mani": 91, "rohd": 92, "definit": 92, "zurich": 93, "welcom": 95, "contribut": 95, "document": 95, "contrib": 95, "default": 95, "branch": 95, "now": 95, "main": 95, "start": 95, "prerequisit": 95, "instal": 95, "licens": 95, "indic": 95, "tabl": 95}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "nbsphinx": 4, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"qcodes_contrib_drivers.drivers package": [[0, "qcodes-contrib-drivers-drivers-package"]], "Subpackages": [[0, "subpackages"], [5, "subpackages"], [17, "subpackages"], [25, "subpackages"], [30, "subpackages"]], "Submodules": [[0, "submodules"], [1, "submodules"], [2, "submodules"], [3, "submodules"], [4, "submodules"], [5, "submodules"], [6, "submodules"], [7, "submodules"], [8, "submodules"], [9, "submodules"], [10, "submodules"], [11, "submodules"], [12, "submodules"], [13, "submodules"], [14, "submodules"], [15, "submodules"], [16, "submodules"], [17, "submodules"], [18, "submodules"], [19, "submodules"], [20, "submodules"], [21, "submodules"], [22, "submodules"], [23, "submodules"], [24, "submodules"], [25, "submodules"], [26, "submodules"], [27, "submodules"], [28, "submodules"], [29, "submodules"], [30, "submodules"], [31, "submodules"], [32, "submodules"], [33, "submodules"], [34, "submodules"], [35, "submodules"], [36, "submodules"], [37, "submodules"]], "qcodes_contrib_drivers.drivers.CMTS5048 module": [[0, "module-qcodes_contrib_drivers.drivers.CMTS5048"]], "Module contents": [[0, "module-qcodes_contrib_drivers.drivers"], [1, "module-qcodes_contrib_drivers.drivers.Advantech"], [2, "module-qcodes_contrib_drivers.drivers.Agilent"], [3, "module-qcodes_contrib_drivers.drivers.AimTTi"], [4, "module-qcodes_contrib_drivers.drivers.Andor"], [5, "module-qcodes_contrib_drivers.drivers.Attocube"], [6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib"], [7, "module-qcodes_contrib_drivers.drivers.Aviosys"], [8, "module-qcodes_contrib_drivers.drivers.Bilt"], [9, "module-qcodes_contrib_drivers.drivers.BlueFors"], [10, "module-qcodes_contrib_drivers.drivers.CopperMountain"], [11, "module-qcodes_contrib_drivers.drivers.Cryocon"], [12, "module-qcodes_contrib_drivers.drivers.Cryogenic"], [13, "module-qcodes_contrib_drivers.drivers.ERAInstruments"], [14, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave"], [15, "module-qcodes_contrib_drivers.drivers.Gentec"], [16, "module-qcodes_contrib_drivers.drivers.Holzworth"], [17, "module-qcodes_contrib_drivers.drivers.Keysight"], [18, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common"], [19, "module-qcodes_contrib_drivers.drivers.Lakeshore"], [20, "module-qcodes_contrib_drivers.drivers.NationalInstruments"], [21, "module-qcodes_contrib_drivers.drivers.Newport"], [22, "module-qcodes_contrib_drivers.drivers.Oxford"], [23, "module-qcodes_contrib_drivers.drivers.QDevil"], [24, "module-qcodes_contrib_drivers.drivers.QuTech"], [25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz"], [26, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private"], [27, "module-qcodes_contrib_drivers.drivers.Shamrock"], [28, "module-qcodes_contrib_drivers.drivers.SignalCore"], [29, "module-qcodes_contrib_drivers.drivers.SingleQuantum"], [30, "module-qcodes_contrib_drivers.drivers.Spectrum"], [31, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header"], [32, "module-qcodes_contrib_drivers.drivers.Standa"], [33, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems"], [34, "module-qcodes_contrib_drivers.drivers.Tektronix"], [35, "module-qcodes_contrib_drivers.drivers.Thorlabs"], [36, "module-qcodes_contrib_drivers.drivers.Vaunix"], [37, "module-qcodes_contrib_drivers.drivers.ZurichInstruments"]], "qcodes_contrib_drivers.drivers.Advantech package": [[1, "qcodes-contrib-drivers-drivers-advantech-package"]], "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751 module": [[1, "module-qcodes_contrib_drivers.drivers.Advantech.PCIE_1751"]], "qcodes_contrib_drivers.drivers.Agilent package": [[2, "qcodes-contrib-drivers-drivers-agilent-package"]], "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A module": [[2, "module-qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A"]], "qcodes_contrib_drivers.drivers.AimTTi package": [[3, "qcodes-contrib-drivers-drivers-aimtti-package"]], "qcodes_contrib_drivers.drivers.AimTTi.EL320P module": [[3, "module-qcodes_contrib_drivers.drivers.AimTTi.EL320P"]], "qcodes_contrib_drivers.drivers.Andor package": [[4, "qcodes-contrib-drivers-drivers-andor-package"]], "qcodes_contrib_drivers.drivers.Andor.DU401 module": [[4, "module-qcodes_contrib_drivers.drivers.Andor.DU401"]], "qcodes_contrib_drivers.drivers.Attocube package": [[5, "qcodes-contrib-drivers-drivers-attocube-package"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300 module": [[5, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300"]], "qcodes_contrib_drivers.drivers.Attocube.ANC300sim module": [[5, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300sim"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350 module": [[5, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib package": [[6, "qcodes-contrib-drivers-drivers-attocube-anc350lib-package"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface module": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3 module": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3"]], "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4 module": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4"]], "qcodes_contrib_drivers.drivers.Aviosys package": [[7, "qcodes-contrib-drivers-drivers-aviosys-package"]], "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S module": [[7, "module-qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S"]], "qcodes_contrib_drivers.drivers.Bilt package": [[8, "qcodes-contrib-drivers-drivers-bilt-package"]], "qcodes_contrib_drivers.drivers.Bilt.ITest module": [[8, "module-qcodes_contrib_drivers.drivers.Bilt.ITest"]], "qcodes_contrib_drivers.drivers.BlueFors package": [[9, "qcodes-contrib-drivers-drivers-bluefors-package"]], "qcodes_contrib_drivers.drivers.BlueFors.BlueFors module": [[9, "module-qcodes_contrib_drivers.drivers.BlueFors.BlueFors"]], "qcodes_contrib_drivers.drivers.CopperMountain package": [[10, "qcodes-contrib-drivers-drivers-coppermountain-package"]], "qcodes_contrib_drivers.drivers.CopperMountain.M5180 module": [[10, "module-qcodes_contrib_drivers.drivers.CopperMountain.M5180"]], "qcodes_contrib_drivers.drivers.CopperMountain.S5048 module": [[10, "module-qcodes_contrib_drivers.drivers.CopperMountain.S5048"]], "qcodes_contrib_drivers.drivers.Cryocon package": [[11, "qcodes-contrib-drivers-drivers-cryocon-package"]], "qcodes_contrib_drivers.drivers.Cryocon.cryocon_26 module": [[11, "module-qcodes_contrib_drivers.drivers.Cryocon.cryocon_26"]], "qcodes_contrib_drivers.drivers.Cryogenic package": [[12, "qcodes-contrib-drivers-drivers-cryogenic-package"]], "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C module": [[12, "module-qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C"]], "qcodes_contrib_drivers.drivers.ERAInstruments package": [[13, "qcodes-contrib-drivers-drivers-erainstruments-package"]], "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth module": [[13, "module-qcodes_contrib_drivers.drivers.ERAInstruments.erasynth"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave package": [[14, "qcodes-contrib-drivers-drivers-generalmicrowave-package"]], "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349 module": [[14, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349"]], "qcodes_contrib_drivers.drivers.Gentec package": [[15, "qcodes-contrib-drivers-drivers-gentec-package"]], "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro module": [[15, "module-qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro"]], "qcodes_contrib_drivers.drivers.Holzworth package": [[16, "qcodes-contrib-drivers-drivers-holzworth-package"]], "qcodes_contrib_drivers.drivers.Holzworth.HS900 module": [[16, "module-qcodes_contrib_drivers.drivers.Holzworth.HS900"]], "qcodes_contrib_drivers.drivers.Holzworth.HS9008B module": [[16, "module-qcodes_contrib_drivers.drivers.Holzworth.HS9008B"]], "qcodes_contrib_drivers.drivers.Keysight package": [[17, "qcodes-contrib-drivers-drivers-keysight-package"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A module": [[17, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D module": [[17, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211 module": [[17, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A module": [[17, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A"]], "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A module": [[17, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A"]], "qcodes_contrib_drivers.drivers.Keysight.M3202A module": [[17, "module-qcodes_contrib_drivers.drivers.Keysight.M3202A"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common package": [[18, "qcodes-contrib-drivers-drivers-keysight-sd-common-package"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG module": [[18, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async module": [[18, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG module": [[18, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module module": [[18, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module"]], "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager module": [[18, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager"]], "qcodes_contrib_drivers.drivers.Lakeshore package": [[19, "qcodes-contrib-drivers-drivers-lakeshore-package"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_331 module": [[19, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_331"]], "qcodes_contrib_drivers.drivers.Lakeshore.Model_625 module": [[19, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_625"]], "qcodes_contrib_drivers.drivers.NationalInstruments package": [[20, "qcodes-contrib-drivers-drivers-nationalinstruments-package"]], "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ module": [[20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.DAQ"]], "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597 module": [[20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597"]], "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654 module": [[20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654"]], "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG module": [[20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.RFSG"]], "qcodes_contrib_drivers.drivers.NationalInstruments.Switch module": [[20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.Switch"]], "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper module": [[20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper"]], "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument module": [[20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument"]], "qcodes_contrib_drivers.drivers.NationalInstruments.visa_types module": [[20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.visa_types"]], "qcodes_contrib_drivers.drivers.Newport package": [[21, "qcodes-contrib-drivers-drivers-newport-package"]], "qcodes_contrib_drivers.drivers.Newport.AG_UC8 module": [[21, "module-qcodes_contrib_drivers.drivers.Newport.AG_UC8"]], "qcodes_contrib_drivers.drivers.Oxford package": [[22, "qcodes-contrib-drivers-drivers-oxford-package"]], "qcodes_contrib_drivers.drivers.Oxford.ILM200 module": [[22, "module-qcodes_contrib_drivers.drivers.Oxford.ILM200"]], "qcodes_contrib_drivers.drivers.Oxford.IPS120 module": [[22, "module-qcodes_contrib_drivers.drivers.Oxford.IPS120"]], "qcodes_contrib_drivers.drivers.Oxford.Triton module": [[22, "module-qcodes_contrib_drivers.drivers.Oxford.Triton"]], "qcodes_contrib_drivers.drivers.Oxford.kelvinox module": [[22, "module-qcodes_contrib_drivers.drivers.Oxford.kelvinox"]], "qcodes_contrib_drivers.drivers.QDevil package": [[23, "qcodes-contrib-drivers-drivers-qdevil-package"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC1 module": [[23, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC1"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2 module": [[23, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2"]], "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array module": [[23, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array"]], "qcodes_contrib_drivers.drivers.QuTech package": [[24, "qcodes-contrib-drivers-drivers-qutech-package"]], "qcodes_contrib_drivers.drivers.QuTech.D4 module": [[24, "module-qcodes_contrib_drivers.drivers.QuTech.D4"]], "qcodes_contrib_drivers.drivers.QuTech.D5a module": [[24, "module-qcodes_contrib_drivers.drivers.QuTech.D5a"]], "qcodes_contrib_drivers.drivers.QuTech.F1d module": [[24, "module-qcodes_contrib_drivers.drivers.QuTech.F1d"]], "qcodes_contrib_drivers.drivers.QuTech.IVVI module": [[24, "module-qcodes_contrib_drivers.drivers.QuTech.IVVI"]], "qcodes_contrib_drivers.drivers.QuTech.M2j module": [[24, "module-qcodes_contrib_drivers.drivers.QuTech.M2j"]], "qcodes_contrib_drivers.drivers.QuTech.S5i module": [[24, "module-qcodes_contrib_drivers.drivers.QuTech.S5i"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz package": [[25, "qcodes-contrib-drivers-drivers-rohdeschwarz-package"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041 module": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042 module": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043 module": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020 module": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030 module": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030 module": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040 module": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40 module": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A module": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim module": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13 module": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private package": [[26, "qcodes-contrib-drivers-drivers-rohdeschwarz-private-package"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x module": [[26, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x"]], "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP module": [[26, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP"]], "qcodes_contrib_drivers.drivers.Shamrock package": [[27, "qcodes-contrib-drivers-drivers-shamrock-package"]], "qcodes_contrib_drivers.drivers.Shamrock.SR750 module": [[27, "module-qcodes_contrib_drivers.drivers.Shamrock.SR750"]], "qcodes_contrib_drivers.drivers.SignalCore package": [[28, "qcodes-contrib-drivers-drivers-signalcore-package"]], "qcodes_contrib_drivers.drivers.SignalCore.SignalCore module": [[28, "module-qcodes_contrib_drivers.drivers.SignalCore.SignalCore"]], "qcodes_contrib_drivers.drivers.SingleQuantum package": [[29, "qcodes-contrib-drivers-drivers-singlequantum-package"]], "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum module": [[29, "module-qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum"]], "qcodes_contrib_drivers.drivers.Spectrum package": [[30, "qcodes-contrib-drivers-drivers-spectrum-package"]], "qcodes_contrib_drivers.drivers.Spectrum.M4i module": [[30, "module-qcodes_contrib_drivers.drivers.Spectrum.M4i"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header package": [[31, "qcodes-contrib-drivers-drivers-spectrum-py-header-package"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py module": [[31, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs module": [[31, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.regs"]], "qcodes_contrib_drivers.drivers.Spectrum.py_header.spcerr module": [[31, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.spcerr"]], "qcodes_contrib_drivers.drivers.Standa package": [[32, "qcodes-contrib-drivers-drivers-standa-package"]], "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168 module": [[32, "module-qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems package": [[33, "qcodes-contrib-drivers-drivers-stanfordresearchsystems-package"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645 module": [[33, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645"]], "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928 module": [[33, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928"]], "qcodes_contrib_drivers.drivers.Tektronix package": [[34, "qcodes-contrib-drivers-drivers-tektronix-package"]], "qcodes_contrib_drivers.drivers.Tektronix.AFG3000 module": [[34, "module-qcodes_contrib_drivers.drivers.Tektronix.AFG3000"]], "qcodes_contrib_drivers.drivers.Tektronix.AWG520 module": [[34, "module-qcodes_contrib_drivers.drivers.Tektronix.AWG520"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan module": [[34, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700 module": [[34, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430 module": [[34, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430"]], "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500 module": [[34, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500"]], "qcodes_contrib_drivers.drivers.Thorlabs package": [[35, "qcodes-contrib-drivers-drivers-thorlabs-package"]], "qcodes_contrib_drivers.drivers.Thorlabs.APT module": [[35, "module-qcodes_contrib_drivers.drivers.Thorlabs.APT"]], "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1 module": [[35, "module-qcodes_contrib_drivers.drivers.Thorlabs.K10CR1"]], "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x module": [[35, "module-qcodes_contrib_drivers.drivers.Thorlabs.MFF10x"]], "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8 module": [[35, "module-qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8"]], "qcodes_contrib_drivers.drivers.Vaunix package": [[36, "qcodes-contrib-drivers-drivers-vaunix-package"]], "qcodes_contrib_drivers.drivers.Vaunix.LDA module": [[36, "module-qcodes_contrib_drivers.drivers.Vaunix.LDA"]], "qcodes_contrib_drivers.drivers.ZurichInstruments package": [[37, "qcodes-contrib-drivers-drivers-zurichinstruments-package"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI module": [[37, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI"]], "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8 module": [[37, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8"]], "Example with the Agilent N9000A": [[38, "Example-with-the-Agilent-N9000A"]], "Import": [[38, "Import"], [43, "Import"], [48, "Import"]], "Load instrument": [[38, "Load-instrument"], [43, "Load-instrument"], [48, "Load-instrument"], [58, "Load-instrument"]], "Initiallization": [[38, "Initiallization"], [48, "Initiallization"]], "Measurement": [[38, "Measurement"], [48, "Measurement"]], "Example notebook for AimTTi EL320P": [[39, "Example-notebook-for-AimTTi-EL320P"]], "This is the power supply used for the Bluefors 4 K stage warmup heater.": [[39, "This-is-the-power-supply-used-for-the-Bluefors-4-K-stage-warmup-heater."]], "Qcodes example with Andor DU401 BU2": [[40, "Qcodes-example-with-Andor-DU401-BU2"]], "Initialize the instrument": [[40, "Initialize-the-instrument"], [56, "Initialize-the-instrument"], [82, "Initialize-the-instrument"], [89, "Initialize-the-instrument"], [90, "Initialize-the-instrument"], [91, "Initialize-the-instrument"]], "Take a spectrum in the single scan acquisition mode": [[40, "Take-a-spectrum-in-the-single-scan-acquisition-mode"]], "Take a spectrum in the accumulate acquisition mode": [[40, "Take-a-spectrum-in-the-accumulate-acquisition-mode"]], "Take a snapshot": [[40, "Take-a-snapshot"], [56, "Take-a-snapshot"], [82, "Take-a-snapshot"]], "Close the instrument": [[40, "Close-the-instrument"], [52, "Close-the-instrument"], [56, "Close-the-instrument"], [82, "Close-the-instrument"]], "QCoDeS example with Attocube ANC300": [[41, "QCoDeS-example-with-Attocube-ANC300"]], "The test controller is equiped with two ANM150 axis modules": [[41, "The-test-controller-is-equiped-with-two-ANM150-axis-modules"]], "Qcodes example with Aviosys IP Power 9258S": [[42, "Qcodes-example-with-Aviosys-IP-Power-9258S"]], "Initialize instrument": [[42, "Initialize-instrument"], [52, "Initialize-instrument"], [85, "Initialize-instrument"]], "Read the power status": [[42, "Read-the-power-status"]], "Set the power status": [[42, "Set-the-power-status"]], "Turn of all sockets": [[42, "Turn-of-all-sockets"]], "Close instrument": [[42, "Close-instrument"], [46, "Close-instrument"], [89, "Close-instrument"], [90, "Close-instrument"], [91, "Close-instrument"]], "Example with the BlueFors": [[43, "Example-with-the-BlueFors"]], "Example with CopperMountain Model M5180 vector network analyzer": [[44, "Example-with-CopperMountain-Model-M5180-vector-network-analyzer"]], "Connecting to device": [[44, "Connecting-to-device"]], "Setup db and station for test measurerment": [[44, "Setup-db-and-station-for-test-measurerment"]], "Measure a trace": [[44, "Measure-a-trace"]], "Look at the names and the labels of the Sxx parameters": [[44, "Look-at-the-names-and-the-labels-of-the-Sxx-parameters"]], "Example with ERASynth": [[45, "Example-with-ERASynth"]], "Set a frequency and turn on": [[45, "Set-a-frequency-and-turn-on"]], "Run a self test": [[45, "Run-a-self-test"]], "Sweep mode": [[45, "Sweep-mode"]], "Communication performance": [[45, "Communication-performance"]], "QCoDeS Example with Gentec Maestro": [[46, "QCoDeS-Example-with-Gentec-Maestro"]], "Initialize the instrument using its ASRL address": [[46, "Initialize-the-instrument-using-its-ASRL-address"]], "Set the wavelength to get the right calibration": [[46, "Set-the-wavelength-to-get-the-right-calibration"]], "Read the laser power": [[46, "Read-the-laser-power"]], "Example notebook for the Holzworth HS900B RF synthesizer": [[47, "Example-notebook-for-the-Holzworth-HS900B-RF-synthesizer"]], "Example with the iTest from Bilt": [[48, "Example-with-the-iTest-from-Bilt"]], "Set": [[48, "Set"]], "Example notebook for Keithley 6430 SMU": [[49, "Example-notebook-for-Keithley-6430-SMU"]], "Measure resistance of a ~100k\\Omega resistor": [[49, "Measure-resistance-of-a-~100k\\Omega-resistor"]], "Keysight M3202A AWG": [[50, "Keysight-M3202A-AWG"]], "Generate and enqueue waveforms": [[50, "Generate-and-enqueue-waveforms"], [51, "Generate-and-enqueue-waveforms"]], "Trigger AWGs": [[50, "Trigger-AWGs"]], "Keysight M3202A AWG example with digitizer": [[51, "Keysight-M3202A-AWG-example-with-digitizer"]], "configure digitizer to capture signals": [[51, "configure-digitizer-to-capture-signals"]], "Trigger AWGs and digitizer": [[51, "Trigger-AWGs-and-digitizer"]], "Retrieve digitizer data and plot result": [[51, "Retrieve-digitizer-data-and-plot-result"]], "Qcodes example with Lakeshore 311": [[52, "Qcodes-example-with-Lakeshore-311"]], "Read temperatures": [[52, "Read-temperatures"]], "Heater configuration": [[52, "Heater-configuration"]], "Example with Lakeshore Model 625 Superconducting Magnet power supply": [[53, "Example-with-Lakeshore-Model-625-Superconducting-Magnet-power-supply"]], "Check current to field conversion": [[53, "Check-current-to-field-conversion"]], "Let\u2019s have a look at other parameters": [[53, "Let\u2019s-have-a-look-at-other-parameters"]], "Field": [[53, "Field"]], "Ramp rate": [[53, "Ramp-rate"]], "Quench detection": [[53, "Quench-detection"]], "National Instruments Multifunction DAQ example": [[54, "National-Instruments-Multifunction-DAQ-example"]], "DAQAnalogInputs": [[54, "DAQAnalogInputs"]], "DAQAnalogOutputs": [[54, "DAQAnalogOutputs"]], "Qcodes example for National Instruments PXIe-2597 RF Switch": [[55, "Qcodes-example-for-National-Instruments-PXIe-2597-RF-Switch"]], "Connect different channels on the switch": [[55, "Connect-different-channels-on-the-switch"]], "Aliasing channel names": [[55, "Aliasing-channel-names"]], "Print a snapshot": [[55, "Print-a-snapshot"]], "Qcodes example with the NI RFSG signal generator driver": [[56, "Qcodes-example-with-the-NI-RFSG-signal-generator-driver"]], "Generate a signal": [[56, "Generate-a-signal"]], "Generate a pulsed signal": [[56, "Generate-a-pulsed-signal"]], "Analog (amplitude / phase / frequency) modulation": [[56, "Analog-(amplitude-/-phase-/-frequency)-modulation"]], "Stop RF generation": [[56, "Stop-RF-generation"]], "QCoDeS Example with Newport AG-UC8 Piezo Motion Controller": [[57, "QCoDeS-Example-with-Newport-AG-UC8-Piezo-Motion-Controller"]], "Example of the oxford triton driver": [[58, "Example-of-the-oxford-triton-driver"]], "Imports": [[58, "Imports"]], "Readout instrument parameters": [[58, "Readout-instrument-parameters"]], "QDAC-II arbitrary-waveform generator": [[59, "QDAC-II-arbitrary-waveform-generator"]], "QDAC-II trigger chaining": [[60, "QDAC-II-trigger-chaining"]], "QDAC-II constant voltage": [[61, "QDAC-II-constant-voltage"]], "QDAC-II debugging": [[62, "QDAC-II-debugging"]], "Gate Leakage Test": [[63, "Gate-Leakage-Test"]], "Gate Leakage using multiple QDAC-IIs": [[64, "Gate-Leakage-using-multiple-QDAC-IIs"]], "QDAC-II voltage lists": [[65, "QDAC-II-voltage-lists"]], "QDAC-II multiple generators per channel": [[66, "QDAC-II-multiple-generators-per-channel"]], "PyVisa direct use of QDAC-II": [[67, "PyVisa-direct-use-of-QDAC-II"]], "QDAC-II 1D & 2D scan": [[68, "QDAC-II-1D-&-2D-scan"]], "QDAC-II 2D diode scan": [[69, "QDAC-II-2D-diode-scan"], [76, "QDAC-II-2D-diode-scan"]], "QDAC-II sine waves": [[70, "QDAC-II-sine-waves"]], "QDAC-II square waves": [[71, "QDAC-II-square-waves"]], "QDAC-II voltage sweep": [[72, "QDAC-II-voltage-sweep"]], "Synchronise multiple QDAC-IIs": [[73, "Synchronise-multiple-QDAC-IIs"]], "QDAC-II triangle waves": [[74, "QDAC-II-triangle-waves"]], "QDAC-II virtual gates": [[75, "QDAC-II-virtual-gates"]], "QCoDeS examples of how to use QDAC-II": [[77, "qcodes-examples-of-how-to-use-qdac-ii"]], "QDevil drivers": [[78, "qdevil-drivers"]], "QCoDeS Example with R&S HMC 8043 Power Supply": [[79, "QCoDeS-Example-with-R&S-HMC-8043-Power-Supply"]], "QCoDeS Example with R&S HMP4040 Power Supply": [[80, "QCoDeS-Example-with-R&S-HMP4040-Power-Supply"]], "QCoDeS example with Rohe&Schwarz SMW200A": [[81, "QCoDeS-example-with-Rohe&Schwarz-SMW200A"]], "Qcodes example with Shamrock SR750": [[82, "Qcodes-example-with-Shamrock-SR750"]], "Get the current spectrometer setup": [[82, "Get-the-current-spectrometer-setup"]], "Change spectrometer setup": [[82, "Change-spectrometer-setup"]], "Get spectrometer calibration": [[82, "Get-spectrometer-calibration"]], "Example with the microwave source SC5521A from Signal Core": [[83, "Example-with-the-microwave-source-SC5521A-from-Signal-Core"]], "Device connection": [[83, "Device-connection"]], "Set parameters": [[83, "Set-parameters"], [91, "Set-parameters"]], "Example for Single Quantum SNSPD": [[84, "Example-for-Single-Quantum-SNSPD"]], "Qcodes example with Standa 10MWA168": [[85, "Qcodes-example-with-Standa-10MWA168"]], "Tektronix AFG3000 series arbitrary function generator": [[86, "Tektronix-AFG3000-series-arbitrary-function-generator"]], "Upload an arbitrary waveform to the AFG and output it": [[86, "Upload-an-arbitrary-waveform-to-the-AFG-and-output-it"]], "QCoDeS Example with Tektronix Keithley Digital Multimeter DMM6500": [[87, "QCoDeS-Example-with-Tektronix-Keithley-Digital-Multimeter-DMM6500"]], "Initialization and Connection": [[87, "Initialization-and-Connection"]], "Performing simple measurements": [[87, "Performing-simple-measurements"]], "Querying the active terminal": [[87, "Querying-the-active-terminal"]], "Using the 2000-SCAN scanning card": [[87, "Using-the-2000-SCAN-scanning-card"]], "Checking the active terminal": [[87, "Checking-the-active-terminal"]], "Qcodes example with Thorlabs K10CR1": [[88, "Qcodes-example-with-Thorlabs-K10CR1"]], "Initialization": [[88, "Initialization"]], "Moving the rotator": [[88, "Moving-the-rotator"]], "Moving home": [[88, "Moving-home"]], "Moving to certain position": [[88, "Moving-to-certain-position"]], "Moving to certain position (asynchronously)": [[88, "Moving-to-certain-position-(asynchronously)"]], "Clean up resources": [[88, "Clean-up-resources"]], "Qcodes example with Thorlabs MFF10x": [[89, "Qcodes-example-with-Thorlabs-MFF10x"]], "Read the current position": [[89, "Read-the-current-position"], [90, "Read-the-current-position"]], "Change the position": [[89, "Change-the-position"], [90, "Change-the-position"]], "Qcodes example with Thorlabs PRM1Z8": [[90, "Qcodes-example-with-Thorlabs-PRM1Z8"]], "Qcodes example for Vaunix LDA step attenuator": [[91, "Qcodes-example-for-Vaunix-LDA-step-attenuator"]], "Save settings": [[91, "Save-settings"]], "Model with many channels": [[91, "Model-with-many-channels"]], "Rohde & Schwarz ZVL13 Vector Network Analyzer example": [[92, "Rohde-&-Schwarz-ZVL13-Vector-Network-Analyzer-example"]], "Instrument and station initialization": [[92, "Instrument-and-station-initialization"]], "Parameters definition": [[92, "Parameters-definition"]], "Trace acquisition in Network Analyzer Mode": [[92, "Trace-acquisition-in-Network-Analyzer-Mode"]], "Plot": [[92, "Plot"], [92, "id1"]], "Trace acquisition in Spectrum Analyzer Mode": [[92, "Trace-acquisition-in-Spectrum-Analyzer-Mode"]], "Zurich Instruments HF2LI example": [[93, "Zurich-Instruments-HF2LI-example"]], "Examples of how to use drivers": [[94, "examples-of-how-to-use-drivers"]], "Welcome to QCoDeS Contributed Drivers\u2019s documentation!": [[95, "welcome-to-qcodes-contributed-drivers-s-documentation"]], "QCoDeS contrib drivers": [[95, "qcodes-contrib-drivers"]], "Default branch is now main": [[95, "default-branch-is-now-main"]], "Getting started": [[95, "getting-started"]], "Prerequisites": [[95, "prerequisites"]], "Installation": [[95, "installation"]], "Drivers documentation": [[95, "drivers-documentation"]], "Contributing": [[95, "contributing"]], "LICENSE": [[95, "license"]], "Contents:": [[95, null]], "Indices and tables": [[95, "indices-and-tables"]]}, "indexentries": {"module": [[0, "module-qcodes_contrib_drivers.drivers"], [0, "module-qcodes_contrib_drivers.drivers.CMTS5048"], [1, "module-qcodes_contrib_drivers.drivers.Advantech"], [1, "module-qcodes_contrib_drivers.drivers.Advantech.PCIE_1751"], [2, "module-qcodes_contrib_drivers.drivers.Agilent"], [2, "module-qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A"], [3, "module-qcodes_contrib_drivers.drivers.AimTTi"], [3, "module-qcodes_contrib_drivers.drivers.AimTTi.EL320P"], [4, "module-qcodes_contrib_drivers.drivers.Andor"], [4, "module-qcodes_contrib_drivers.drivers.Andor.DU401"], [5, "module-qcodes_contrib_drivers.drivers.Attocube"], [5, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300"], [5, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300sim"], [5, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350"], [6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib"], [6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface"], [6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3"], [6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4"], [7, "module-qcodes_contrib_drivers.drivers.Aviosys"], [7, "module-qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S"], [8, "module-qcodes_contrib_drivers.drivers.Bilt"], [8, "module-qcodes_contrib_drivers.drivers.Bilt.ITest"], [9, "module-qcodes_contrib_drivers.drivers.BlueFors"], [9, "module-qcodes_contrib_drivers.drivers.BlueFors.BlueFors"], [10, "module-qcodes_contrib_drivers.drivers.CopperMountain"], [10, "module-qcodes_contrib_drivers.drivers.CopperMountain.M5180"], [10, "module-qcodes_contrib_drivers.drivers.CopperMountain.S5048"], [11, "module-qcodes_contrib_drivers.drivers.Cryocon"], [11, "module-qcodes_contrib_drivers.drivers.Cryocon.cryocon_26"], [12, "module-qcodes_contrib_drivers.drivers.Cryogenic"], [12, "module-qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C"], [13, "module-qcodes_contrib_drivers.drivers.ERAInstruments"], [13, "module-qcodes_contrib_drivers.drivers.ERAInstruments.erasynth"], [14, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave"], [14, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349"], [15, "module-qcodes_contrib_drivers.drivers.Gentec"], [15, "module-qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro"], [16, "module-qcodes_contrib_drivers.drivers.Holzworth"], [16, "module-qcodes_contrib_drivers.drivers.Holzworth.HS900"], [16, "module-qcodes_contrib_drivers.drivers.Holzworth.HS9008B"], [17, "module-qcodes_contrib_drivers.drivers.Keysight"], [17, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A"], [17, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D"], [17, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211"], [17, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A"], [17, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A"], [17, "module-qcodes_contrib_drivers.drivers.Keysight.M3202A"], [18, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common"], [18, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG"], [18, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async"], [18, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG"], [18, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module"], [18, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager"], [19, "module-qcodes_contrib_drivers.drivers.Lakeshore"], [19, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_331"], [19, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_625"], [20, "module-qcodes_contrib_drivers.drivers.NationalInstruments"], [20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.DAQ"], [20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597"], [20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654"], [20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.RFSG"], [20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.Switch"], [20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper"], [20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument"], [20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.visa_types"], [21, "module-qcodes_contrib_drivers.drivers.Newport"], [21, "module-qcodes_contrib_drivers.drivers.Newport.AG_UC8"], [22, "module-qcodes_contrib_drivers.drivers.Oxford"], [22, "module-qcodes_contrib_drivers.drivers.Oxford.ILM200"], [22, "module-qcodes_contrib_drivers.drivers.Oxford.IPS120"], [22, "module-qcodes_contrib_drivers.drivers.Oxford.Triton"], [22, "module-qcodes_contrib_drivers.drivers.Oxford.kelvinox"], [23, "module-qcodes_contrib_drivers.drivers.QDevil"], [23, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC1"], [23, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2"], [23, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array"], [24, "module-qcodes_contrib_drivers.drivers.QuTech"], [24, "module-qcodes_contrib_drivers.drivers.QuTech.D4"], [24, "module-qcodes_contrib_drivers.drivers.QuTech.D5a"], [24, "module-qcodes_contrib_drivers.drivers.QuTech.F1d"], [24, "module-qcodes_contrib_drivers.drivers.QuTech.IVVI"], [24, "module-qcodes_contrib_drivers.drivers.QuTech.M2j"], [24, "module-qcodes_contrib_drivers.drivers.QuTech.S5i"], [25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz"], [25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041"], [25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042"], [25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043"], [25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020"], [25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030"], [25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030"], [25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040"], [25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40"], [25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A"], [25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim"], [25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13"], [26, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private"], [26, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x"], [26, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP"], [27, "module-qcodes_contrib_drivers.drivers.Shamrock"], [27, "module-qcodes_contrib_drivers.drivers.Shamrock.SR750"], [28, "module-qcodes_contrib_drivers.drivers.SignalCore"], [28, "module-qcodes_contrib_drivers.drivers.SignalCore.SignalCore"], [29, "module-qcodes_contrib_drivers.drivers.SingleQuantum"], [29, "module-qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum"], [30, "module-qcodes_contrib_drivers.drivers.Spectrum"], [30, "module-qcodes_contrib_drivers.drivers.Spectrum.M4i"], [31, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header"], [31, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py"], [31, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.regs"], [31, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.spcerr"], [32, "module-qcodes_contrib_drivers.drivers.Standa"], [32, "module-qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168"], [33, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems"], [33, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645"], [33, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928"], [34, "module-qcodes_contrib_drivers.drivers.Tektronix"], [34, "module-qcodes_contrib_drivers.drivers.Tektronix.AFG3000"], [34, "module-qcodes_contrib_drivers.drivers.Tektronix.AWG520"], [34, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan"], [34, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700"], [34, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430"], [34, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500"], [35, "module-qcodes_contrib_drivers.drivers.Thorlabs"], [35, "module-qcodes_contrib_drivers.drivers.Thorlabs.APT"], [35, "module-qcodes_contrib_drivers.drivers.Thorlabs.K10CR1"], [35, "module-qcodes_contrib_drivers.drivers.Thorlabs.MFF10x"], [35, "module-qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8"], [36, "module-qcodes_contrib_drivers.drivers.Vaunix"], [36, "module-qcodes_contrib_drivers.drivers.Vaunix.LDA"], [37, "module-qcodes_contrib_drivers.drivers.ZurichInstruments"], [37, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI"], [37, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8"]], "qcodes_contrib_drivers.drivers": [[0, "module-qcodes_contrib_drivers.drivers"]], "qcodes_contrib_drivers.drivers.cmts5048": [[0, "module-qcodes_contrib_drivers.drivers.CMTS5048"]], "advantech_pcie_1751 (class in qcodes_contrib_drivers.drivers.advantech.pcie_1751)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751"]], "daqnaviexception": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.DAQNaviException"]], "daqnaviwarning": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.DAQNaviWarning"]], "errormsg (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 attribute)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.ERRORMSG"]], "check() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.check"]], "close() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.close"]], "get_idn() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.get_idn"]], "port_count() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.port_count"]], "qcodes_contrib_drivers.drivers.advantech": [[1, "module-qcodes_contrib_drivers.drivers.Advantech"]], "qcodes_contrib_drivers.drivers.advantech.pcie_1751": [[1, "module-qcodes_contrib_drivers.drivers.Advantech.PCIE_1751"]], "read_pin() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.read_pin"]], "read_port() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.read_port"]], "write_pin() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.write_pin"]], "write_port() (qcodes_contrib_drivers.drivers.advantech.pcie_1751.advantech_pcie_1751 method)": [[1, "qcodes_contrib_drivers.drivers.Advantech.PCIE_1751.Advantech_PCIE_1751.write_port"]], "agilent_n9000a (class in qcodes_contrib_drivers.drivers.agilent.agilent_n9000a)": [[2, "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A.Agilent_N9000A"]], "__init__() (qcodes_contrib_drivers.drivers.agilent.agilent_n9000a.agilent_n9000a method)": [[2, "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A.Agilent_N9000A.__init__"]], "power_parser() (qcodes_contrib_drivers.drivers.agilent.agilent_n9000a.agilent_n9000a method)": [[2, "qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A.Agilent_N9000A.power_parser"]], "qcodes_contrib_drivers.drivers.agilent": [[2, "module-qcodes_contrib_drivers.drivers.Agilent"]], "qcodes_contrib_drivers.drivers.agilent.agilent_n9000a": [[2, "module-qcodes_contrib_drivers.drivers.Agilent.Agilent_N9000A"]], "el320p (class in qcodes_contrib_drivers.drivers.aimtti.el320p)": [[3, "qcodes_contrib_drivers.drivers.AimTTi.EL320P.EL320P"]], "qcodes_contrib_drivers.drivers.aimtti": [[3, "module-qcodes_contrib_drivers.drivers.AimTTi"]], "qcodes_contrib_drivers.drivers.aimtti.el320p": [[3, "module-qcodes_contrib_drivers.drivers.AimTTi.EL320P"]], "andor_du401 (class in qcodes_contrib_drivers.drivers.andor.du401)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401"]], "spectrum (class in qcodes_contrib_drivers.drivers.andor.du401)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Spectrum"]], "atmcd64d (class in qcodes_contrib_drivers.drivers.andor.du401)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d"]], "close() (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.close"]], "cooler_off() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.cooler_off"]], "cooler_on() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.cooler_on"]], "dll (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d attribute)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.dll"]], "error_check() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.error_check"]], "firmware_build (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.firmware_build"]], "firmware_version (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.firmware_version"]], "get_acquired_data() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_acquired_data"]], "get_acquisition_timings() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_acquisition_timings"]], "get_camera_handle() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_camera_handle"]], "get_camera_serial_number() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_camera_serial_number"]], "get_detector() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_detector"]], "get_filter_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_filter_mode"]], "get_hardware_version() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_hardware_version"]], "get_head_model() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_head_model"]], "get_idn() (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.get_idn"]], "get_raw() (qcodes_contrib_drivers.drivers.andor.du401.spectrum method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Spectrum.get_raw"]], "get_status() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_status"]], "get_temperature() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_temperature"]], "get_temperature_range() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.get_temperature_range"]], "head_model (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.head_model"]], "initialize() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.initialize"]], "is_cooler_on() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.is_cooler_on"]], "qcodes_contrib_drivers.drivers.andor": [[4, "module-qcodes_contrib_drivers.drivers.Andor"]], "qcodes_contrib_drivers.drivers.andor.du401": [[4, "module-qcodes_contrib_drivers.drivers.Andor.DU401"]], "serial_number (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.serial_number"]], "set_accumulation_cycle_time() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_accumulation_cycle_time"]], "set_acquisition_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_acquisition_mode"]], "set_current_camera() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_current_camera"]], "set_exposure_time() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_exposure_time"]], "set_filter_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_filter_mode"]], "set_number_accumulations() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_number_accumulations"]], "set_raw() (qcodes_contrib_drivers.drivers.andor.du401.spectrum method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Spectrum.set_raw"]], "set_read_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_read_mode"]], "set_shutter() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_shutter"]], "set_temperature() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_temperature"]], "set_trigger_mode() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.set_trigger_mode"]], "shut_down() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.shut_down"]], "start_acquisition() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.start_acquisition"]], "verbose (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d attribute)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.verbose"]], "wait_for_acquisition() (qcodes_contrib_drivers.drivers.andor.du401.atmcd64d method)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.atmcd64d.wait_for_acquisition"]], "x_pixels (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.x_pixels"]], "y_pixels (qcodes_contrib_drivers.drivers.andor.du401.andor_du401 attribute)": [[4, "qcodes_contrib_drivers.drivers.Andor.DU401.Andor_DU401.y_pixels"]], "anc300 (class in qcodes_contrib_drivers.drivers.attocube.anc300)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300"]], "anc350 (class in qcodes_contrib_drivers.drivers.attocube.anc350)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350"]], "anc300axis (class in qcodes_contrib_drivers.drivers.attocube.anc300)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis"]], "anc300triggerout (class in qcodes_contrib_drivers.drivers.attocube.anc300)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300TriggerOut"]], "anc350axis (class in qcodes_contrib_drivers.drivers.attocube.anc350)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis"]], "mockvisa (class in qcodes_contrib_drivers.drivers.attocube.anc300sim)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisa"]], "mockvisahandle (class in qcodes_contrib_drivers.drivers.attocube.anc300sim)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300triggerout method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300TriggerOut.__init__"]], "ac (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.ac"]], "actuator (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.actuator"]], "actuator_name (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.actuator_name"]], "amplitude (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.amplitude"]], "amplitude (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.amplitude"]], "ask() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.ask"]], "ask_raw() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.ask_raw"]], "capacitance (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.capacitance"]], "clear() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.clear"]], "close() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.close"]], "close() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.close"]], "close() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350 method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350.close"]], "cmddef (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.cmddef"]], "dc (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.dc"]], "disable_auto_move() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.disable_auto_move"]], "enable_auto_move() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.enable_auto_move"]], "filter (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.filter"]], "frequency (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.frequency"]], "frequency (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.frequency"]], "get_idn() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350 method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350.get_idn"]], "getall() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.getall"]], "mode (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.mode"]], "move (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.move"]], "multiple_steps() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.multiple_steps"]], "offset (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.offset"]], "position (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.position"]], "qcodes_contrib_drivers.drivers.attocube": [[5, "module-qcodes_contrib_drivers.drivers.Attocube"]], "qcodes_contrib_drivers.drivers.attocube.anc300": [[5, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300"]], "qcodes_contrib_drivers.drivers.attocube.anc300sim": [[5, "module-qcodes_contrib_drivers.drivers.Attocube.ANC300sim"]], "qcodes_contrib_drivers.drivers.attocube.anc350": [[5, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350"]], "query() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.query"]], "read() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.read"]], "save_params() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350 method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.ANC350.save_params"]], "set_address() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisa method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisa.set_address"]], "single_step() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.single_step"]], "start (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.start"]], "start_continuous_move() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.start_continuous_move"]], "state (qcodes_contrib_drivers.drivers.attocube.anc300.anc300triggerout attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300TriggerOut.state"]], "status (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.status"]], "stopmove() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.stopMove"]], "stop_continuous_move() (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.stop_continuous_move"]], "stopall() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.stopall"]], "target_position (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.target_position"]], "target_range (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.target_range"]], "triggerdown (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.triggerDown"]], "triggerup (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.triggerUp"]], "version() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.version"]], "voltage (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.voltage"]], "voltage (qcodes_contrib_drivers.drivers.attocube.anc350.anc350axis attribute)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC350.Anc350Axis.voltage"]], "waitmove() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300axis method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.Anc300Axis.waitMove"]], "write() (qcodes_contrib_drivers.drivers.attocube.anc300sim.mockvisahandle method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300sim.MockVisaHandle.write"]], "write_raw() (qcodes_contrib_drivers.drivers.attocube.anc300.anc300 method)": [[5, "qcodes_contrib_drivers.drivers.Attocube.ANC300.ANC300.write_raw"]], "anc350libactuatortype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType"]], "anc350libactuatortype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType"]], "anc350libactuatortype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType"]], "anc350libactuatortype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType"]], "anc350libamplitudecontrolmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode"]], "anc350libamplitudecontrolmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode"]], "anc350libdevicetype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType"]], "anc350libdevicetype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType"]], "anc350libdevicetype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType"]], "anc350libdevicetype (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType"]], "anc350liberror": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError"], [6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError"], [6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError"], [6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError"]], "anc350libexternaltriggermode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode"]], "anc350libexternaltriggermode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode"]], "anc350libexternaltriggermode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode"]], "anc350libexternaltriggermode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode"]], "anc350libsignaledge (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibSignalEdge"]], "anc350libsignaledge (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibSignalEdge"]], "anc350libtriggerinputmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode"]], "anc350libtriggerinputmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode"]], "anc350libtriggeroutputmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode"]], "anc350libtriggeroutputmode (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode"]], "anc350libtriggerpolarity (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerPolarity"]], "anc350libtriggerpolarity (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.interface)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerPolarity"]], "anc350libtriggerpolarity (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibTriggerPolarity"]], "anc350libtriggerpolarity (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibTriggerPolarity"]], "anc350v3lib (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib"]], "anc350v3lib (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v3)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib"]], "anc350v3liberror": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError"], [6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError"], [6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError"]], "anc350v4lib (class in qcodes_contrib_drivers.drivers.attocube.anc350lib)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib"]], "anc350v4lib (class in qcodes_contrib_drivers.drivers.attocube.anc350lib.v4)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib"]], "amplitude (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libamplitudecontrolmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode.Amplitude"]], "amplitude (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libamplitudecontrolmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode.Amplitude"]], "coarse (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerinputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode.Coarse"]], "coarse (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerinputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode.Coarse"]], "default_path_to_dll (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.DEFAULT_PATH_TO_DLL"]], "default_path_to_dll (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.DEFAULT_PATH_TO_DLL"]], "default_path_to_dll (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.DEFAULT_PATH_TO_DLL"]], "default_path_to_dll (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.DEFAULT_PATH_TO_DLL"]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode.Disable"]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerinputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode.Disable"]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggeroutputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode.Disable"]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode.Disable"]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerinputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode.Disable"]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggeroutputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode.Disable"]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode.Disable"]], "disable (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode.Disable"]], "falling (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libsignaledge attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibSignalEdge.Falling"]], "falling (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libsignaledge attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibSignalEdge.Falling"]], "fps (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType.Fps"]], "fps (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType.Fps"]], "fps (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType.Fps"]], "fps (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType.Fps"]], "goniometer (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType.Goniometer"]], "goniometer (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType.Goniometer"]], "goniometer (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType.Goniometer"]], "goniometer (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType.Goniometer"]], "high (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerpolarity attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerPolarity.High"]], "high (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerpolarity attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerPolarity.High"]], "high (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libtriggerpolarity attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibTriggerPolarity.High"]], "high (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libtriggerpolarity attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibTriggerPolarity.High"]], "ichaus (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggeroutputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode.IcHaus"]], "ichaus (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggeroutputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode.IcHaus"]], "linear (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType.Linear"]], "linear (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType.Linear"]], "linear (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType.Linear"]], "linear (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType.Linear"]], "low (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerpolarity attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerPolarity.Low"]], "low (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerpolarity attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerPolarity.Low"]], "low (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libtriggerpolarity attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibTriggerPolarity.Low"]], "low (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libtriggerpolarity attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibTriggerPolarity.Low"]], "nothing (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType.Nothing"]], "nothing (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType.Nothing"]], "nothing (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType.Nothing"]], "nothing (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType.Nothing"]], "num (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType.Num"]], "num (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType.Num"]], "num (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType.Num"]], "num (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType.Num"]], "position (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggeroutputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode.Position"]], "position (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggeroutputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode.Position"]], "quadratur (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggerinputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerInputMode.Quadratur"]], "quadratur (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libtriggeroutputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibTriggerOutputMode.Quadratur"]], "quadratur (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggerinputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerInputMode.Quadratur"]], "quadratur (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libtriggeroutputmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibTriggerOutputMode.Quadratur"]], "quadrature (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode.Quadrature"]], "quadrature (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode.Quadrature"]], "quadrature (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode.Quadrature"]], "quadrature (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode.Quadrature"]], "res (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibDeviceType.Res"]], "res (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibDeviceType.Res"]], "res (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibDeviceType.Res"]], "res (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libdevicetype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibDeviceType.Res"]], "rising (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libsignaledge attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibSignalEdge.Rising"]], "rising (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libsignaledge attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibSignalEdge.Rising"]], "rotator (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibActuatorType.Rotator"]], "rotator (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibActuatorType.Rotator"]], "rotator (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibActuatorType.Rotator"]], "rotator (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libactuatortype attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibActuatorType.Rotator"]], "success_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.SUCCESS_CODES"]], "success_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.SUCCESS_CODES"]], "success_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.SUCCESS_CODES"]], "success_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.SUCCESS_CODES"]], "speed (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libamplitudecontrolmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode.Speed"]], "speed (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libamplitudecontrolmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode.Speed"]], "stepsize (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libamplitudecontrolmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibAmplitudeControlMode.StepSize"]], "stepsize (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libamplitudecontrolmode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibAmplitudeControlMode.StepSize"]], "trigger (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibExternalTriggerMode.Trigger"]], "trigger (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibExternalTriggerMode.Trigger"]], "trigger (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibExternalTriggerMode.Trigger"]], "trigger (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350libexternaltriggermode attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibExternalTriggerMode.Trigger"]], "warning_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.WARNING_CODES"]], "warning_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.WARNING_CODES"]], "warning_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.WARNING_CODES"]], "warning_codes (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.WARNING_CODES"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3liberror method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3liberror method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v3liberror method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.__init__"]], "check_error() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror class method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.check_error"]], "check_error() (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror class method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.check_error"]], "check_error() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror class method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.check_error"]], "check_error() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror class method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.check_error"]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.code"]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError.code"]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.code"]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.code"]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError.code"]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.code"]], "code (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v3liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError.code"]], "configure_a_quad_b_in() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_a_quad_b_in"]], "configure_a_quad_b_in() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_a_quad_b_in"]], "configure_a_quad_b_out() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_a_quad_b_out"]], "configure_a_quad_b_out() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_a_quad_b_out"]], "configure_duty_cycle() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_duty_cycle"]], "configure_duty_cycle() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_duty_cycle"]], "configure_ext_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_ext_trigger"]], "configure_ext_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_ext_trigger"]], "configure_nsl_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_nsl_trigger"]], "configure_nsl_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_nsl_trigger"]], "configure_nsl_trigger_axis() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_nsl_trigger_axis"]], "configure_nsl_trigger_axis() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_nsl_trigger_axis"]], "configure_rng_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_rng_trigger"]], "configure_rng_trigger() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_rng_trigger"]], "configure_rng_trigger_eps() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_rng_trigger_eps"]], "configure_rng_trigger_eps() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_rng_trigger_eps"]], "configure_rng_trigger_pol() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.configure_rng_trigger_pol"]], "configure_rng_trigger_pol() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.configure_rng_trigger_pol"]], "connect() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.connect"]], "connect() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.connect"]], "disconnect() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.disconnect"]], "disconnect() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.disconnect"]], "discover() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.discover"]], "discover() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.discover"]], "enable_ref_auto_reset() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.enable_ref_auto_reset"]], "enable_ref_auto_reset() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.enable_ref_auto_reset"]], "enable_ref_auto_update() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.enable_ref_auto_update"]], "enable_ref_auto_update() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.enable_ref_auto_update"]], "enable_sensor() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.enable_sensor"]], "enable_sensor() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.enable_sensor"]], "get_actuator_name() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_actuator_name"]], "get_actuator_name() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_actuator_name"]], "get_actuator_type() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_actuator_type"]], "get_actuator_type() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_actuator_type"]], "get_amplitude() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_amplitude"]], "get_amplitude() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_amplitude"]], "get_axis_status() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_axis_status"]], "get_axis_status() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_axis_status"]], "get_dc_voltage() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.get_dc_voltage"]], "get_dc_voltage() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.get_dc_voltage"]], "get_device_config() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_device_config"]], "get_device_config() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_device_config"]], "get_device_info() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_device_info"]], "get_device_info() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_device_info"]], "get_firmware_version() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_firmware_version"]], "get_firmware_version() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_firmware_version"]], "get_frequency() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_frequency"]], "get_frequency() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_frequency"]], "get_lut_name() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.get_lut_name"]], "get_lut_name() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.get_lut_name"]], "get_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_position"]], "get_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_position"]], "get_ref_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.get_ref_position"]], "get_ref_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.get_ref_position"]], "load_lut_file() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.load_lut_file"]], "load_lut_file() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.load_lut_file"]], "measure_capacitance() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.measure_capacitance"]], "measure_capacitance() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.measure_capacitance"]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350LibError.message"]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3LibError.message"]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.interface.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface.ANC350LibError.message"]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350LibError.message"]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3LibError.message"]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350LibError.message"]], "message (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v3liberror attribute)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v3LibError.message"]], "move_reference() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.move_reference"]], "move_reference() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.move_reference"]], "qcodes_contrib_drivers.drivers.attocube.anc350lib": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib"]], "qcodes_contrib_drivers.drivers.attocube.anc350lib.interface": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.interface"]], "qcodes_contrib_drivers.drivers.attocube.anc350lib.v3": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3"]], "qcodes_contrib_drivers.drivers.attocube.anc350lib.v4": [[6, "module-qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4"]], "register_external_ip() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.register_external_ip"]], "register_external_ip() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.register_external_ip"]], "reset_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.reset_position"]], "reset_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.reset_position"]], "save_params() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.save_params"]], "save_params() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.save_params"]], "select_actuator() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.select_actuator"]], "select_actuator() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.select_actuator"]], "set_amplitude() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_amplitude"]], "set_amplitude() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_amplitude"]], "set_axis_output() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_axis_output"]], "set_axis_output() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_axis_output"]], "set_dc_voltage() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_dc_voltage"]], "set_dc_voltage() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_dc_voltage"]], "set_frequency() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_frequency"]], "set_frequency() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_frequency"]], "set_target_ground() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v4Lib.set_target_ground"]], "set_target_ground() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v4.anc350v4lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v4.ANC350v4Lib.set_target_ground"]], "set_target_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_target_position"]], "set_target_position() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_target_position"]], "set_target_range() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.set_target_range"]], "set_target_range() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.set_target_range"]], "start_auto_move() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.start_auto_move"]], "start_auto_move() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.start_auto_move"]], "start_continuous_move() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.start_continuous_move"]], "start_continuous_move() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.start_continuous_move"]], "start_single_step() (qcodes_contrib_drivers.drivers.attocube.anc350lib.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.ANC350v3Lib.start_single_step"]], "start_single_step() (qcodes_contrib_drivers.drivers.attocube.anc350lib.v3.anc350v3lib method)": [[6, "qcodes_contrib_drivers.drivers.Attocube.ANC350Lib.v3.ANC350v3Lib.start_single_step"]], "aviosys_ip_power_9258s (class in qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s)": [[7, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.Aviosys_IP_Power_9258S"]], "channel_ids (qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s.powerchannel attribute)": [[7, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.PowerChannel.CHANNEL_IDS"]], "channel_names (qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s.powerchannel attribute)": [[7, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.PowerChannel.CHANNEL_NAMES"]], "powerchannel (class in qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s)": [[7, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.PowerChannel"]], "address (qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s.aviosys_ip_power_9258s attribute)": [[7, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.Aviosys_IP_Power_9258S.address"]], "get_idn() (qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s.aviosys_ip_power_9258s method)": [[7, "qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S.Aviosys_IP_Power_9258S.get_idn"]], "qcodes_contrib_drivers.drivers.aviosys": [[7, "module-qcodes_contrib_drivers.drivers.Aviosys"]], "qcodes_contrib_drivers.drivers.aviosys.ip_power_9258s": [[7, "module-qcodes_contrib_drivers.drivers.Aviosys.IP_Power_9258S"]], "itest (class in qcodes_contrib_drivers.drivers.bilt.itest)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest"]], "__init__() (qcodes_contrib_drivers.drivers.bilt.itest.itest method)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.bilt.itest.itestchannel method)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel.__init__"]], "chan_to_ic() (qcodes_contrib_drivers.drivers.bilt.itest.itest method)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest.chan_to_ic"]], "chan_to_id() (qcodes_contrib_drivers.drivers.bilt.itest.itest method)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.ITest.chan_to_id"]], "itestchannel (class in qcodes_contrib_drivers.drivers.bilt.itest)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel"]], "itestmultichannelparameter (class in qcodes_contrib_drivers.drivers.bilt.itest)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestMultiChannelParameter"]], "qcodes_contrib_drivers.drivers.bilt": [[8, "module-qcodes_contrib_drivers.drivers.Bilt"]], "qcodes_contrib_drivers.drivers.bilt.itest": [[8, "module-qcodes_contrib_drivers.drivers.Bilt.ITest"]], "start() (qcodes_contrib_drivers.drivers.bilt.itest.itestchannel method)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel.start"]], "stop() (qcodes_contrib_drivers.drivers.bilt.itest.itestchannel method)": [[8, "qcodes_contrib_drivers.drivers.Bilt.ITest.iTestChannel.stop"]], "bluefors (class in qcodes_contrib_drivers.drivers.bluefors.bluefors)": [[9, "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors"]], "__init__() (qcodes_contrib_drivers.drivers.bluefors.bluefors.bluefors method)": [[9, "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors.__init__"]], "get_pressure() (qcodes_contrib_drivers.drivers.bluefors.bluefors.bluefors method)": [[9, "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors.get_pressure"]], "get_temperature() (qcodes_contrib_drivers.drivers.bluefors.bluefors.bluefors method)": [[9, "qcodes_contrib_drivers.drivers.BlueFors.BlueFors.BlueFors.get_temperature"]], "qcodes_contrib_drivers.drivers.bluefors": [[9, "module-qcodes_contrib_drivers.drivers.BlueFors"]], "qcodes_contrib_drivers.drivers.bluefors.bluefors": [[9, "module-qcodes_contrib_drivers.drivers.BlueFors.BlueFors"]], "cmtintparser() (in module qcodes_contrib_drivers.drivers.coppermountain.s5048)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTIntParser"]], "cmts5048 (class in qcodes_contrib_drivers.drivers.coppermountain.s5048)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048"]], "cmts5048trace (class in qcodes_contrib_drivers.drivers.coppermountain.s5048)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048Trace"]], "frequencysweepmagphase (class in qcodes_contrib_drivers.drivers.coppermountain.m5180)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase"]], "m5180 (class in qcodes_contrib_drivers.drivers.coppermountain.m5180)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180"]], "pointmagphase (class in qcodes_contrib_drivers.drivers.coppermountain.m5180)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointMagPhase"]], "tracenotready": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.TraceNotReady"]], "__init__() (qcodes_contrib_drivers.drivers.coppermountain.m5180.frequencysweepmagphase method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.coppermountain.m5180.m5180 method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.coppermountain.m5180.pointmagphase method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointMagPhase.__init__"]], "get_raw() (qcodes_contrib_drivers.drivers.coppermountain.m5180.frequencysweepmagphase method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase.get_raw"]], "get_raw() (qcodes_contrib_drivers.drivers.coppermountain.m5180.pointmagphase method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.PointMagPhase.get_raw"]], "get_raw() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048trace method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048Trace.get_raw"]], "get_s() (qcodes_contrib_drivers.drivers.coppermountain.m5180.m5180 method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180.get_s"]], "invalidate_trace() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.invalidate_trace"]], "prepare_trace() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048trace method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048Trace.prepare_trace"]], "qcodes_contrib_drivers.drivers.coppermountain": [[10, "module-qcodes_contrib_drivers.drivers.CopperMountain"]], "qcodes_contrib_drivers.drivers.coppermountain.m5180": [[10, "module-qcodes_contrib_drivers.drivers.CopperMountain.M5180"]], "qcodes_contrib_drivers.drivers.coppermountain.s5048": [[10, "module-qcodes_contrib_drivers.drivers.CopperMountain.S5048"]], "reset() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.reset"]], "reset_averages() (qcodes_contrib_drivers.drivers.coppermountain.m5180.m5180 method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180.reset_averages"]], "run_n_times() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.run_N_times"]], "run_continously() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.run_continously"]], "set_sweep() (qcodes_contrib_drivers.drivers.coppermountain.m5180.frequencysweepmagphase method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.FrequencySweepMagPhase.set_sweep"]], "startup() (qcodes_contrib_drivers.drivers.coppermountain.s5048.cmts5048 method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.S5048.CMTS5048.startup"]], "update_lin_traces() (qcodes_contrib_drivers.drivers.coppermountain.m5180.m5180 method)": [[10, "qcodes_contrib_drivers.drivers.CopperMountain.M5180.M5180.update_lin_traces"]], "cryocon_26 (class in qcodes_contrib_drivers.drivers.cryocon.cryocon_26)": [[11, "qcodes_contrib_drivers.drivers.Cryocon.cryocon_26.Cryocon_26"]], "qcodes_contrib_drivers.drivers.cryocon": [[11, "module-qcodes_contrib_drivers.drivers.Cryocon"]], "qcodes_contrib_drivers.drivers.cryocon.cryocon_26": [[11, "module-qcodes_contrib_drivers.drivers.Cryocon.cryocon_26"]], "cryogenicsms120c (class in qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c)": [[12, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C"]], "default_current_ramp_limit (qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c.cryogenicsms120c attribute)": [[12, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C.default_current_ramp_limit"]], "default_max_current_ramp_limit (qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c.cryogenicsms120c attribute)": [[12, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C.default_max_current_ramp_limit"]], "get_idn() (qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c.cryogenicsms120c method)": [[12, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C.get_idn"]], "qcodes_contrib_drivers.drivers.cryogenic": [[12, "module-qcodes_contrib_drivers.drivers.Cryogenic"]], "qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c": [[12, "module-qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C"]], "query() (qcodes_contrib_drivers.drivers.cryogenic.cryogenicsms120c.cryogenicsms120c method)": [[12, "qcodes_contrib_drivers.drivers.Cryogenic.CryogenicSMS120C.CryogenicSMS120C.query"]], "erasynth (class in qcodes_contrib_drivers.drivers.erainstruments.erasynth)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynth"]], "erasynthbase (class in qcodes_contrib_drivers.drivers.erainstruments.erasynth)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase"]], "erasynthplus (class in qcodes_contrib_drivers.drivers.erainstruments.erasynth)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlus"]], "erasynthplusplus (class in qcodes_contrib_drivers.drivers.erainstruments.erasynth)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlusPlus"]], "__init__() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.__init__"]], "ask() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.ask"]], "ask_raw() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.ask_raw"]], "clear_read_buffer() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.clear_read_buffer"]], "current (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.current"]], "debug_messages_en (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.debug_messages_en"]], "embedded_version (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.embedded_version"]], "esp8266_upload_mode() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.esp8266_upload_mode"]], "factory_reset() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.factory_reset"]], "get_configuration() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.get_configuration"]], "get_diagnostic_status() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.get_diagnostic_status"]], "get_idn() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.get_idn"]], "modulation_am_depth (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_am_depth"]], "modulation_en (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_en"]], "modulation_fm_deviation (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_fm_deviation"]], "modulation_freq (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_freq"]], "modulation_pulse_period (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_pulse_period"]], "modulation_pulse_width (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_pulse_width"]], "modulation_signal_waveform (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_signal_waveform"]], "modulation_source (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_source"]], "modulation_type (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.modulation_type"]], "off() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.off"]], "on() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.on"]], "pll_lmx1_status (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.pll_lmx1_status"]], "pll_lmx2_status (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.pll_lmx2_status"]], "pll_xtal_status (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.pll_xtal_status"]], "power (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.power"]], "preset() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.preset"]], "print_pyvisa_resources() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase static method)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.print_pyvisa_resources"]], "qcodes_contrib_drivers.drivers.erainstruments": [[13, "module-qcodes_contrib_drivers.drivers.ERAInstruments"]], "qcodes_contrib_drivers.drivers.erainstruments.erasynth": [[13, "module-qcodes_contrib_drivers.drivers.ERAInstruments.erasynth"]], "ref_osc_source (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.ref_osc_source"]], "reference_tcxo_ocxo (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynth attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynth.reference_tcxo_ocxo"]], "reference_tcxo_ocxo (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthplus attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlus.reference_tcxo_ocxo"]], "reference_tcxo_ocxo (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthplusplus attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthPlusPlus.reference_tcxo_ocxo"]], "run_self_test() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.run_self_test"]], "status (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.status"]], "sweep_dwell (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.sweep_dwell"]], "sweep_en (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.sweep_en"]], "sweep_trigger (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.sweep_trigger"]], "synthesizer_mode (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.synthesizer_mode"]], "temperature (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.temperature"]], "voltage (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.voltage"]], "wifi_gateway_address (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_gateway_address"]], "wifi_hotspot_password (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_hotspot_password"]], "wifi_hotspot_ssid (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_hotspot_ssid"]], "wifi_ip_address (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_ip_address"]], "wifi_mode (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_mode"]], "wifi_off() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_off"]], "wifi_on() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_on"]], "wifi_rssi (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_rssi"]], "wifi_station_password (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_station_password"]], "wifi_station_ssid (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_station_ssid"]], "wifi_subnet_address (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase attribute)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.wifi_subnet_address"]], "write() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.write"]], "write_raw() (qcodes_contrib_drivers.drivers.erainstruments.erasynth.erasynthbase method)": [[13, "qcodes_contrib_drivers.drivers.ERAInstruments.erasynth.ERASynthBase.write_raw"]], "gm349 (class in qcodes_contrib_drivers.drivers.generalmicrowave.gm349)": [[14, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349"]], "gm349attenuation (class in qcodes_contrib_drivers.drivers.generalmicrowave.gm349)": [[14, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349Attenuation"]], "get_raw() (qcodes_contrib_drivers.drivers.generalmicrowave.gm349.gm349attenuation method)": [[14, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349Attenuation.get_raw"]], "pin_map() (qcodes_contrib_drivers.drivers.generalmicrowave.gm349.gm349 method)": [[14, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349.pin_map"]], "qcodes_contrib_drivers.drivers.generalmicrowave": [[14, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave"]], "qcodes_contrib_drivers.drivers.generalmicrowave.gm349": [[14, "module-qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349"]], "set_raw() (qcodes_contrib_drivers.drivers.generalmicrowave.gm349.gm349attenuation method)": [[14, "qcodes_contrib_drivers.drivers.GeneralMicrowave.GM349.GM349Attenuation.set_raw"]], "gentec_maestro (class in qcodes_contrib_drivers.drivers.gentec.gentec_maestro)": [[15, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro"]], "clear_zero_offset() (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro method)": [[15, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.clear_zero_offset"]], "firmware_version (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro attribute)": [[15, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.firmware_version"]], "get_idn() (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro method)": [[15, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.get_idn"]], "model (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro attribute)": [[15, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.model"]], "qcodes_contrib_drivers.drivers.gentec": [[15, "module-qcodes_contrib_drivers.drivers.Gentec"]], "qcodes_contrib_drivers.drivers.gentec.gentec_maestro": [[15, "module-qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro"]], "set_zero_offset() (qcodes_contrib_drivers.drivers.gentec.gentec_maestro.gentec_maestro method)": [[15, "qcodes_contrib_drivers.drivers.Gentec.Gentec_Maestro.Gentec_Maestro.set_zero_offset"]], "hs900 (class in qcodes_contrib_drivers.drivers.holzworth.hs900)": [[16, "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900"]], "hs9008b (class in qcodes_contrib_drivers.drivers.holzworth.hs9008b)": [[16, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008B"]], "hs9008bchannel (class in qcodes_contrib_drivers.drivers.holzworth.hs9008b)": [[16, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008BChannel"]], "hs900channel (class in qcodes_contrib_drivers.drivers.holzworth.hs900)": [[16, "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900Channel"]], "__init__() (qcodes_contrib_drivers.drivers.holzworth.hs900.hs900 method)": [[16, "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.holzworth.hs900.hs900channel method)": [[16, "qcodes_contrib_drivers.drivers.Holzworth.HS900.HS900Channel.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.holzworth.hs9008b.hs9008b method)": [[16, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008B.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.holzworth.hs9008b.hs9008bchannel method)": [[16, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008BChannel.__init__"]], "qcodes_contrib_drivers.drivers.holzworth": [[16, "module-qcodes_contrib_drivers.drivers.Holzworth"]], "qcodes_contrib_drivers.drivers.holzworth.hs900": [[16, "module-qcodes_contrib_drivers.drivers.Holzworth.HS900"]], "qcodes_contrib_drivers.drivers.holzworth.hs9008b": [[16, "module-qcodes_contrib_drivers.drivers.Holzworth.HS9008B"]], "set_address() (qcodes_contrib_drivers.drivers.holzworth.hs9008b.hs9008b method)": [[16, "qcodes_contrib_drivers.drivers.Holzworth.HS9008B.HS9008B.set_address"]], "e36313a (class in qcodes_contrib_drivers.drivers.keysight.keysight_e36313a)": [[17, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313A"]], "e36313achannel (class in qcodes_contrib_drivers.drivers.keysight.keysight_e36313a)": [[17, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313AChannel"]], "keysight_e8267d (class in qcodes_contrib_drivers.drivers.keysight.keysight_e8267d)": [[17, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D"]], "keysight_j7211 (class in qcodes_contrib_drivers.drivers.keysight.keysight_j7211)": [[17, "qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211.Keysight_J7211"]], "keysight_m3201a (class in qcodes_contrib_drivers.drivers.keysight.keysight_m3201a)": [[17, "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A.Keysight_M3201A"]], "m3202a (class in qcodes_contrib_drivers.drivers.keysight.m3202a)": [[17, "qcodes_contrib_drivers.drivers.Keysight.M3202A.M3202A"]], "m3300a_awg (class in qcodes_contrib_drivers.drivers.keysight.keysight_m3300a)": [[17, "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A.M3300A_AWG"]], "m3300a_dig (class in qcodes_contrib_drivers.drivers.keysight.keysight_m3300a)": [[17, "qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A.M3300A_DIG"]], "__init__() (qcodes_contrib_drivers.drivers.keysight.keysight_e36313a.e36313achannel method)": [[17, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313AChannel.__init__"]], "deg_to_rad() (qcodes_contrib_drivers.drivers.keysight.keysight_e8267d.keysight_e8267d static method)": [[17, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D.deg_to_rad"]], "get_idn() (qcodes_contrib_drivers.drivers.keysight.keysight_e36313a.e36313a method)": [[17, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A.E36313A.get_idn"]], "off() (qcodes_contrib_drivers.drivers.keysight.keysight_e8267d.keysight_e8267d method)": [[17, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D.off"]], "on() (qcodes_contrib_drivers.drivers.keysight.keysight_e8267d.keysight_e8267d method)": [[17, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D.on"]], "parse_on_off() (in module qcodes_contrib_drivers.drivers.keysight.keysight_e8267d)": [[17, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.parse_on_off"]], "qcodes_contrib_drivers.drivers.keysight": [[17, "module-qcodes_contrib_drivers.drivers.Keysight"]], "qcodes_contrib_drivers.drivers.keysight.keysight_e36313a": [[17, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E36313A"]], "qcodes_contrib_drivers.drivers.keysight.keysight_e8267d": [[17, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D"]], "qcodes_contrib_drivers.drivers.keysight.keysight_j7211": [[17, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_J7211"]], "qcodes_contrib_drivers.drivers.keysight.keysight_m3201a": [[17, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3201A"]], "qcodes_contrib_drivers.drivers.keysight.keysight_m3300a": [[17, "module-qcodes_contrib_drivers.drivers.Keysight.Keysight_M3300A"]], "qcodes_contrib_drivers.drivers.keysight.m3202a": [[17, "module-qcodes_contrib_drivers.drivers.Keysight.M3202A"]], "rad_to_deg() (qcodes_contrib_drivers.drivers.keysight.keysight_e8267d.keysight_e8267d static method)": [[17, "qcodes_contrib_drivers.drivers.Keysight.Keysight_E8267D.Keysight_E8267D.rad_to_deg"]], "memorymanager (class in qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager"]], "memorymanager.allocatedslot (class in qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot"]], "sd_awg (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG"]], "sd_awg_async (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async"]], "sd_dig (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG"]], "sd_module (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module"]], "task (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task"]], "waveformreference (class in qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference"]], "__init__() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.__init__"]], "allocate() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.allocate"]], "allocation_ref (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager.allocatedslot attribute)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot.allocation_ref"]], "allocation_state() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.allocation_state"]], "asynchronous() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.asynchronous"]], "awg_config_external_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_config_external_trigger"]], "awg_flush() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_flush"]], "awg_flush() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.awg_flush"]], "awg_from_array() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_from_array"]], "awg_from_array() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.awg_from_array"]], "awg_from_file() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_from_file"]], "awg_from_file() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.awg_from_file"]], "awg_is_running() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_is_running"]], "awg_jump_next_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_jump_next_waveform"]], "awg_name (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference property)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.awg_name"]], "awg_pause() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_pause"]], "awg_pause_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_pause_multiple"]], "awg_queue_config() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_queue_config"]], "awg_queue_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_queue_waveform"]], "awg_queue_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.awg_queue_waveform"]], "awg_resume() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_resume"]], "awg_resume_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_resume_multiple"]], "awg_start() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_start"]], "awg_start_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_start_multiple"]], "awg_stop() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_stop"]], "awg_stop_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_stop_multiple"]], "awg_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_trigger"]], "awg_trigger_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.awg_trigger_multiple"]], "close() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.close"]], "close() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.close"]], "close_soft() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.close_soft"]], "config_amplitude_modulation() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_amplitude_modulation"]], "config_angle_modulation() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_angle_modulation"]], "config_clock_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_clock_io"]], "config_fpga_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_fpga_trigger"]], "config_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.config_trigger_io"]], "convert_prescaler_to_sample_rate() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.convert_prescaler_to_sample_rate"]], "convert_sample_rate_to_prescaler() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.convert_sample_rate_to_prescaler"]], "daq_flush() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_flush"]], "daq_flush_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_flush_multiple"]], "daq_read() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_read"]], "daq_start() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_start"]], "daq_start_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_start_multiple"]], "daq_stop() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_stop"]], "daq_stop_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_stop_multiple"]], "daq_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_trigger"]], "daq_trigger_multiple() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.daq_trigger_multiple"]], "flush_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.flush_waveform"]], "flush_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.flush_waveform"]], "get_chassis() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_chassis"]], "get_clock_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_clock_frequency"]], "get_clock_sync_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_clock_sync_frequency"]], "get_coupling() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_coupling"]], "get_firmware_version() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_firmware_version"]], "get_fpga_pc_port() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_fpga_pc_port"]], "get_full_scale() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_full_scale"]], "get_hardware_version() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_hardware_version"]], "get_hvi_register() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_hvi_register"]], "get_impedance() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_impedance"]], "get_module_count() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_module_count"]], "get_open() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_open"]], "get_prescaler() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_prescaler"]], "get_product_name() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_product_name"]], "get_product_name_by_index() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_product_name_by_index"]], "get_product_name_by_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_product_name_by_slot"]], "get_pxi_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_pxi_trigger"]], "get_serial_number() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_serial_number"]], "get_serial_number_by_index() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_serial_number_by_index"]], "get_serial_number_by_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_serial_number_by_slot"]], "get_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_slot"]], "get_status() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_status"]], "get_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_trigger_io"]], "get_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_trigger_io"]], "get_trigger_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_trigger_mode"]], "get_trigger_threshold() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.get_trigger_threshold"]], "get_type() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_type"]], "get_type_by_index() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_type_by_index"]], "get_type_by_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.get_type_by_slot"]], "get_uninitialized_slots() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.get_uninitialized_slots"]], "get_waveform_status() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_waveform_status"]], "get_waveform_type() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.get_waveform_type"]], "is_uploaded() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.is_uploaded"]], "load_fpga_image() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.load_fpga_image"]], "load_fpga_image() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.load_fpga_image"]], "load_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.load_waveform"]], "load_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.load_waveform"]], "load_waveform_int16() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.load_waveform_int16"]], "load_waveform_int16() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.load_waveform_int16"]], "mem_usage() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.mem_usage"]], "memory_manager (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager.allocatedslot attribute)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot.memory_manager"]], "memory_sizes (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager attribute)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.memory_sizes"]], "new_waveform_from_double() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.new_waveform_from_double"]], "new_waveform_from_file() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.new_waveform_from_file"]], "new_waveform_from_int() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg static method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.new_waveform_from_int"]], "number (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager.allocatedslot attribute)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot.number"]], "off() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.off"]], "open_with_serial_number() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.open_with_serial_number"]], "open_with_slot() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.open_with_slot"]], "qcodes_contrib_drivers.drivers.keysight.sd_common": [[18, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common"]], "qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg": [[18, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG"]], "qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async": [[18, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async"]], "qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig": [[18, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG"]], "qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module": [[18, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module"]], "qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager": [[18, "module-qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager"]], "read_fpga() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.read_fpga"]], "read_fpga_array() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.read_fpga_array"]], "release() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.release"]], "release() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.release"]], "release() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager.allocatedslot method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.AllocatedSlot.release"]], "reload_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reload_waveform"]], "reload_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.reload_waveform"]], "reload_waveform_int16() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reload_waveform_int16"]], "reload_waveform_int16() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.reload_waveform_int16"]], "reset_channel_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reset_channel_phase"]], "reset_clock_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reset_clock_phase"]], "reset_clock_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.reset_clock_phase"]], "reset_multiple_channel_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.reset_multiple_channel_phase"]], "result (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.task property)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task.result"]], "result_parser() (in module qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.result_parser"]], "run() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.task method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task.run"]], "run_self_test() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.run_self_test"]], "set_analog_trigger_mask() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_analog_trigger_mask"]], "set_asynchronous() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.set_asynchronous"]], "set_channel_amplitude() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_amplitude"]], "set_channel_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_frequency"]], "set_channel_offset() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_offset"]], "set_channel_phase() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_phase"]], "set_channel_wave_shape() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_channel_wave_shape"]], "set_clksys_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig static method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_clksys_frequency"]], "set_clock_frequency() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_clock_frequency"]], "set_coupling() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_coupling"]], "set_daq_trigger_delay() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_daq_trigger_delay"]], "set_daq_trigger_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_daq_trigger_mode"]], "set_digital_filter_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_digital_filter_mode"]], "set_digital_trigger_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_digital_trigger_mode"]], "set_digital_trigger_source() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_digital_trigger_source"]], "set_ext_trigger_behaviour() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_ext_trigger_behaviour"]], "set_ext_trigger_source() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_ext_trigger_source"]], "set_fpga_pc_port() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.set_fpga_pc_port"]], "set_full_scale() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_full_scale"]], "set_hvi_register() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.set_hvi_register"]], "set_impedance() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_impedance"]], "set_iq_modulation() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_iq_modulation"]], "set_marker_config() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_marker_config"]], "set_n_cycles() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_n_cycles"]], "set_n_points() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_n_points"]], "set_points_per_cycle() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_points_per_cycle"]], "set_prescaler() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_prescaler"]], "set_pxi_trigger() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_module.sd_module method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_Module.SD_Module.set_pxi_trigger"]], "set_timeout() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_timeout"]], "set_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.set_trigger_io"]], "set_trigger_io() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_trigger_io"]], "set_trigger_mode() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_trigger_mode"]], "set_trigger_threshold() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_dig.sd_dig method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_DIG.SD_DIG.set_trigger_threshold"]], "set_waveform_limit() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.set_waveform_limit"]], "set_waveform_limit() (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.set_waveform_limit"]], "switchable() (in module qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.switchable"]], "threaded() (in module qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.threaded"]], "upload_waveform() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.upload_waveform"]], "uploader_ready() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.sd_awg_async method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.SD_AWG_Async.uploader_ready"]], "verbose (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.task attribute)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.Task.verbose"]], "verbose (qcodes_contrib_drivers.drivers.keysight.sd_common.memory_manager.memorymanager attribute)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.memory_manager.MemoryManager.verbose"]], "wait_uploaded() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.wait_uploaded"]], "wave_number (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg_async.waveformreference property)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG_Async.WaveformReference.wave_number"]], "write_fpga() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.write_fpga"]], "write_fpga_array() (qcodes_contrib_drivers.drivers.keysight.sd_common.sd_awg.sd_awg method)": [[18, "qcodes_contrib_drivers.drivers.Keysight.SD_common.SD_AWG.SD_AWG.write_fpga_array"]], "lakeshore625 (class in qcodes_contrib_drivers.drivers.lakeshore.model_625)": [[19, "qcodes_contrib_drivers.drivers.Lakeshore.Model_625.Lakeshore625"]], "model_331 (class in qcodes_contrib_drivers.drivers.lakeshore.model_331)": [[19, "qcodes_contrib_drivers.drivers.Lakeshore.Model_331.Model_331"]], "sensorchannel (class in qcodes_contrib_drivers.drivers.lakeshore.model_331)": [[19, "qcodes_contrib_drivers.drivers.Lakeshore.Model_331.SensorChannel"]], "channel (qcodes_contrib_drivers.drivers.lakeshore.model_331.sensorchannel attribute)": [[19, "qcodes_contrib_drivers.drivers.Lakeshore.Model_331.SensorChannel.channel"]], "qcodes_contrib_drivers.drivers.lakeshore": [[19, "module-qcodes_contrib_drivers.drivers.Lakeshore"]], "qcodes_contrib_drivers.drivers.lakeshore.model_331": [[19, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_331"]], "qcodes_contrib_drivers.drivers.lakeshore.model_625": [[19, "module-qcodes_contrib_drivers.drivers.Lakeshore.Model_625"]], "set_field() (qcodes_contrib_drivers.drivers.lakeshore.model_625.lakeshore625 method)": [[19, "qcodes_contrib_drivers.drivers.Lakeshore.Model_625.Lakeshore625.set_field"]], "attributewrapper (class in qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.AttributeWrapper"]], "daqanaloginputvoltages (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogInputVoltages"]], "daqanaloginputs (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogInputs"]], "daqanalogoutputvoltage (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputVoltage"]], "daqanalogoutputs (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputs"]], "daqdigitaloutputstate (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQDigitalOutputState"]], "daqdigitaloutputs (class in qcodes_contrib_drivers.drivers.nationalinstruments.daq)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQDigitalOutputs"]], "nidllinstrument (class in qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument"]], "nidllwrapper (class in qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper"]], "ni_pxie_2597 (class in qcodes_contrib_drivers.drivers.nationalinstruments.pxie_2597)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597.NI_PXIe_2597"]], "ni_pxie_5654 (in module qcodes_contrib_drivers.drivers.nationalinstruments.pxie_5654)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654.NI_PXIe_5654"]], "ni_rfsg (in module qcodes_contrib_drivers.drivers.nationalinstruments.rfsg)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NI_RFSG"]], "ni_switch (class in qcodes_contrib_drivers.drivers.nationalinstruments.switch)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch"]], "namedargtype (class in qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NamedArgType"]], "nationalinstruments_pxie_5654 (class in qcodes_contrib_drivers.drivers.nationalinstruments.pxie_5654)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654.NationalInstruments_PXIe_5654"]], "nationalinstruments_rfsg (class in qcodes_contrib_drivers.drivers.nationalinstruments.rfsg)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG"]], "switchchannel (class in qcodes_contrib_drivers.drivers.nationalinstruments.switch)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel"]], "abort() (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.abort"]], "argtype (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.namedargtype attribute)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NamedArgType.argtype"]], "c_str() (in module qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.c_str"]], "close() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.ni_switch method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch.close"]], "close() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.close"]], "connect_to() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.switchchannel method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel.connect_to"]], "disconnect_all() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.ni_switch method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch.disconnect_all"]], "disconnect_from() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.switchchannel method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel.disconnect_from"]], "disconnect_from_all() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.switchchannel method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.SwitchChannel.disconnect_from_all"]], "dll_path (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg attribute)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.dll_path"]], "dtype (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.attributewrapper attribute)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.AttributeWrapper.dtype"]], "error_message() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.error_message"]], "firmware (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg property)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.firmware"]], "get_attribute() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.get_attribute"]], "get_attribute() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.get_attribute"]], "get_idn() (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.get_idn"]], "get_idn() (qcodes_contrib_drivers.drivers.nationalinstruments.switch.ni_switch method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.Switch.NI_Switch.get_idn"]], "get_raw() (qcodes_contrib_drivers.drivers.nationalinstruments.daq.daqanaloginputvoltages method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogInputVoltages.get_raw"]], "get_raw() (qcodes_contrib_drivers.drivers.nationalinstruments.daq.daqanalogoutputvoltage method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputVoltage.get_raw"]], "init() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.init"]], "init() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.init"]], "initiate() (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.initiate"]], "model (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg property)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.model"]], "name (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.namedargtype attribute)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NamedArgType.name"]], "qcodes_contrib_drivers.drivers.nationalinstruments": [[20, "module-qcodes_contrib_drivers.drivers.NationalInstruments"]], "qcodes_contrib_drivers.drivers.nationalinstruments.daq": [[20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.DAQ"]], "qcodes_contrib_drivers.drivers.nationalinstruments.pxie_2597": [[20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_2597"]], "qcodes_contrib_drivers.drivers.nationalinstruments.pxie_5654": [[20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.PXIe_5654"]], "qcodes_contrib_drivers.drivers.nationalinstruments.rfsg": [[20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.RFSG"]], "qcodes_contrib_drivers.drivers.nationalinstruments.switch": [[20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.Switch"]], "qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper": [[20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper"]], "qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument": [[20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument"]], "qcodes_contrib_drivers.drivers.nationalinstruments.visa_types": [[20, "module-qcodes_contrib_drivers.drivers.NationalInstruments.visa_types"]], "reset() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.reset"]], "serial (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg property)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.serial"]], "set_attribute() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.set_attribute"]], "set_attribute() (qcodes_contrib_drivers.drivers.nationalinstruments.ni_dll_instrument.nidllinstrument method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.ni_dll_instrument.NIDLLInstrument.set_attribute"]], "set_raw() (qcodes_contrib_drivers.drivers.nationalinstruments.daq.daqanalogoutputvoltage method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQAnalogOutputVoltage.set_raw"]], "set_raw() (qcodes_contrib_drivers.drivers.nationalinstruments.daq.daqdigitaloutputstate method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.DAQ.DAQDigitalOutputState.set_raw"]], "value (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.attributewrapper attribute)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.AttributeWrapper.value"]], "vendor (qcodes_contrib_drivers.drivers.nationalinstruments.rfsg.nationalinstruments_rfsg property)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.RFSG.NationalInstruments_RFSG.vendor"]], "wrap_dll_function() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.wrap_dll_function"]], "wrap_dll_function_checked() (qcodes_contrib_drivers.drivers.nationalinstruments.dll_wrapper.nidllwrapper method)": [[20, "qcodes_contrib_drivers.drivers.NationalInstruments.dll_wrapper.NIDLLWrapper.wrap_dll_function_checked"]], "newport_ag_uc8 (class in qcodes_contrib_drivers.drivers.newport.ag_uc8)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8"]], "newport_ag_uc8_axis (class in qcodes_contrib_drivers.drivers.newport.ag_uc8)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis"]], "newport_ag_uc8_channel (class in qcodes_contrib_drivers.drivers.newport.ag_uc8)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Channel"]], "newport_ag_uc8_errorcode": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_ErrorCode"]], "newport_ag_uc8_exception": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Exception"]], "speed_table (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis attribute)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.SPEED_TABLE"]], "ask() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_channel method)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Channel.ask"]], "ask_channel() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.ask_channel"]], "command_delay (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 attribute)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.command_delay"]], "default_timeout (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 attribute)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.default_timeout"]], "get_idn() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.get_idn"]], "get_last_error() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.get_last_error"]], "jog() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.jog"]], "measure_position() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.measure_position"]], "move_abs() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.move_abs"]], "move_limit() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.move_limit"]], "move_rel() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.move_rel"]], "qcodes_contrib_drivers.drivers.newport": [[21, "module-qcodes_contrib_drivers.drivers.Newport"]], "qcodes_contrib_drivers.drivers.newport.ag_uc8": [[21, "module-qcodes_contrib_drivers.drivers.Newport.AG_UC8"]], "reset() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.reset"]], "reset_delay (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 attribute)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.reset_delay"]], "slow_command_timeout (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 attribute)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.slow_command_timeout"]], "stop() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.stop"]], "write() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.write"]], "write() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_channel method)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Channel.write"]], "write_channel() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8 method)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8.write_channel"]], "zero_position() (qcodes_contrib_drivers.drivers.newport.ag_uc8.newport_ag_uc8_axis method)": [[21, "qcodes_contrib_drivers.drivers.Newport.AG_UC8.Newport_AG_UC8_Axis.zero_position"]], "oxfordinstruments_ilm200 (class in qcodes_contrib_drivers.drivers.oxford.ilm200)": [[22, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200"]], "oxfordinstruments_ips120 (class in qcodes_contrib_drivers.drivers.oxford.ips120)": [[22, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120"]], "oxfordinstruments_kelvinox_igh (class in qcodes_contrib_drivers.drivers.oxford.kelvinox)": [[22, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH"]], "triton (class in qcodes_contrib_drivers.drivers.oxford.triton)": [[22, "qcodes_contrib_drivers.drivers.Oxford.Triton.Triton"]], "__init__() (qcodes_contrib_drivers.drivers.oxford.ilm200.oxfordinstruments_ilm200 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.oxford.triton.triton method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.Triton.Triton.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.__init__"]], "close() (qcodes_contrib_drivers.drivers.oxford.ilm200.oxfordinstruments_ilm200 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200.close"]], "close() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.close"]], "close() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.close"]], "examine() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.examine"]], "get_all() (qcodes_contrib_drivers.drivers.oxford.ilm200.oxfordinstruments_ilm200 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200.get_all"]], "get_all() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.get_all"]], "get_all() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.get_all"]], "get_idn() (qcodes_contrib_drivers.drivers.oxford.ilm200.oxfordinstruments_ilm200 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200.get_idn"]], "get_idn() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.get_idn"]], "get_idn() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.get_idn"]], "get_pressure() (qcodes_contrib_drivers.drivers.oxford.triton.triton method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.Triton.Triton.get_pressure"]], "get_temperature() (qcodes_contrib_drivers.drivers.oxford.triton.triton method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.Triton.Triton.get_temperature"]], "heater_off() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.heater_off"]], "heater_on() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.heater_on"]], "hold() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.hold"]], "identify() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.identify"]], "identify() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.identify"]], "leave_persistent_mode() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.leave_persistent_mode"]], "local() (qcodes_contrib_drivers.drivers.oxford.ilm200.oxfordinstruments_ilm200 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200.local"]], "local() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.local"]], "local() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.local"]], "qcodes_contrib_drivers.drivers.oxford": [[22, "module-qcodes_contrib_drivers.drivers.Oxford"]], "qcodes_contrib_drivers.drivers.oxford.ilm200": [[22, "module-qcodes_contrib_drivers.drivers.Oxford.ILM200"]], "qcodes_contrib_drivers.drivers.oxford.ips120": [[22, "module-qcodes_contrib_drivers.drivers.Oxford.IPS120"]], "qcodes_contrib_drivers.drivers.oxford.triton": [[22, "module-qcodes_contrib_drivers.drivers.Oxford.Triton"]], "qcodes_contrib_drivers.drivers.oxford.kelvinox": [[22, "module-qcodes_contrib_drivers.drivers.Oxford.kelvinox"]], "remote() (qcodes_contrib_drivers.drivers.oxford.ilm200.oxfordinstruments_ilm200 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200.remote"]], "remote() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.remote"]], "remote() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.remote"]], "rotate_nvalve() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.rotate_Nvalve"]], "run_to_field() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.run_to_field"]], "run_to_field_wait() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.run_to_field_wait"]], "set_mix_chamber_heater_mode() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.set_mix_chamber_heater_mode"]], "set_mix_chamber_heater_power_range() (qcodes_contrib_drivers.drivers.oxford.kelvinox.oxfordinstruments_kelvinox_igh method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.kelvinox.OxfordInstruments_Kelvinox_IGH.set_mix_chamber_heater_power_range"]], "set_persistent() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.set_persistent"]], "set_remote_status() (qcodes_contrib_drivers.drivers.oxford.ilm200.oxfordinstruments_ilm200 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200.set_remote_status"]], "set_to_fast() (qcodes_contrib_drivers.drivers.oxford.ilm200.oxfordinstruments_ilm200 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200.set_to_fast"]], "set_to_slow() (qcodes_contrib_drivers.drivers.oxford.ilm200.oxfordinstruments_ilm200 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.ILM200.OxfordInstruments_ILM200.set_to_slow"]], "to_setpoint() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.to_setpoint"]], "to_zero() (qcodes_contrib_drivers.drivers.oxford.ips120.oxfordinstruments_ips120 method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.IPS120.OxfordInstruments_IPS120.to_zero"]], "vcl2csv() (qcodes_contrib_drivers.drivers.oxford.triton.triton method)": [[22, "qcodes_contrib_drivers.drivers.Oxford.Triton.Triton.vcl2csv"]], "arrangement_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context"]], "array_arrangement_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2_array)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context"]], "awg_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context"]], "generator (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Generator"]], "list_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context"]], "measurement_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context"]], "mode (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode"]], "qdac (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac"]], "qdac2 (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2"]], "qdac2channel (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel"]], "qdac2externaltrigger (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2ExternalTrigger"]], "qdac2trigger_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Trigger_Context"]], "qdac2_array (class in qcodes_contrib_drivers.drivers.qdevil.qdac2_array)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array"]], "qdacchannel (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacChannel"]], "qdacmultichannelparameter (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacMultiChannelParameter"]], "sine_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context"]], "square_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context"]], "sweep_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context"]], "trace_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context"]], "triangle_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context"]], "virtual_sweep_context (class in qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Virtual_Sweep_Context"]], "waveform (class in qcodes_contrib_drivers.drivers.qdevil.qdac1)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform"]], "__init__() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdacchannel method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacChannel.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.__init__"]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.abort"]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.abort"]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.abort"]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.abort"]], "abort() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.abort"]], "actual_values_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.virtual_sweep_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Virtual_Sweep_Context.actual_values_V"]], "actual_voltages() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.actual_voltages"]], "add_correction() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.add_correction"]], "all_waveforms (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.all_waveforms"]], "allocate_trace() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.allocate_trace"]], "allocate_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.allocate_trigger"]], "allocate_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.allocate_trigger"]], "append() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.append"]], "arbitrary_wave() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.arbitrary_wave"]], "arrange() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.arrange"]], "arrange() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.arrange"]], "ask() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.ask"]], "ask_channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.ask_channel"]], "available_a() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.available_A"]], "channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.channel"]], "channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.channel"]], "channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.channel"]], "channel_numbers (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context property)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.channel_numbers"]], "clear() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.clear"]], "clear_measurements() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.clear_measurements"]], "clear_read_queue() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.clear_read_queue"]], "comma_sequence_to_list() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.comma_sequence_to_list"]], "comma_sequence_to_list_of_floats() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.comma_sequence_to_list_of_floats"]], "common_trigger_in (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array property)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.common_trigger_in"]], "connect_external_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.connect_external_trigger"]], "connect_external_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.connect_external_trigger"]], "connect_message() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.connect_message"]], "contact_names (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context property)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.contact_names"]], "contact_names (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context property)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.contact_names"]], "controller (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array property)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.controller"]], "correction_matrix (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context property)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.correction_matrix"]], "currents_a() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.currents_A"]], "currents_a() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.currents_A"]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.cycles_remaining"]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.cycles_remaining"]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.cycles_remaining"]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.cycles_remaining"]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.cycles_remaining"]], "cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.cycles_remaining"]], "dc_list() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.dc_list"]], "dc_sweep() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.dc_sweep"]], "diff_matrix() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.diff_matrix"]], "end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.end_marker"]], "end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.end_marker"]], "end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.end_marker"]], "end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.end_marker"]], "error() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.error"]], "errors() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.errors"]], "floats_to_comma_separated_list() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.floats_to_comma_separated_list"]], "forward_and_back() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.forward_and_back"]], "free_all_triggers() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.free_all_triggers"]], "free_trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.free_trigger"]], "get_label() (qcodes_contrib_drivers.drivers.qdevil.qdac1.mode method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode.get_label"]], "get_raw() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdacmultichannelparameter method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacMultiChannelParameter.get_raw"]], "get_recorded_scpi_commands() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.get_recorded_scpi_commands"]], "get_trigger_by_name() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.get_trigger_by_name"]], "initiate_correction() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.initiate_correction"]], "ints_to_comma_separated_list() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.ints_to_comma_separated_list"]], "leakage() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.leakage"]], "leakage() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.leakage"]], "mac() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.mac"]], "max_status_age (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac attribute)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.max_status_age"]], "measurement() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.measurement"]], "n_available() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.n_available"]], "n_channels() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_channels"]], "n_cycles_remaining() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.n_cycles_remaining"]], "n_errors() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_errors"]], "n_external_inputs() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 static method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_external_inputs"]], "n_external_outputs() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_external_outputs"]], "n_triggers() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 static method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.n_triggers"]], "name (qcodes_contrib_drivers.drivers.qdevil.qdac2.trace_context property)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context.name"]], "names (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array property)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.names"]], "number (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel property)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.number"]], "output_mode() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.output_mode"]], "peek_a() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.peek_A"]], "period_end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.period_end_marker"]], "period_end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.period_end_marker"]], "period_end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.period_end_marker"]], "period_end_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.period_end_marker"]], "period_start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.period_start_marker"]], "period_start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.period_start_marker"]], "period_start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.period_start_marker"]], "period_start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.period_start_marker"]], "points() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.points"]], "points() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.points"]], "print_overview() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.print_overview"]], "print_slopes() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.print_slopes"]], "print_syncs() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.print_syncs"]], "qcodes_contrib_drivers.drivers.qdevil": [[23, "module-qcodes_contrib_drivers.drivers.QDevil"]], "qcodes_contrib_drivers.drivers.qdevil.qdac1": [[23, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC1"]], "qcodes_contrib_drivers.drivers.qdevil.qdac2": [[23, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2"]], "qcodes_contrib_drivers.drivers.qdevil.qdac2_array": [[23, "module-qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array"]], "qdac_names() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.qdac_names"]], "ramp_voltages() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.ramp_voltages"]], "ramp_voltages_2d() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.ramp_voltages_2d"]], "read() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.read"]], "remove_traces() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.remove_traces"]], "reset() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.reset"]], "reset() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.reset"]], "set_virtual_voltage() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.set_virtual_voltage"]], "set_virtual_voltages() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.set_virtual_voltages"]], "set_virtual_voltages() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.set_virtual_voltages"]], "shape (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context property)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.shape"]], "sine (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.sine"]], "sine_wave() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.sine_wave"]], "size (qcodes_contrib_drivers.drivers.qdevil.qdac2.trace_context property)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context.size"]], "snapshot_base() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.snapshot_base"]], "snapshot_base() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdacchannel method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDacChannel.snapshot_base"]], "split_version_string_into_components() (in module qcodes_contrib_drivers.drivers.qdevil.qdac2)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.split_version_string_into_components"]], "square (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.square"]], "square_wave() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.square_wave"]], "staircase (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.staircase"]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start"]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.start"]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.start"]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start"]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start"]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.start"]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start"]], "start() (qcodes_contrib_drivers.drivers.qdevil.qdac2.virtual_sweep_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Virtual_Sweep_Context.start"]], "start_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.start_V"]], "start_all() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.start_all"]], "start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start_marker"]], "start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start_marker"]], "start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start_marker"]], "start_marker() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start_marker"]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start_on"]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.start_on"]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start_on"]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start_on"]], "start_on() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start_on"]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.awg_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Awg_Context.start_on_external"]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.measurement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Measurement_Context.start_on_external"]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sine_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sine_Context.start_on_external"]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.square_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Square_Context.start_on_external"]], "start_on_external() (qcodes_contrib_drivers.drivers.qdevil.qdac2.triangle_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Triangle_Context.start_on_external"]], "start_recording_scpi() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.start_recording_scpi"]], "stop_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.stop_V"]], "sync() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.sync"]], "time_s() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.time_s"]], "traces() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.traces"]], "triangle (qcodes_contrib_drivers.drivers.qdevil.qdac1.waveform attribute)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Waveform.triangle"]], "triangle_wave() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.triangle_wave"]], "trigger() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.trigger"]], "trigger_out (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.qdac2_array property)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.QDac2_Array.trigger_out"]], "value (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2trigger_context property)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Trigger_Context.value"]], "values_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.list_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.List_Context.values_V"]], "values_v() (qcodes_contrib_drivers.drivers.qdevil.qdac2.sweep_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Sweep_Context.values_V"]], "vhigh_ihigh (qcodes_contrib_drivers.drivers.qdevil.qdac1.mode attribute)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode.vhigh_ihigh"]], "vhigh_ilow (qcodes_contrib_drivers.drivers.qdevil.qdac1.mode attribute)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode.vhigh_ilow"]], "virtual_detune() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.virtual_detune"]], "virtual_sweep() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.virtual_sweep"]], "virtual_sweep2d() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.virtual_sweep2d"]], "virtual_voltage() (qcodes_contrib_drivers.drivers.qdevil.qdac2.arrangement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Arrangement_Context.virtual_voltage"]], "virtual_voltage() (qcodes_contrib_drivers.drivers.qdevil.qdac2_array.array_arrangement_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2_Array.Array_Arrangement_Context.virtual_voltage"]], "vlow_ilow (qcodes_contrib_drivers.drivers.qdevil.qdac1.mode attribute)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.Mode.vlow_ilow"]], "waveform() (qcodes_contrib_drivers.drivers.qdevil.qdac2.trace_context method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.Trace_Context.waveform"]], "write() (qcodes_contrib_drivers.drivers.qdevil.qdac1.qdac method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC1.QDac.write"]], "write() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.write"]], "write() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.write"]], "write_channel() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.write_channel"]], "write_channel_floats() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2channel method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2Channel.write_channel_floats"]], "write_floats() (qcodes_contrib_drivers.drivers.qdevil.qdac2.qdac2 method)": [[23, "qcodes_contrib_drivers.drivers.QDevil.QDAC2.QDac2.write_floats"]], "d4 (class in qcodes_contrib_drivers.drivers.qutech.d4)": [[24, "qcodes_contrib_drivers.drivers.QuTech.D4.D4"]], "d5a (class in qcodes_contrib_drivers.drivers.qutech.d5a)": [[24, "qcodes_contrib_drivers.drivers.QuTech.D5a.D5a"]], "f1d (class in qcodes_contrib_drivers.drivers.qutech.f1d)": [[24, "qcodes_contrib_drivers.drivers.QuTech.F1d.F1d"]], "ivvi (class in qcodes_contrib_drivers.drivers.qutech.ivvi)": [[24, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI"]], "m2j (class in qcodes_contrib_drivers.drivers.qutech.m2j)": [[24, "qcodes_contrib_drivers.drivers.QuTech.M2j.M2j"]], "s5i (class in qcodes_contrib_drivers.drivers.qutech.s5i)": [[24, "qcodes_contrib_drivers.drivers.QuTech.S5i.S5i"]], "__init__() (qcodes_contrib_drivers.drivers.qutech.d5a.d5a method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.D5a.D5a.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.qutech.m2j.m2j method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.M2j.M2j.__init__"]], "adjust_parameter_validator() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.adjust_parameter_validator"]], "ask() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.ask"]], "dac_quata (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi attribute)": [[24, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.dac_quata"]], "full_range (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi attribute)": [[24, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.full_range"]], "get_all() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.get_all"]], "get_buffers_enabled() (qcodes_contrib_drivers.drivers.qutech.d4.d4 method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.D4.D4.get_buffers_enabled"]], "get_filter_value() (qcodes_contrib_drivers.drivers.qutech.d4.d4 method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.D4.D4.get_filter_value"]], "get_idn() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.get_idn"]], "get_mode() (qcodes_contrib_drivers.drivers.qutech.d4.d4 method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.D4.D4.get_mode"]], "get_pol_dac() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.get_pol_dac"]], "get_remote_settings() (qcodes_contrib_drivers.drivers.qutech.f1d.f1d method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.F1d.F1d.get_remote_settings"]], "half_range (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi attribute)": [[24, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.half_range"]], "linspace() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.linspace"]], "optimize_for_frequency() (qcodes_contrib_drivers.drivers.qutech.s5i.s5i method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.S5i.S5i.optimize_for_frequency"]], "qcodes_contrib_drivers.drivers.qutech": [[24, "module-qcodes_contrib_drivers.drivers.QuTech"]], "qcodes_contrib_drivers.drivers.qutech.d4": [[24, "module-qcodes_contrib_drivers.drivers.QuTech.D4"]], "qcodes_contrib_drivers.drivers.qutech.d5a": [[24, "module-qcodes_contrib_drivers.drivers.QuTech.D5a"]], "qcodes_contrib_drivers.drivers.qutech.f1d": [[24, "module-qcodes_contrib_drivers.drivers.QuTech.F1d"]], "qcodes_contrib_drivers.drivers.qutech.ivvi": [[24, "module-qcodes_contrib_drivers.drivers.QuTech.IVVI"]], "qcodes_contrib_drivers.drivers.qutech.m2j": [[24, "module-qcodes_contrib_drivers.drivers.QuTech.M2j"]], "qcodes_contrib_drivers.drivers.qutech.s5i": [[24, "module-qcodes_contrib_drivers.drivers.QuTech.S5i"]], "read() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.read"]], "resolution (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi attribute)": [[24, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.resolution"]], "round_dac() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.round_dac"]], "set_dac_unit() (qcodes_contrib_drivers.drivers.qutech.d5a.d5a method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.D5a.D5a.set_dac_unit"]], "set_dacs_zero() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.set_dacs_zero"]], "set_parameter_bounds() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.set_parameter_bounds"]], "set_pol_dacrack() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.set_pol_dacrack"]], "write() (qcodes_contrib_drivers.drivers.qutech.ivvi.ivvi method)": [[24, "qcodes_contrib_drivers.drivers.QuTech.IVVI.IVVI.write"]], "amplitudemodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation"]], "complexsweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ComplexSweep"]], "frequencymodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation"]], "frequencysweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweep"]], "frequencysweepmagphase (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweepMagPhase"]], "iqchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel"]], "iqmodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation"]], "lfoutputchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel"]], "lfoutputsweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep"]], "mockvisa (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisa"]], "mockvisahandle (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle"]], "outputchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel"]], "outputfrequencysweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep"]], "outputlevelsweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep"]], "phasemodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation"]], "pulsegenerator (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator"]], "pulsemodulation (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation"]], "rohdeschwarzhmc8041 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8041)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041.RohdeSchwarzHMC8041"]], "rohdeschwarzhmc8042 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8042)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042.RohdeSchwarzHMC8042"]], "rohdeschwarzhmc8043 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8043)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043.RohdeSchwarzHMC8043"]], "rohdeschwarzhmp4030 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmp4030)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030.RohdeSchwarzHMP4030"]], "rohdeschwarzhmp4040 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmp2020)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020.RohdeSchwarzHMP4040"]], "rohdeschwarzhmp4040 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmp2030)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030.RohdeSchwarzHMP4040"]], "rohdeschwarzhmp4040 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.hmp4040)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040.RohdeSchwarzHMP4040"]], "rohdeschwarz_smr40 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smr40)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40"]], "rohdeschwarz_smw200a (class in qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A"]], "safrequencysweep (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.SAFrequencySweep"]], "zvl13 (class in qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsegenerator method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.__init__"]], "ask() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.ask"]], "attenuator (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.attenuator"]], "bandwidth (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.bandwidth"]], "calibration() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.calibration"]], "clear() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.clear"]], "close() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.close"]], "close() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.close"]], "cmddef (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.cmddef"]], "coupling (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.coupling"]], "coupling_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.coupling_mode"]], "coupling_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.coupling_mode"]], "coupling_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.coupling_mode"]], "crest_factor (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.crest_factor"]], "delay (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.delay"]], "depth (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.depth"]], "deviation (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.deviation"]], "deviation (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.deviation"]], "deviation_ratio (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.deviation_ratio"]], "deviation_ratio (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.deviation_ratio"]], "do_get_frequency() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_frequency"]], "do_get_power() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_power"]], "do_get_pulse_delay() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_pulse_delay"]], "do_get_status() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_status"]], "do_get_status_of_alc() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_status_of_ALC"]], "do_get_status_of_modulation() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_get_status_of_modulation"]], "do_set_frequency() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_frequency"]], "do_set_power() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_power"]], "do_set_pulse_delay() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_pulse_delay"]], "do_set_status() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_status"]], "do_set_status_of_alc() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_status_of_ALC"]], "do_set_status_of_modulation() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.do_set_status_of_modulation"]], "double_delay (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.double_delay"]], "double_width (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.double_width"]], "dwell (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.dwell"]], "dwell (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.dwell"]], "dwell (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.dwell"]], "execute (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.execute"]], "execute (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.execute"]], "execute (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.execute"]], "freq_manual (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.freq_manual"]], "freq_max (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.freq_max"]], "freq_min (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.freq_min"]], "frequency (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.frequency"]], "frequency (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.frequency"]], "gain (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.gain"]], "gen_trigger_pulse() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.gen_trigger_pulse"]], "get_all() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.get_all"]], "get_error() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.get_error"]], "get_id() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.get_id"]], "get_options() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.get_options"]], "get_raw() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.complexsweep method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ComplexSweep.get_raw"]], "get_raw() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.frequencysweep method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweep.get_raw"]], "get_raw() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.frequencysweepmagphase method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweepMagPhase.get_raw"]], "get_raw() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.safrequencysweep method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.SAFrequencySweep.get_raw"]], "getall() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.getall"]], "i_bias (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.i_bias"]], "i_offset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.i_offset"]], "impedance (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.impedance"]], "level (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.level"]], "level (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.level"]], "lin_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.lin_step"]], "lin_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.lin_step"]], "log_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.log_step"]], "log_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.log_step"]], "log_step (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.log_step"]], "losc_input (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.losc_input"]], "losc_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.losc_mode"]], "losc_output (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.losc_output"]], "losc_state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.losc_state"]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.mode"]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.mode"]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.mode"]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.mode"]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.mode"]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.mode"]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.mode"]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.mode"]], "mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.mode"]], "na_mode() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.na_mode"]], "off() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.off"]], "off_modulation() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.off_modulation"]], "offset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.offset"]], "on() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.on"]], "on_modulation() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.on_modulation"]], "output (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsegenerator attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator.output"]], "period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.period"]], "period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.period"]], "points (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.points"]], "points (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.points"]], "points (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.points"]], "polarity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsegenerator attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator.polarity"]], "polarity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.polarity"]], "q_bias (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.q_bias"]], "q_offset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.q_offset"]], "qcodes_contrib_drivers.drivers.rohdeschwarz": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8041": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8041"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8042": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8042"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmc8043": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMC8043"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmp2020": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2020"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmp2030": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP2030"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmp4030": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4030"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.hmp4040": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.HMP4040"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.smr40": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13": [[25, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13"]], "query() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.query"]], "ratio (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.ratio"]], "reset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.reset"]], "reset (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.reset"]], "reset() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.reset"]], "reset() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.rohdeschwarz_smw200a method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.RohdeSchwarz_SMW200A.reset"]], "reset() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.reset"]], "retrace (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.retrace"]], "retrace (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.retrace"]], "retrace (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.retrace"]], "running (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.running"]], "running (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.running"]], "running (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.running"]], "sa_mode() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.sa_mode"]], "sensitivity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.sensitivity"]], "sensitivity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.sensitivity"]], "sensitivity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.sensitivity"]], "set_address() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisa method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisa.set_address"]], "set_ext_trig() (qcodes_contrib_drivers.drivers.rohdeschwarz.smr40.rohdeschwarz_smr40 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMR40.RohdeSchwarz_SMR40.set_ext_trig"]], "set_sweep() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.complexsweep method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ComplexSweep.set_sweep"]], "set_sweep() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.frequencysweep method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweep.set_sweep"]], "set_sweep() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.frequencysweepmagphase method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.FrequencySweepMagPhase.set_sweep"]], "set_sweep() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.safrequencysweep method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.SAFrequencySweep.set_sweep"]], "shape (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.shape"]], "shape (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.shape"]], "shape (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.shape"]], "shape (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputlevelsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputLevelSweep.shape"]], "shape_duty_cycle (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.shape_duty_cycle"]], "shape_period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.shape_period"]], "shape_width (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.shape_width"]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.source"]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.source"]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.source"]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.source"]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.source"]], "source (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.source"]], "source_path (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.source_path"]], "spacing (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputsweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputSweep.spacing"]], "spacing (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputfrequencysweep attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputFrequencySweep.spacing"]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.state"]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.state"]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.state"]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.state"]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.state"]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.state"]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.state"]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsegenerator attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseGenerator.state"]], "state (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.state"]], "swap (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.swap"]], "sweep_center (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.sweep_center"]], "sweep_span (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.sweep_span"]], "sweep_start (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.sweep_start"]], "sweep_stop (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.outputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.OutputChannel.sweep_stop"]], "total_depth (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.amplitudemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.AmplitudeModulation.total_depth"]], "total_deviation (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.frequencymodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.FrequencyModulation.total_deviation"]], "total_deviation (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.phasemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PhaseModulation.total_deviation"]], "transition_type (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.transition_type"]], "trapez_fall (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.trapez_fall"]], "trapez_height (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.trapez_height"]], "trapez_period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.trapez_period"]], "trapez_rise (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.trapez_rise"]], "triangle_period (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.triangle_period"]], "triangle_rise (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.triangle_rise"]], "trigger_impedance (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.trigger_impedance"]], "trigger_mode (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.trigger_mode"]], "type (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQChannel.type"]], "update_traces() (qcodes_contrib_drivers.drivers.rohdeschwarz.zvl13.zvl13 method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.ZVL13.ZVL13.update_traces"]], "video_polarity (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.video_polarity"]], "voltage (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.lfoutputchannel attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.LFOutputChannel.voltage"]], "wideband (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.iqmodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.IQModulation.wideband"]], "width (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200a.pulsemodulation attribute)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200A.PulseModulation.width"]], "write() (qcodes_contrib_drivers.drivers.rohdeschwarz.smw200asim.mockvisahandle method)": [[25, "qcodes_contrib_drivers.drivers.RohdeSchwarz.SMW200Asim.MockVisaHandle.write"]], "rohdeschwarzhmc804xchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmc804x)": [[26, "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x.RohdeSchwarzHMC804xChannel"]], "rohdeschwarzhmpchannel (class in qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmp)": [[26, "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP.RohdeSchwarzHMPChannel"]], "get_max_current() (qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmp.rohdeschwarzhmpchannel method)": [[26, "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP.RohdeSchwarzHMPChannel.get_max_current"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.private": [[26, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmc804x": [[26, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMC804x"]], "qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmp": [[26, "module-qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP"]], "send_cmd() (qcodes_contrib_drivers.drivers.rohdeschwarz.private.hmp.rohdeschwarzhmpchannel method)": [[26, "qcodes_contrib_drivers.drivers.RohdeSchwarz.private.HMP.RohdeSchwarzHMPChannel.send_cmd"]], "shamrockcif (class in qcodes_contrib_drivers.drivers.shamrock.sr750)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF"]], "shamrockcif (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 attribute)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.ShamrockCIF"]], "shamrock_sr750 (class in qcodes_contrib_drivers.drivers.shamrock.sr750)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750"]], "close() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.close"]], "close() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.close"]], "device_id (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 attribute)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.device_id"]], "dll (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif attribute)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.dll"]], "error_check() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.error_check"]], "get_calibration() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_calibration"]], "get_grating() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_grating"]], "get_grating_info() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_grating_info"]], "get_idn() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.get_idn"]], "get_number_devices() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_number_devices"]], "get_number_gratings() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_number_gratings"]], "get_number_pixels() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_number_pixels"]], "get_pixel_width() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_pixel_width"]], "get_serial_number() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_serial_number"]], "get_slit() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_slit"]], "get_wavelength() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_wavelength"]], "get_wavelength_limits() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.get_wavelength_limits"]], "initialize() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.initialize"]], "number_gratings (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 attribute)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.number_gratings"]], "qcodes_contrib_drivers.drivers.shamrock": [[27, "module-qcodes_contrib_drivers.drivers.Shamrock"]], "qcodes_contrib_drivers.drivers.shamrock.sr750": [[27, "module-qcodes_contrib_drivers.drivers.Shamrock.SR750"]], "serial_number (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrock_sr750 attribute)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.Shamrock_SR750.serial_number"]], "set_grating() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_grating"]], "set_number_pixels() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_number_pixels"]], "set_pixel_width() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_pixel_width"]], "set_slit() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_slit"]], "set_wavelength() (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif method)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.set_wavelength"]], "verbose (qcodes_contrib_drivers.drivers.shamrock.sr750.shamrockcif attribute)": [[27, "qcodes_contrib_drivers.drivers.Shamrock.SR750.ShamrockCIF.verbose"]], "deviceinfot (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT"]], "devicerfparamst (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT"]], "devicestatust (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT"]], "hwtriggert (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT"]], "listmodet (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT"]], "mandate (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate"]], "operatestatust (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT"]], "pllstatust (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT"]], "sc5521a (class in qcodes_contrib_drivers.drivers.signalcore.signalcore)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.SC5521A"]], "__init__() (qcodes_contrib_drivers.drivers.signalcore.signalcore.sc5521a method)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.SC5521A.__init__"]], "atten_value (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.atten_value"]], "auto_pwr_disable (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.auto_pwr_disable"]], "buffer_points (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.buffer_points"]], "crs_aux_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.crs_aux_pll_ld"]], "crs_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.crs_pll_ld"]], "crs_ref_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.crs_ref_pll_ld"]], "day (qcodes_contrib_drivers.drivers.signalcore.signalcore.mandate attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate.day"]], "device_access (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.device_access"]], "device_interfaces (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.device_interfaces"]], "device_standby (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.device_standby"]], "edge (qcodes_contrib_drivers.drivers.signalcore.signalcore.hwtriggert attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT.edge"]], "ext_ref_detect (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.ext_ref_detect"]], "ext_ref_lock_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.ext_ref_lock_enable"]], "fine_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.fine_pll_ld"]], "firmware_revision (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.firmware_revision"]], "frequency (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.frequency"]], "get_idn() (qcodes_contrib_drivers.drivers.signalcore.signalcore.sc5521a method)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.SC5521A.get_idn"]], "hardware_revision (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.hardware_revision"]], "harmonic_ss (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.harmonic_ss"]], "hour (qcodes_contrib_drivers.drivers.signalcore.signalcore.mandate attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate.hour"]], "hw_trigger (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.hw_trigger"]], "level_dac_value (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.level_dac_value"]], "list_mode_running (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.list_mode_running"]], "list_mode_t (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicestatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT.list_mode_t"]], "man_date (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.man_date"]], "month (qcodes_contrib_drivers.drivers.signalcore.signalcore.mandate attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate.month"]], "operate_status_t (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicestatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT.operate_status_t"]], "output_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.output_enable"]], "over_temp (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.over_temp"]], "pci_clk_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.pci_clk_enable"]], "pll_status_t (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicestatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceStatusT.pll_status_t"]], "power_level (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.power_level"]], "product_serial_number (qcodes_contrib_drivers.drivers.signalcore.signalcore.deviceinfot attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceInfoT.product_serial_number"]], "pxi_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.hwtriggert attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT.pxi_enable"]], "pxi_line (qcodes_contrib_drivers.drivers.signalcore.signalcore.hwtriggert attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.HWTriggerT.pxi_line"]], "qcodes_contrib_drivers.drivers.signalcore": [[28, "module-qcodes_contrib_drivers.drivers.SignalCore"]], "qcodes_contrib_drivers.drivers.signalcore.signalcore": [[28, "module-qcodes_contrib_drivers.drivers.SignalCore.SignalCore"]], "ref_100_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.ref_100_pll_ld"]], "ref_10_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.ref_10_pll_ld"]], "ref_out_select (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.ref_out_select"]], "return_to_start (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.return_to_start"]], "rf1_lock_mode (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.rf1_lock_mode"]], "rf1_loop_gain (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.rf1_loop_gain"]], "rf_mode (qcodes_contrib_drivers.drivers.signalcore.signalcore.operatestatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.OperateStatusT.rf_mode"]], "rf_phase_offset (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.rf_phase_offset"]], "step_on_hw_trig (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.step_on_hw_trig"]], "sum_pll_ld (qcodes_contrib_drivers.drivers.signalcore.signalcore.pllstatust attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.PLLStatusT.sum_pll_ld"]], "sweep_cycles (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_cycles"]], "sweep_dir (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.sweep_dir"]], "sweep_dwell_time (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_dwell_time"]], "sweep_mode (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.sweep_mode"]], "sweep_start_freq (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_start_freq"]], "sweep_step_freq (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_step_freq"]], "sweep_stop_freq (qcodes_contrib_drivers.drivers.signalcore.signalcore.devicerfparamst attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.DeviceRFParamsT.sweep_stop_freq"]], "tri_waveform (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.tri_waveform"]], "trig_out_enable (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.trig_out_enable"]], "trig_out_on_cycle (qcodes_contrib_drivers.drivers.signalcore.signalcore.listmodet attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ListModeT.trig_out_on_cycle"]], "year (qcodes_contrib_drivers.drivers.signalcore.signalcore.mandate attribute)": [[28, "qcodes_contrib_drivers.drivers.SignalCore.SignalCore.ManDate.year"]], "channelarray (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.ChannelArray"]], "communicationhandler (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler"]], "sqcounts (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts"]], "sqtalk (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk"]], "timearray (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.TimeArray"]], "websqcontrolqcode (class in qcodes_contrib_drivers.drivers.singlequantum.singlequantum)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.WebSQControlqcode"]], "acquire_cnts_t() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.acquire_cnts_t"]], "add_labelprops() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.add_labelProps"]], "auto_cali_bias_currents() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.auto_cali_bias_currents"]], "auto_cali_finished() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.auto_cali_finished"]], "check_error() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.check_error"]], "close() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqcounts method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts.close"]], "close() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.close"]], "enable_detectors() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.enable_detectors"]], "error() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.error"]], "get_all_labels() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.get_all_labels"]], "get_bias_current() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_bias_current"]], "get_bias_voltage() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_bias_voltage"]], "get_label() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.get_label"]], "get_measurement_periode() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_measurement_periode"]], "get_n() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqcounts method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts.get_n"]], "get_number_of_detectors() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_number_of_detectors"]], "get_raw() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.channelarray method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.ChannelArray.get_raw"]], "get_raw() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.timearray method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.TimeArray.get_raw"]], "get_trigger_level() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.get_trigger_level"]], "qcodes_contrib_drivers.drivers.singlequantum": [[29, "module-qcodes_contrib_drivers.drivers.SingleQuantum"]], "qcodes_contrib_drivers.drivers.singlequantum.singlequantum": [[29, "module-qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum"]], "run() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqcounts method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQCounts.run"]], "run() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.run"]], "send() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.send"]], "set_bias_current() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.set_bias_current"]], "set_dark_counts_auto_iv() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.set_dark_counts_auto_iv"]], "set_measurement_periode() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.set_measurement_periode"]], "set_trigger_level() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.communicationhandler method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.CommunicationHandler.set_trigger_level"]], "sub_jsons() (qcodes_contrib_drivers.drivers.singlequantum.singlequantum.sqtalk method)": [[29, "qcodes_contrib_drivers.drivers.SingleQuantum.SingleQuantum.SQTalk.sub_jsons"]], "m4i (class in qcodes_contrib_drivers.drivers.spectrum.m4i)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i"]], "__init__() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.__init__"]], "active_channels() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.active_channels"]], "blockavg_hardware_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.blockavg_hardware_trigger_acquisition"]], "close() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.close"]], "convert_to_voltage() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.convert_to_voltage"]], "gated_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.gated_trigger_acquisition"]], "get_card_memory() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_card_memory"]], "get_card_type() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_card_type"]], "get_data() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_data"]], "get_error_info32bit() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_error_info32bit"]], "get_firmware_version() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_firmware_version"]], "get_hardware_version() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_hardware_version"]], "get_idn() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_idn"]], "get_max_sample_rate() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.get_max_sample_rate"]], "initialize_channels() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.initialize_channels"]], "multiple_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.multiple_trigger_acquisition"]], "qcodes_contrib_drivers.drivers.spectrum": [[30, "module-qcodes_contrib_drivers.drivers.Spectrum"]], "qcodes_contrib_drivers.drivers.spectrum.m4i": [[30, "module-qcodes_contrib_drivers.drivers.Spectrum.M4i"]], "reset() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.reset"]], "retrieve_data() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.retrieve_data"]], "set_channel_or_trigger_settings() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.set_channel_OR_trigger_settings"]], "set_channel_settings() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.set_channel_settings"]], "set_ext0_or_trigger_settings() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.set_ext0_OR_trigger_settings"]], "setup_multi_recording() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.setup_multi_recording"]], "single_software_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.single_software_trigger_acquisition"]], "single_software_trigger_acquisition_boxcar() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.single_software_trigger_acquisition_boxcar"]], "single_trigger_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.single_trigger_acquisition"]], "start_acquisition() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.start_acquisition"]], "start_triggered() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.start_triggered"]], "sztypetoname() (in module qcodes_contrib_drivers.drivers.spectrum.m4i)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.szTypeToName"]], "wait_ready() (qcodes_contrib_drivers.drivers.spectrum.m4i.m4i method)": [[30, "qcodes_contrib_drivers.drivers.Spectrum.M4i.M4i.wait_ready"]], "giga() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[31, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.GIGA"]], "giga_b() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[31, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.GIGA_B"]], "kilo() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[31, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.KILO"]], "kilo_b() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[31, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.KILO_B"]], "mega() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[31, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.MEGA"]], "mega_b() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.regs)": [[31, "qcodes_contrib_drivers.drivers.Spectrum.py_header.regs.MEGA_B"]], "main() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.h2py)": [[31, "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py.main"]], "process() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.h2py)": [[31, "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py.process"]], "pytify() (in module qcodes_contrib_drivers.drivers.spectrum.py_header.h2py)": [[31, "qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py.pytify"]], "qcodes_contrib_drivers.drivers.spectrum.py_header": [[31, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header"]], "qcodes_contrib_drivers.drivers.spectrum.py_header.h2py": [[31, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.h2py"]], "qcodes_contrib_drivers.drivers.spectrum.py_header.regs": [[31, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.regs"]], "qcodes_contrib_drivers.drivers.spectrum.py_header.spcerr": [[31, "module-qcodes_contrib_drivers.drivers.Spectrum.py_header.spcerr"]], "cmdbuffreespace (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.CmdBufFreeSpace"]], "curposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.CurPosition"]], "curspeed (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.CurSpeed"]], "curt (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.CurT"]], "deviceinformation (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation"]], "encposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.getposition attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition.EncPosition"]], "encposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.EncPosition"]], "encsts (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.EncSts"]], "flags (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Flags"]], "gpioflags (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.GPIOFlags"]], "getposition (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition"]], "ipwr (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Ipwr"]], "iusb (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Iusb"]], "major (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.Major"]], "manufacturer (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.Manufacturer"]], "manufacturerid (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.ManufacturerId"]], "minor (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.Minor"]], "movests (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.MoveSts"]], "mvcmdsts (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.MvCmdSts"]], "pwrsts (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.PWRSts"]], "position (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.getposition attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition.Position"]], "productdescription (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.ProductDescription"]], "release (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.deviceinformation attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.DeviceInformation.Release"]], "standa_10mwa168 (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Standa_10MWA168"]], "status (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status"]], "upwr (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Upwr"]], "uusb (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.Uusb"]], "windsts (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.WindSts"]], "command_move() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.command_move"]], "enumerate_devices() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.enumerate_devices"]], "error_check() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.error_check"]], "get_device_name() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.get_device_name"]], "get_position() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.get_position"]], "get_status() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.get_status"]], "libximc (class in qcodes_contrib_drivers.drivers.standa.standa_10mwa168)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc"]], "open_device() (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.libximc method)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.libximc.open_device"]], "qcodes_contrib_drivers.drivers.standa": [[32, "module-qcodes_contrib_drivers.drivers.Standa"]], "qcodes_contrib_drivers.drivers.standa.standa_10mwa168": [[32, "module-qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168"]], "ucurposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.uCurPosition"]], "ucurspeed (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.status attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.Status.uCurSpeed"]], "uposition (qcodes_contrib_drivers.drivers.standa.standa_10mwa168.getposition attribute)": [[32, "qcodes_contrib_drivers.drivers.Standa.Standa_10MWA168.GetPosition.uPosition"]], "channel_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.CHANNEL_MAPPING"]], "dg645 (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645"]], "display_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.DISPLAY_MAPPING"]], "output_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.OUTPUT_MAPPING"]], "polarity_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.POLARITY_MAPPING"]], "prescale_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.PRESCALE_MAPPING"]], "sim928 (class in qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928"]], "trigger_mapping (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 attribute)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.TRIGGER_MAPPING"]], "ask_module() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.ask_module"]], "byte_to_bits() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 static method)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.byte_to_bits"]], "check_module_errors() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.check_module_errors"]], "find_modules() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.find_modules"]], "get_module_idn() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.get_module_idn"]], "get_module_status() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.get_module_status"]], "get_voltage() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.get_voltage"]], "local() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.local"]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems": [[33, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems"]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645": [[33, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645"]], "qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928": [[33, "module-qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928"]], "remote() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.remote"]], "reset() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.reset"]], "reset_module() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.reset_module"]], "save_settings() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.save_settings"]], "self_calibrate() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.self_calibrate"]], "self_test() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.self_test"]], "set_smooth() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.set_smooth"]], "set_voltage() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.set_voltage"]], "trigger() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.trigger"]], "wait() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.dg645.dg645 method)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.DG645.DG645.wait"]], "write_module() (qcodes_contrib_drivers.drivers.stanfordresearchsystems.sim928.sim928 method)": [[33, "qcodes_contrib_drivers.drivers.StanfordResearchSystems.SIM928.SIM928.write_module"]], "afg3000 (class in qcodes_contrib_drivers.drivers.tektronix.afg3000)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000"]], "afg3252 (class in qcodes_contrib_drivers.drivers.tektronix.afg3000)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3252"]], "keithley_2000_scan_channel (class in qcodes_contrib_drivers.drivers.tektronix.keithley_2000_scan)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan.Keithley_2000_Scan_Channel"]], "keithley_2700 (class in qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700"]], "keithley_6430 (class in qcodes_contrib_drivers.drivers.tektronix.keithley_6430)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430"]], "keithley_6500 (class in qcodes_contrib_drivers.drivers.tektronix.keithley_6500)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_6500"]], "keithley_sense (class in qcodes_contrib_drivers.drivers.tektronix.keithley_6500)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_Sense"]], "tektronix_awg520 (class in qcodes_contrib_drivers.drivers.tektronix.awg520)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520"]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.keithley_2000_scan.keithley_2000_scan_channel method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan.Keithley_2000_Scan_Channel.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.keithley_6500.keithley_6500 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_6500.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.tektronix.keithley_6500.keithley_sense method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500.Keithley_Sense.__init__"]], "abort() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.abort"]], "bool_to_str() (in module qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.bool_to_str"]], "change_folder() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.change_folder"]], "clear_waveforms() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.clear_waveforms"]], "delete_all_waveforms_from_list() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.delete_all_waveforms_from_list"]], "force_logicjump() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.force_logicjump"]], "force_trigger() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.force_trigger"]], "get_all() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_all"]], "get_all() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.get_all"]], "get_current_folder_name() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_current_folder_name"]], "get_filenames() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_filenames"]], "get_folder_contents() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_folder_contents"]], "get_jumpmode() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_jumpmode"]], "get_state() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.get_state"]], "goto_root() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.goto_root"]], "init() (qcodes_contrib_drivers.drivers.tektronix.keithley_6430.keithley_6430 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430.init"]], "load_and_set_sequence() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.load_and_set_sequence"]], "make_directory() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.make_directory"]], "parsebool() (in module qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.parsebool"]], "parseint() (in module qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.parseint"]], "parsestr() (in module qcodes_contrib_drivers.drivers.tektronix.keithley_2700)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.parsestr"]], "qcodes_contrib_drivers.drivers.tektronix": [[34, "module-qcodes_contrib_drivers.drivers.Tektronix"]], "qcodes_contrib_drivers.drivers.tektronix.afg3000": [[34, "module-qcodes_contrib_drivers.drivers.Tektronix.AFG3000"]], "qcodes_contrib_drivers.drivers.tektronix.awg520": [[34, "module-qcodes_contrib_drivers.drivers.Tektronix.AWG520"]], "qcodes_contrib_drivers.drivers.tektronix.keithley_2000_scan": [[34, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2000_Scan"]], "qcodes_contrib_drivers.drivers.tektronix.keithley_2700": [[34, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700"]], "qcodes_contrib_drivers.drivers.tektronix.keithley_6430": [[34, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430"]], "qcodes_contrib_drivers.drivers.tektronix.keithley_6500": [[34, "module-qcodes_contrib_drivers.drivers.Tektronix.Keithley_6500"]], "read() (qcodes_contrib_drivers.drivers.tektronix.keithley_6430.keithley_6430 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430.read"]], "recall() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.recall"]], "resend_waveform() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.resend_waveform"]], "reset() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.reset"]], "reset() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.reset"]], "reset() (qcodes_contrib_drivers.drivers.tektronix.keithley_6430.keithley_6430 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430.reset"]], "reset_edit_memory() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.reset_edit_memory"]], "return_self() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.return_self"]], "save() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.save"]], "self_calibrate() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.self_calibrate"]], "self_test() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.self_test"]], "send_pattern() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.send_pattern"]], "send_sequence() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.send_sequence"]], "send_sequence2() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.send_sequence2"]], "send_waveform() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.send_waveform"]], "set_current_folder_name() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.set_current_folder_name"]], "set_defaults() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.set_defaults"]], "set_jumpmode() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.set_jumpmode"]], "set_mode() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.set_mode"]], "set_mode_volt_dc() (qcodes_contrib_drivers.drivers.tektronix.keithley_2700.keithley_2700 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_2700.Keithley_2700.set_mode_volt_dc"]], "set_sequence() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.set_sequence"]], "set_setup_filename() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.set_setup_filename"]], "set_trigger_immediate() (qcodes_contrib_drivers.drivers.tektronix.keithley_6430.keithley_6430 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.Keithley_6430.Keithley_6430.set_trigger_immediate"]], "start() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.start"]], "stop() (qcodes_contrib_drivers.drivers.tektronix.awg520.tektronix_awg520 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AWG520.Tektronix_AWG520.stop"]], "synchronize_phase() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.synchronize_phase"]], "upload_waveform() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.upload_waveform"]], "wait() (qcodes_contrib_drivers.drivers.tektronix.afg3000.afg3000 method)": [[34, "qcodes_contrib_drivers.drivers.Tektronix.AFG3000.AFG3000.wait"]], "forward (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.homelimitswitch attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.HomeLimitSwitch.FORWARD"]], "forward (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.rotationdirection attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.RotationDirection.FORWARD"]], "homelimitswitch (class in qcodes_contrib_drivers.drivers.thorlabs.k10cr1)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.HomeLimitSwitch"]], "k10cr1 (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabshwtype attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.ThorlabsHWType.K10CR1"]], "mff10x (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabshwtype attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.ThorlabsHWType.MFF10x"]], "prm1z8 (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabshwtype attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.ThorlabsHWType.PRM1Z8"]], "reverse (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.homelimitswitch attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.HomeLimitSwitch.REVERSE"]], "reverse (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.rotationdirection attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.RotationDirection.REVERSE"]], "rotationdirection (class in qcodes_contrib_drivers.drivers.thorlabs.k10cr1)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.RotationDirection"]], "thorlabsexception": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.ThorlabsException"]], "thorlabshwtype (class in qcodes_contrib_drivers.drivers.thorlabs.apt)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.ThorlabsHWType"]], "thorlabs_apt (class in qcodes_contrib_drivers.drivers.thorlabs.apt)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT"]], "thorlabs_k10cr1 (class in qcodes_contrib_drivers.drivers.thorlabs.k10cr1)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1"]], "thorlabs_mff10x (class in qcodes_contrib_drivers.drivers.thorlabs.mff10x)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x"]], "thorlabs_prm1z8 (class in qcodes_contrib_drivers.drivers.thorlabs.prm1z8)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8"]], "apt (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.apt"]], "apt (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.apt"]], "apt (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.apt"]], "apt_clean_up() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.apt_clean_up"]], "apt_init() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.apt_init"]], "disable_hw_channel() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.disable_hw_channel"]], "dll (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.dll"]], "enable_event_dlg() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.enable_event_dlg"]], "enable_hw_channel() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.enable_hw_channel"]], "error_check() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.error_check"]], "get_hw_info() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.get_hw_info"]], "get_hw_serial_num_ex() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.get_hw_serial_num_ex"]], "get_idn() (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.get_idn"]], "get_idn() (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.get_idn"]], "get_idn() (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.get_idn"]], "init_hw_device() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.init_hw_device"]], "list_available_devices() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.list_available_devices"]], "model (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.model"]], "model (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.model"]], "model (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.model"]], "mot_get_home_parameters() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.mot_get_home_parameters"]], "mot_get_position() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.mot_get_position"]], "mot_get_status_bits() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.mot_get_status_bits"]], "mot_get_velocity_parameters() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.mot_get_velocity_parameters"]], "mot_move_absolute_ex() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.mot_move_absolute_ex"]], "mot_move_home() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.mot_move_home"]], "mot_move_jog() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.mot_move_jog"]], "mot_move_velocity() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.mot_move_velocity"]], "mot_set_home_parameters() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.mot_set_home_parameters"]], "mot_set_velocity_parameters() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.mot_set_velocity_parameters"]], "mot_stop_profiled() (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt method)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.mot_stop_profiled"]], "qcodes_contrib_drivers.drivers.thorlabs": [[35, "module-qcodes_contrib_drivers.drivers.Thorlabs"]], "qcodes_contrib_drivers.drivers.thorlabs.apt": [[35, "module-qcodes_contrib_drivers.drivers.Thorlabs.APT"]], "qcodes_contrib_drivers.drivers.thorlabs.k10cr1": [[35, "module-qcodes_contrib_drivers.drivers.Thorlabs.K10CR1"]], "qcodes_contrib_drivers.drivers.thorlabs.mff10x": [[35, "module-qcodes_contrib_drivers.drivers.Thorlabs.MFF10x"]], "qcodes_contrib_drivers.drivers.thorlabs.prm1z8": [[35, "module-qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8"]], "serial_number (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.serial_number"]], "serial_number (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.serial_number"]], "serial_number (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.serial_number"]], "verbose (qcodes_contrib_drivers.drivers.thorlabs.apt.thorlabs_apt attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.APT.Thorlabs_APT.verbose"]], "version (qcodes_contrib_drivers.drivers.thorlabs.k10cr1.thorlabs_k10cr1 attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.K10CR1.Thorlabs_K10CR1.version"]], "version (qcodes_contrib_drivers.drivers.thorlabs.mff10x.thorlabs_mff10x attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.MFF10x.Thorlabs_MFF10x.version"]], "version (qcodes_contrib_drivers.drivers.thorlabs.prm1z8.thorlabs_prm1z8 attribute)": [[35, "qcodes_contrib_drivers.drivers.Thorlabs.PRM1Z8.Thorlabs_PRM1Z8.version"]], "lda (in module qcodes_contrib_drivers.drivers.vaunix.lda)": [[36, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LDA"]], "ldaattenuation (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[36, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaAttenuation"]], "ldachannel (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[36, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaChannel"]], "ldaparameter (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[36, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter"]], "ldaworkingfrequency (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[36, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency"]], "vaunix_lda (class in qcodes_contrib_drivers.drivers.vaunix.lda)": [[36, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA"]], "__init__() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaparameter method)": [[36, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaworkingfrequency method)": [[36, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency.__init__"]], "__init__() (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda method)": [[36, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.__init__"]], "close() (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda method)": [[36, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.close"]], "dll_path (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda attribute)": [[36, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.dll_path"]], "get_idn() (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda method)": [[36, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.get_idn"]], "get_raw() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaparameter method)": [[36, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter.get_raw"]], "get_validator() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaworkingfrequency class method)": [[36, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency.get_validator"]], "qcodes_contrib_drivers.drivers.vaunix": [[36, "module-qcodes_contrib_drivers.drivers.Vaunix"]], "qcodes_contrib_drivers.drivers.vaunix.lda": [[36, "module-qcodes_contrib_drivers.drivers.Vaunix.LDA"]], "save_settings() (qcodes_contrib_drivers.drivers.vaunix.lda.vaunix_lda method)": [[36, "qcodes_contrib_drivers.drivers.Vaunix.LDA.Vaunix_LDA.save_settings"]], "scaling (qcodes_contrib_drivers.drivers.vaunix.lda.ldaattenuation attribute)": [[36, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaAttenuation.scaling"]], "scaling (qcodes_contrib_drivers.drivers.vaunix.lda.ldaparameter attribute)": [[36, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter.scaling"]], "scaling (qcodes_contrib_drivers.drivers.vaunix.lda.ldaworkingfrequency attribute)": [[36, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaWorkingFrequency.scaling"]], "set_raw() (qcodes_contrib_drivers.drivers.vaunix.lda.ldaparameter method)": [[36, "qcodes_contrib_drivers.drivers.Vaunix.LDA.LdaParameter.set_raw"]], "compilererror": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.CompilerError"]], "hf2li (class in qcodes_contrib_drivers.drivers.zurichinstruments.hf2li)": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI.HF2LI"]], "output_mapping (qcodes_contrib_drivers.drivers.zurichinstruments.hf2li.hf2li attribute)": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI.HF2LI.OUTPUT_MAPPING"]], "zihdawg8 (class in qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8)": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8"]], "__init__() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.__init__"]], "create_parameters_from_node_tree() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.create_parameters_from_node_tree"]], "disable_channel() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.disable_channel"]], "download_device_node_tree() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.download_device_node_tree"]], "enable_channel() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.enable_channel"]], "generate_csv_sequence_program() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 static method)": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.generate_csv_sequence_program"]], "qcodes_contrib_drivers.drivers.zurichinstruments": [[37, "module-qcodes_contrib_drivers.drivers.ZurichInstruments"]], "qcodes_contrib_drivers.drivers.zurichinstruments.hf2li": [[37, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI"]], "qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8": [[37, "module-qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8"]], "sample() (qcodes_contrib_drivers.drivers.zurichinstruments.hf2li.hf2li method)": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.HF2LI.HF2LI.sample"]], "set_channel_grouping() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.set_channel_grouping"]], "snapshot() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.snapshot"]], "snapshot_base() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.snapshot_base"]], "start_awg() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.start_awg"]], "stop_awg() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.stop_awg"]], "upload_sequence_program() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.upload_sequence_program"]], "upload_waveform() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.upload_waveform"]], "waveform_to_csv() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.waveform_to_csv"]], "waveform_to_wave() (qcodes_contrib_drivers.drivers.zurichinstruments.zihdawg8.zihdawg8 method)": [[37, "qcodes_contrib_drivers.drivers.ZurichInstruments.ZIHDAWG8.ZIHDAWG8.waveform_to_wave"]]}})